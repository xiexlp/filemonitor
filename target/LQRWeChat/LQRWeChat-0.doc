
0:F:\git\android\weixinlook\LQRWeChat\app\src\androidTest\java\com\lqr\wechat\ExampleInstrumentedTest.java
package com.lqr.wechat;

import android.content.Context;
import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumentation test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() throws Exception {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getTargetContext();

        assertEquals("com.lqr.wechat", appContext.getPackageName());
    }
}

1:F:\git\android\weixinlook\LQRWeChat\app\src\main\AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.lqr.wechat">

    <!-- 视频录制的权限star   -->
    <!-- sd卡写入权限  -->
    <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
    <!-- 硬件支持   -->
    <uses-feature android:name="android.hardware.camera"/>
    <uses-feature android:name="android.hardware.camera.autofocus"/>
    <!-- 视频录制的权限end   -->

    <!-- 权限声明 -->
    <!-- 访问网络状态-->
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
    <!-- 控制呼吸灯，振动器等，用于新消息提醒 -->
    <uses-permission android:name="android.permission.FLASHLIGHT"/>
    <uses-permission android:name="android.permission.VIBRATE"/>
    <!-- 外置存储存取权限 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

    <!-- 多媒体相关 -->
    <uses-permission android:name="android.permission.CAMERA"/>
    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>

    <!-- 如果需要实时音视频通话模块，下面的权限也是必须的。否则，可以不加 -->
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>
    <uses-permission android:name="android.permission.BROADCAST_STICKY"/>

    <uses-feature android:name="android.hardware.camera"/>
    <uses-feature android:name="android.hardware.camera.autofocus"/>
    <uses-feature
        android:glEsVersion="0x00020000"
        android:required="true"/>

    <!-- SDK 权限申明, 第三方 APP 接入时，请将 com.netease.nim.demo 替换为自己的包名 -->
    <!-- 和下面的 uses-permission 一起加入到你的 AndroidManifest 文件中。 -->
    <permission
        android:name="com.lqr.wechat.permission.RECEIVE_MSG"
        android:protectionLevel="signature"/>
    <!-- 接收 SDK 消息广播权限， 第三方 APP 接入时，请将 com.netease.nim.demo 替换为自己的包名 -->
    <uses-permission android:name="com.lqr.wechat.RECEIVE_MSG"/>

    <application
        android:name=".App"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">

        <!--###############################网易云信配置 begin###############################-->
        <!-- APP key, 可以在这里设置，也可以在 SDKOptions 中提供。
            如果 SDKOptions 中提供了，取 SDKOptions 中的值。 -->
        <meta-data
            android:name="com.netease.nim.appKey"
            android:value="5c6b874a1803f3500e26a984f5ad33a7"/>
        <!-- 声明云信后台服务，如需保持后台推送，使用独立进程效果会更好。 -->
        <service
            android:name="com.netease.nimlib.service.NimService"
            android:process=":core"/>

        <service
            android:name="com.netease.nimlib.service.NimService$Aux"
            android:process=":core"/>

        <!-- 云信SDK的监视系统启动和网络变化的广播接收器，用户开机自启动以及网络变化时候重新登录，
            保持和 NimService 同一进程 -->
        <receiver
            android:name="com.netease.nimlib.service.NimReceiver"
            android:exported="false"
            android:process=":core">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
                <action android:name="android.net.conn.CONNECTIVITY_CHANGE"/>
            </intent-filter>
        </receiver>

        <!-- 云信进程间通信 Receiver -->
        <receiver android:name="com.netease.nimlib.service.ResponseReceiver"/>

        <!-- 安卓保活配置 -->
        <service
            android:name="com.netease.cosine.core.CosineService"
            android:process=":cosine">
        </service>

        <receiver
            android:name="com.netease.cosine.target.CosineReceiver"
            android:exported="true"
            android:process=":cosine">
        </receiver>

        <meta-data
            android:name="com.netease.cosine.target"
            android:value=""/>
        <meta-data
            android:name="com.netease.cosine.target.receiver"
            android:value="com.netease.nimlib.service.NimReceiver"/>

        <!--###############################网易云信配置 end###############################-->

        <activity
            android:name=".activity.SplashActivity"
            android:screenOrientation="portrait">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>

                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <activity
            android:name=".activity.LoginActivity"
            android:launchMode="singleTask"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.MainActivity"
            android:launchMode="singleTask"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.OtherLoginActivity"
            android:screenOrientation="portrait">
        </activity>

        <!--会话聊天-->
        <activity
            android:name=".activity.SessionActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.RedPacketActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.TransferActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.LocationActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.FilePreviewActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.UserInfoActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.AliasActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.FriendCirclePrivacySetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.PostscriptActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.ImageWatchActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.FileWallActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.NewFriendActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.AddFriendActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.SearchUserActivity"
            android:screenOrientation="portrait">
        </activity>
        <!--设置-->
        <activity
            android:name=".activity.SettingActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.NewMsgNotifySetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.DontDistorbSetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.CheatSetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.PrivacySetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.CommonSetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.AccountAndSafeSetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.AboutActivity"
            android:screenOrientation="portrait">
        </activity>
        <!--卡包-->
        <activity
            android:name=".activity.CardPaketActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.MsgNotificationActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.VipCardActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.MyCouponActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.FriendsCouponActivity"
            android:screenOrientation="portrait">
        </activity>

        <!--个人信息-->
        <activity
            android:name=".activity.MyInfoActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.ShowBigImageActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.ChangeNameActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.ChangeSignatureActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.QRCodeCardActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.WebViewActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.ScanActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.NearbyPerpleActivity"
            android:screenOrientation="portrait">
        </activity>
        <!--群组-->
        <activity
            android:name=".activity.TeamCheatCreateActvitiy"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.TeamCheatInfoActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.TeamNameSetActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.TeamCheatListActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.AllTagActvitiy"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.TeamAnnouncementEditActivity"
            android:screenOrientation="portrait">
        </activity>
        <activity
            android:name=".activity.TeamCheatRemoveMemberActivity"
            android:screenOrientation="portrait">
        </activity>
    </application>

</manifest>

2:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\AboutActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 关于微信
 */
public class AboutActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_about);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("关于微信");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

3:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\AccountAndSafeSetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 账号与安全
 */
public class AccountAndSafeSetActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_account_and_safe_set);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("账号与安全");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

4:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\AddFriendActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.factory.ThreadPoolFactory;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.CustomDialog;
import com.netease.nimlib.sdk.uinfo.constant.GenderEnum;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import cn.bingoogolapple.qrcode.zxing.QRCodeEncoder;

/**
 * @创建者 CSDN_LQR
 * @描述 添加朋友界面
 */
public class AddFriendActivity extends BaseActivity {

    private Intent mIntent;

    private NimUserInfo mNimUserInfo;
    private View mQRCodeCardView;
    private CustomDialog mQRCodeCardDialog;
    private ImageView mIvHeaderQRCodeCard;
    private TextView mTvNameQRCodeCard;
    private ImageView mIvGenderQRCodeCard;
    private ImageView mIvCardQRCodeCard;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @OnClick({R.id.etContent, R.id.ivQRCordCard})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.etContent:
                mIntent = new Intent(this, SearchUserActivity.class);
                mIntent.putExtra(SearchUserActivity.SEARCH_TYPE, SearchUserActivity.SEARCH_USER_REMOTE);
                startActivity(mIntent);
                break;
            case R.id.ivQRCordCard:
                if (mQRCodeCardView == null) {
                    mQRCodeCardView = View.inflate(AddFriendActivity.this, R.layout.include_qrcode_card, null);
                    mQRCodeCardView.setBackgroundResource(R.drawable.shape_corner_rect_solid_white);
                    mIvHeaderQRCodeCard = (ImageView) mQRCodeCardView.findViewById(R.id.ivHeader);
                    mTvNameQRCodeCard = (TextView) mQRCodeCardView.findViewById(R.id.tvName);
                    mIvGenderQRCodeCard = (ImageView) mQRCodeCardView.findViewById(R.id.ivGender);
                    mIvCardQRCodeCard = (ImageView) mQRCodeCardView.findViewById(R.id.ivCard);
                    mQRCodeCardDialog = new CustomDialog(AddFriendActivity.this, 300, 400, mQRCodeCardView, R.style.dialog);
                }

                String avatar = mNimUserInfo.getAvatar();
                if (TextUtils.isEmpty(avatar)) {
                    mIvHeaderQRCodeCard.setImageResource(R.mipmap.default_header);
                } else {
                    ImageLoaderManager.LoadNetImage(avatar, mIvHeaderQRCodeCard);
                }
                mTvNameQRCodeCard.setText(mNimUserInfo.getName());
                if (mNimUserInfo.getGenderEnum() == GenderEnum.FEMALE) {
                    mIvGenderQRCodeCard.setImageResource(R.mipmap.ic_gender_female);
                } else if (mNimUserInfo.getGenderEnum() == GenderEnum.MALE) {
                    mIvGenderQRCodeCard.setImageResource(R.mipmap.ic_gender_male);
                } else {
                    mIvGenderQRCodeCard.setVisibility(View.GONE);
                }

                Bitmap bitmap = ((BitmapDrawable) mIvHeaderQRCodeCard.getDrawable()).getBitmap();
                showQRCordCard(bitmap);

//                ThreadPoolFactory.getNormalPool().execute(new Runnable() {
//                    @Override
//                    public void run() {
//                        OkHttpUtils.get().url(mNimUserInfo.getAvatar()).build().execute(new BitmapCallback() {
//                            @Override
//                            public void onError(Call call, Exception e, int id) {
//                                Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.default_header);
//                                showQRCordCard(bitmap);
//                            }
//
//                            @Override
//                            public void onResponse(Bitmap bitmap, int id) {
//                                showQRCordCard(bitmap);
//                            }
//                        });
//
//                    }
//                });

                mQRCodeCardDialog.show();
                break;
        }
    }

    @Override
    public void init() {
        mNimUserInfo = NimUserInfoSDK.getUser(UserCache.getAccount());
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_add_friend);
        ButterKnife.inject(this);

        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("添加朋友");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void showQRCordCard(final Bitmap bitmap) {
        ThreadPoolFactory.getNormalPool().execute(new Runnable() {
            @Override
            public void run() {
//                final Bitmap codeWithLogo5 = QRCodeEncoder.syncEncodeQRCode(AppConst.QRCodeCommend.ACCOUNT + mNimUserInfo.getAccount(), UIUtils.dip2Px(200), UIUtils.getColor(R.color.transparent), UIUtils.getColor(R.color.black0), bitmap);
                final Bitmap codeWithLogo5 = QRCodeEncoder.syncEncodeQRCode(AppConst.QRCodeCommend.ACCOUNT + mNimUserInfo.getAccount(), UIUtils.dip2Px(200));
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mIvCardQRCodeCard.setImageBitmap(codeWithLogo5);
                    }
                });
            }
        });

    }
}

5:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\AliasActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;

import com.lqr.wechat.R;
import com.lqr.wechat.model.Contact;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.friend.constant.FriendFieldEnum;

import java.util.HashMap;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 修改备注信息
 */
public class AliasActivity extends BaseActivity {

    private String alias;
    private Contact mContact;

    public static final int REQ_CHANGE_ALIAS = 100;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;
    @InjectView(R.id.etAlias)
    EditText mEtAlias;
    @InjectView(R.id.ibClearAlias)
    ImageButton mIbClearAlias;
    @InjectView(R.id.etTag)
    EditText mEtTag;
    @InjectView(R.id.ibClearTag)
    ImageButton mIbClearTag;
    @InjectView(R.id.etPhone)
    EditText mEtPhone;
    @InjectView(R.id.ibClearPhone)
    ImageButton mIbClearPhone;
    @InjectView(R.id.etDesc)
    EditText mEtDesc;
    @InjectView(R.id.ibClearDesc)
    ImageButton mIbClearDesc;
    @InjectView(R.id.etPicture)
    EditText mEtPicture;
    @InjectView(R.id.ibClearPicture)
    ImageButton mIbClearPicture;

    @OnClick({R.id.btnOk})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                saveAliasChange();
                break;
        }
    }

    @Override
    public void init() {
        mContact = (Contact) getIntent().getSerializableExtra("contact");
        if (mContact == null) {
            interrupt();
            return;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_alias);
        ButterKnife.inject(this);
        initToolbar();

        String alias = mContact.getFriend().getAlias();
        if (!TextUtils.isEmpty(alias)) {
            mEtAlias.setText(alias);
            mEtAlias.setSelection(alias.length());
        }
    }

    @Override
    public void initData() {
        alias = mContact.getFriend().getAlias();
    }

    @Override
    public void initListener() {
        mEtAlias.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    mIbClearAlias.setVisibility(View.VISIBLE);
                } else {
                    mIbClearAlias.setVisibility(View.GONE);
                }
            }
        });
        mIbClearAlias.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mEtAlias.setText("");
            }
        });
    }

    @Override
    public void onBackPressed() {
        if (!alias.equals(mEtAlias.getText().toString().trim())) {
            showMaterialDialog("", "保存本次编辑?", "保存", "不保存", new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    saveAliasChange();
                    hideMaterialDialog();
                }
            }, new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    hideMaterialDialog();
                }
            });
            return;
        }
        super.onBackPressed();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("备注信息");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mBtnOk.setVisibility(View.VISIBLE);
    }

    private void saveAliasChange() {
        String alias = mEtAlias.getText().toString().trim();
        showWaitingDialog("请稍等");
        Map<FriendFieldEnum, Object> map = new HashMap<>(1);
        map.put(FriendFieldEnum.ALIAS, alias);
        NimFriendSDK.updateFriendFields(mContact.getAccount(), map, new RequestCallback<Void>() {
            @Override
            public void onSuccess(Void param) {
                UIUtils.showToast("修改备注信息成功");
                hideWaitingDialog();
                setResult(RESULT_OK);
                finish();
            }

            @Override
            public void onFailed(int code) {
                UIUtils.showToast("修改备注信息失败" + code);
                hideWaitingDialog();
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
                hideWaitingDialog();
            }
        });
    }
}

6:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\AllTagActvitiy.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.UIUtils;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 所有标签界面
 */
public class AllTagActvitiy extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_all_tag);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_one_text, menu);
        menu.getItem(0).setTitle("新建");
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemOne:
                UIUtils.showToast("新建");
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("所有标签");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

7:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\BaseActivity.java
package com.lqr.wechat.activity;

import android.app.Dialog;
import android.os.Build;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;

import com.lqr.wechat.App;
import com.lqr.wechat.R;
import com.lqr.wechat.view.CustomDialog;

import java.lang.reflect.Field;

import me.drakeet.materialdialog.MaterialDialog;


/**
 * @创建者 CSDN_LQR
 * @描述 AppCompatActivity的基类
 */
public class BaseActivity extends AppCompatActivity {

    private CustomDialog mDialogWaiting;
    private MaterialDialog mMaterialDialog;
    private boolean interrupt = false;//onCreate是否中断

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);

        init();
        if (interrupt) {
            finish();
            return;
        }
        initView();
        initData();
        initListener();
        App.activities.add(this);
    }

    /**
     * 中断onCreate
     */
    public void interrupt() {
        this.interrupt = true;
    }

    /**
     * 设置沉浸式状态栏
     *
     * @param linear_bar 自定义的状态栏
     */
    protected void setStatusBar(final ViewGroup linear_bar) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            //透明状态栏
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            //透明导航栏
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
            final int statusHeight = getStatusBarHeight();
            linear_bar.post(new Runnable() {
                @Override
                public void run() {
                    int titleHeight = linear_bar.getHeight();
                    android.widget.LinearLayout.LayoutParams params = (android.widget.LinearLayout.LayoutParams) linear_bar.getLayoutParams();
                    params.height = statusHeight + titleHeight;
                    linear_bar.setLayoutParams(params);
                }
            });
        }
    }

    /**
     * 获取状态栏的高度
     *
     * @return
     */
    public int getStatusBarHeight() {
        try {
            Class<?> c = Class.forName("com.android.internal.R$dimen");
            Object obj = c.newInstance();
            Field field = c.getField("status_bar_height");
            int x = Integer.parseInt(field.get(obj).toString());
            return getResources().getDimensionPixelSize(x);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    public void init() {
    }

    public void initView() {
    }

    public void initData() {
    }

    public void initListener() {
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        App.activities.remove(this);
    }

    /**
     * 显示等待提示框
     */
    public Dialog showWaitingDialog(String tip) {
        hideWaitingDialog();
        View view = View.inflate(this, R.layout.dialog_waiting, null);
        if (!TextUtils.isEmpty(tip))
            ((TextView) view.findViewById(R.id.tvTip)).setText(tip);
        mDialogWaiting = new CustomDialog(this, view, R.style.dialog);
        mDialogWaiting.show();
        mDialogWaiting.setCancelable(false);
        return mDialogWaiting;
    }

    /**
     * 隐藏等待提示框
     */
    public void hideWaitingDialog() {
        if (mDialogWaiting != null) {
            mDialogWaiting.dismiss();
            mDialogWaiting = null;
        }
    }

    /**
     * 显示MaterialDialog
     */
    public MaterialDialog showMaterialDialog(String tip, String message, String positiveText, String negativeText, View.OnClickListener positiveButtonClickListener, View.OnClickListener negativeButtonClickListener) {
        hideMaterialDialog();
        mMaterialDialog = new MaterialDialog(this);
        if (!TextUtils.isEmpty(tip)) {
            mMaterialDialog.setTitle(tip);
        }
        if (!TextUtils.isEmpty(message)) {
            mMaterialDialog.setMessage(message);
        }
        if (!TextUtils.isEmpty(positiveText)) {
            mMaterialDialog.setPositiveButton(positiveText, positiveButtonClickListener);
        }
        if (!TextUtils.isEmpty(negativeText)) {
            mMaterialDialog.setNegativeButton(negativeText, negativeButtonClickListener);
        }
        mMaterialDialog.show();
        return mMaterialDialog;
    }

    /**
     * 隐藏MaterialDialog
     */
    public void hideMaterialDialog() {
        if (mMaterialDialog != null) {
            mMaterialDialog.dismiss();
            mMaterialDialog = null;
        }
    }

}

8:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\CardPaketActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 卡包
 */
public class CardPaketActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @OnClick({R.id.cvVipCard, R.id.cvFriendsCoupon, R.id.cvMyCoupon})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.cvVipCard:
                startActivity(new Intent(this, VipCardActivity.class));
                break;
            case R.id.cvFriendsCoupon:
                startActivity(new Intent(this, FriendsCouponActivity.class));
                break;
            case R.id.cvMyCoupon:
                startActivity(new Intent(this, MyCouponActivity.class));
                break;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_card_packet);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_one_text, menu);
        menu.getItem(0).setTitle("消息通知");
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemOne:
                startActivity(new Intent(this, MsgNotificationActivity.class));
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("卡包");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

9:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\ChangeNameActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.uinfo.constant.UserInfoFieldEnum;

import java.util.HashMap;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 更改名字
 */
public class ChangeNameActivity extends BaseActivity {

    private String mName;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;
    @InjectView(R.id.etName)
    EditText mEtName;

    @OnClick({R.id.btnOk})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                String name = mEtName.getText().toString();
                if (TextUtils.isEmpty(name.trim())) {
                    showMaterialDialog("提示", "没有输入昵称，请重新填写", "确定", "", new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            hideMaterialDialog();
                        }
                    }, null);
                } else {
                    showWaitingDialog("请稍等");
                    Map<UserInfoFieldEnum, Object> fields = new HashMap<>(1);
                    fields.put(UserInfoFieldEnum.Name, name);
                    NimUserInfoSDK.updateUserInfo(fields, new RequestCallbackWrapper<Void>() {
                        @Override
                        public void onResult(int code, Void result, Throwable exception) {
                            hideWaitingDialog();
                            finish();
                        }
                    });
                }
                break;
        }
    }

    @Override
    public void init() {
        mName = getIntent().getStringExtra("name");
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_change_name);
        ButterKnife.inject(this);
        initToolbar();
        mEtName.setText(mName);
        mEtName.setSelection(mName.length());
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("更改名字");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mBtnOk.setVisibility(View.VISIBLE);
    }

}

10:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\ChangeSignatureActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.uinfo.constant.UserInfoFieldEnum;

import java.util.HashMap;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 更改个性签名
 */
public class ChangeSignatureActivity extends BaseActivity {

    private String mSignature;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;
    @InjectView(R.id.etName)
    EditText mEtName;
    @InjectView(R.id.tvCount)
    TextView mTvCount;

    @OnClick({R.id.btnOk})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                String name = mEtName.getText().toString();
                showWaitingDialog("请稍等");
                Map<UserInfoFieldEnum, Object> fields = new HashMap<>(1);
                fields.put(UserInfoFieldEnum.SIGNATURE, name);
                NimUserInfoSDK.updateUserInfo(fields, new RequestCallbackWrapper<Void>() {
                    @Override
                    public void onResult(int code, Void result, Throwable exception) {
                        hideWaitingDialog();
                        finish();
                    }
                });
                break;
        }
    }

    @Override
    public void init() {
        mSignature = getIntent().getStringExtra("signature");
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_change_signature);
        ButterKnife.inject(this);
        initToolbar();
        mEtName.setText(mSignature);
        mEtName.setSelection(mSignature.length());
        mTvCount.setText(String.valueOf(30 - mEtName.getText().toString().length()));
    }

    @Override
    public void initListener() {
        mEtName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                mTvCount.setText(String.valueOf(30 - mEtName.getText().toString().length()));
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("更改名字");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mBtnOk.setVisibility(View.VISIBLE);
    }

}

11:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\CheatSetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 聊天设置
 */
public class CheatSetActivity extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_cheat_set);
        ButterKnife.inject(this);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("聊天");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

12:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\CommonSetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 通用
 */

public class CommonSetActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_common_set);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("通用");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

13:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\DontDistorbSetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 勿扰模式
 */
public class DontDistorbSetActivity extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_dont_distorb_set);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("勿扰模式");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

14:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\FilePreviewActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.FileIconUtils;
import com.lqr.wechat.utils.FileOpenUtils;
import com.lqr.wechat.utils.FileUtils;
import com.lqr.wechat.utils.MimeTypeUtils;
import com.netease.nimlib.sdk.msg.attachment.FileAttachment;
import com.netease.nimlib.sdk.msg.model.IMMessage;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.FileCallBack;

import java.io.File;

import butterknife.ButterKnife;
import butterknife.InjectView;
import okhttp3.Call;
import okhttp3.Request;

/**
 * @创建者 CSDN_LQR
 * @描述 文件预览
 */
public class FilePreviewActivity extends BaseActivity {

    private Intent mIntent;
    private IMMessage mMessage;
    private FileAttachment mFa;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.ivPic)
    ImageView mIvPic;
    @InjectView(R.id.tvName)
    TextView mTvName;
    @InjectView(R.id.pbFile)
    ProgressBar mPbFile;
    @InjectView(R.id.btnOpen)
    Button mBtnOpen;//其他应用打开 下载

    @Override
    public void init() {
        mIntent = getIntent();
        mMessage = (IMMessage) mIntent.getSerializableExtra("message");
        if (mMessage == null) {
            interrupt();
            return;
        }
        mFa = (FileAttachment) mMessage.getAttachment();
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_file_preview);
        ButterKnife.inject(this);
        initToolbar();

        setFileInfo();
    }

    @Override
    public void initData() {
        //判断文件是否已经下载到本地
//        if (TextUtils.isEmpty(mFa.getPath())) {
//            downloadFile();
//        }
    }

    @Override
    public void initListener() {
        mBtnOpen.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mBtnOpen.getText().equals("下载")) {
                    downloadFile();
                } else {
                    //打开文件
                    FileOpenUtils.openFile(FilePreviewActivity.this, mFa.getPath(), MimeTypeUtils.getMimeType(mFa.getDisplayName()));
                }
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("文件预览");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void setFileInfo() {
        mIvPic.setImageResource(FileIconUtils.getFileIconResId(mFa.getExtension()));
        mTvName.setText(mFa.getDisplayName());
        mPbFile.setVisibility(View.GONE);
        mBtnOpen.setVisibility(View.VISIBLE);
        if (TextUtils.isEmpty(mFa.getPath())) {
            mBtnOpen.setText("下载");
        } else {
            mBtnOpen.setText("其他应用打开");
        }
    }

    //下载文件
    private void downloadFile() {
        OkHttpUtils.get().url(mFa.getUrl()).build().execute(new FileCallBack(FileUtils.getDirFromPath(mFa.getPathForSave()), FileUtils.getFileNameFromPath(mFa.getPathForSave())) {


            @Override
            public void onError(Call call, Exception e, int id) {
                mIvPic.setImageResource(R.mipmap.default_img_failed);
                mTvName.setText("文件已过期或已被清理");
                mPbFile.setVisibility(View.GONE);
                mBtnOpen.setVisibility(View.GONE);
            }

            @Override
            public void onResponse(File response, int id) {
                setFileInfo();
            }

            @Override
            public void inProgress(float progress, long total, int id) {
                super.inProgress(progress, total, id);
                mPbFile.setMax((int) total);
                mPbFile.setProgress((int) (progress * 100));
            }

            @Override
            public void onBefore(Request request, int id) {
                super.onBefore(request, id);
                mPbFile.setVisibility(View.VISIBLE);
                mBtnOpen.setVisibility(View.GONE);
            }
        });
    }
}

15:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\FileWallActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.graphics.Bitmap;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimHistorySDK;
import com.lqr.wechat.nimsdk.NimMessageSDK;
import com.lqr.wechat.utils.Bimp;
import com.lqr.wechat.utils.LogUtils;
import com.netease.nimlib.sdk.AbortableFuture;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.msg.MessageBuilder;
import com.netease.nimlib.sdk.msg.attachment.FileAttachment;
import com.netease.nimlib.sdk.msg.constant.MsgTypeEnum;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.IMMessage;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 文件墙界面(只查询本地记录)
 */
public class FileWallActivity extends BaseActivity {

    public static final int CHECK_RESULT_CODE = 100;

    private boolean mIsEditMode = false;//标记是否是编辑模式
    private IMMessage mCurrentMsg;
    private String mAccount;
    private SessionTypeEnum mSessionType;

    private List<IMMessage> mData = new ArrayList<>();
    private LQRAdapterForRecyclerView<IMMessage> mAdapter;

    private List<IMMessage> mCheckedData = new ArrayList<>();

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.cvFile)
    LQRRecyclerView mCvFile;

    @InjectView(R.id.llBottom)
    LinearLayout mLlBottom;
    @InjectView(R.id.rlShare)
    RelativeLayout mRlShare;
    @InjectView(R.id.rlCollect)
    RelativeLayout mRlCollect;
    @InjectView(R.id.rlDel)
    RelativeLayout mRlDel;

    @InjectView(R.id.btnShare)
    Button mBtnShare;
    @InjectView(R.id.btnCollect)
    Button mBtnCollect;
    @InjectView(R.id.btnDel)
    Button mBtnDel;


    @Override
    public void init() {
        Intent intent = getIntent();
        mAccount = intent.getStringExtra("account");
        mCurrentMsg = (IMMessage) intent.getSerializableExtra("currentMsg");
        mSessionType = (SessionTypeEnum) intent.getSerializableExtra("sessionType");
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_file_wall);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public void initData() {
        setAdapter();
        loadLocalImageMessage();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_one_text, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                break;
            case R.id.itemOne:
                if (mIsEditMode) {//取消
                    //退出编辑模式
                    quitEditMode();
                    item.setTitle("选择");
                } else {//选择
                    //进入编辑模式
                    enterEditMode();
                    item.setTitle("取消");
                }
                updateToolbarTitleAndBottom();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void enterEditMode() {
        mIsEditMode = true;
        mCheckedData.clear();
        setAdapter();
        mLlBottom.setVisibility(View.VISIBLE);
    }

    private void quitEditMode() {
        mIsEditMode = false;
        setAdapter();
        mLlBottom.setVisibility(View.GONE);
        mCvFile.setAdapter(mAdapter);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        getSupportActionBar().setTitle("聊天文件");
    }

    private void loadLocalImageMessage() {
        IMMessage anchor = MessageBuilder.createEmptyMessage(mAccount, mSessionType, 0);
        //查询本地100条图片信息
        NimHistorySDK.queryMessageListByType(MsgTypeEnum.image, anchor, Integer.MAX_VALUE).setCallback(new RequestCallback<List<IMMessage>>() {
            @Override
            public void onSuccess(List<IMMessage> result) {
                Collections.reverse(result);
                mAdapter.addMoreData(result);

                //滚动到上个页面正在查看的文件位置
                if (mCurrentMsg != null)
                    for (int i = 0; i < result.size(); i++) {
                        if (result.get(i).getUuid().equals(mCurrentMsg.getUuid())) {
                            mCvFile.moveToPosition(i);
                            break;
                        }
                    }
            }

            @Override
            public void onFailed(int code) {
                LogUtils.e("失败，code = " + code);
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
            }
        });
    }

    private void setAdapter() {
        if (mAdapter == null) {
            mAdapter = new LQRAdapterForRecyclerView<IMMessage>(this, R.layout.item_file_wall, mData) {
                @Override
                public void convert(LQRViewHolderForRecyclerView helper, final IMMessage item, int position) {

                    setImage(helper, item, position);

                    helper.setViewVisibility(R.id.cb, mIsEditMode ? View.VISIBLE : View.GONE)
                            .setViewVisibility(R.id.vMask, mIsEditMode ? View.VISIBLE : View.GONE)
                            .getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent intent = new Intent(FileWallActivity.this, ImageWatchActivity.class);
                            intent.putExtra("account", mAccount);
                            intent.putExtra("sessionType", mSessionType);
                            intent.putExtra("message", item);
                            intent.putExtra("isEditMode", mIsEditMode);
                            startActivityForResult(intent, CHECK_RESULT_CODE);
                        }
                    });

                    ((CheckBox) helper.getView(R.id.cb)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                        @Override
                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                            if (isChecked) {
                                mCheckedData.add(item);
                            } else {
                                mCheckedData.remove(item);
                            }
                            updateToolbarTitleAndBottom();
                        }
                    });
                }
            };
            mCvFile.setAdapter(mAdapter);
        } else {
            mAdapter.notifyDataSetChanged();
        }
    }

    private void updateToolbarTitleAndBottom() {
        if (mIsEditMode) {
            mToolbar.setTitle("已经选择" + mCheckedData.size() + "个文件");
            mBtnShare.setEnabled(mCheckedData.size() > 0 ? true : false);
            mBtnCollect.setEnabled(mCheckedData.size() > 0 ? true : false);
            mBtnDel.setEnabled(mCheckedData.size() > 0 ? true : false);
        } else
            mToolbar.setTitle("聊天文件");

    }

    private void setImage(LQRViewHolderForRecyclerView helper, IMMessage item, int position) {
        final ImageView iv = helper.getView(R.id.ivShowPic);
        final FileAttachment fa = (FileAttachment) mAdapter.getItem(position).getAttachment();

        //判断本地是否有缩略图
        if (fa.getThumbPath() == null) {
            AbortableFuture abortableFuture = NimMessageSDK.downloadAttachment(item, true);
            abortableFuture.setCallback(new RequestCallback() {
                @Override
                public void onSuccess(Object param) {
                    Bitmap bitmap = Bimp.getLoacalBitmap(fa.getThumbPath());
                    if (bitmap != null) {
                        iv.setImageBitmap(bitmap);
                    }
                }

                @Override
                public void onFailed(int code) {

                }

                @Override
                public void onException(Throwable exception) {

                }
            });
        } else {
            Bitmap bitmap = Bimp.getLoacalBitmap(fa.getThumbPath());
            if (bitmap != null) {
                iv.setImageBitmap(bitmap);
            }
        }
    }
}

16:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\FriendCirclePrivacySetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 朋友圈权限设置
 */
public class FriendCirclePrivacySetActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_friends_circle_privacy_set);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("隐私");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

17:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\FriendsCouponActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;

import com.lqr.wechat.R;
import com.lqr.wechat.view.CustomDialog;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 朋友的优惠券-卡包
 */
public class FriendsCouponActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    private CustomDialog mDialog;

    @Override
    public void initView() {
        setContentView(R.layout.activity_friends_coupon);
        ButterKnife.inject(this);
        initToolbar();
        showTipDialog();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("朋友的优惠券");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void showTipDialog() {
        View view = View.inflate(this, R.layout.dialog_tip_friends_coupon, null);
        mDialog = new CustomDialog(this, view, R.style.dialog);
        mDialog.setCancelable(false);
        mDialog.show();
        view.findViewById(R.id.tvOk).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mDialog.dismiss();
                mDialog = null;
            }
        });
    }
}

18:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\ImageWatchActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;

import com.bm.library.PhotoView;
import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimHistorySDK;
import com.lqr.wechat.utils.Bimp;
import com.lqr.wechat.utils.FileUtils;
import com.lqr.wechat.utils.LogUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.ResponseCode;
import com.netease.nimlib.sdk.msg.MessageBuilder;
import com.netease.nimlib.sdk.msg.attachment.ImageAttachment;
import com.netease.nimlib.sdk.msg.constant.MsgTypeEnum;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.IMMessage;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.FileCallBack;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import okhttp3.Call;

/**
 * @创建者 CSDN_LQR
 * @描述 聊天图片查看界面(只查询本地记录)
 */
public class ImageWatchActivity extends BaseActivity {

    private String mAccount;
    private SessionTypeEnum mSessionType;
    private IMMessage mOriMessage;
    private IMMessage mAnchor;
    private List<IMMessage> mData = new ArrayList<>();
    private PhotoViewPagerAdapter mAdapter;

    private boolean isFirstLoad = true;
    private int mCurrentItem;
    private boolean mIsEditMode;//标记是否是从文件墙界面的编辑模式下调用的

    @InjectView(R.id.root)
    RelativeLayout mRlRoot;
    @InjectView(R.id.btnWatchOrigImage)
    Button mBtnWatchOrigImage;
    @InjectView(R.id.vpImage)
    ViewPager mVpImage;
    @InjectView(R.id.pbLoading)
    ProgressBar mPbLoading;
    @InjectView(R.id.ivShowPic)
    ImageView mIvShowPic;


    @OnClick({R.id.ibWall, R.id.btnWatchOrigImage})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnWatchOrigImage:
                loadOrignImage();
                break;
            case R.id.ibWall:
                //跳转到图片墙界面
                Intent intent = new Intent(this, FileWallActivity.class);
                intent.putExtra("account", mAccount);
                intent.putExtra("sessionType", mSessionType);
                intent.putExtra("currentMsg", mData.get(mVpImage.getCurrentItem()));
                startActivity(intent);
                break;
        }
    }

    @Override
    public void init() {
        Intent intent = getIntent();
        mAccount = intent.getStringExtra("account");
        mIsEditMode = intent.getBooleanExtra("isEditMode", false);
        mSessionType = (SessionTypeEnum) intent.getSerializableExtra("sessionType");
        mOriMessage = (IMMessage) intent.getSerializableExtra("message");
        mAnchor = MessageBuilder.createEmptyMessage(mAccount, mSessionType, 0);
        loadPreImage();
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_image_watch);
        ButterKnife.inject(this);

        mAdapter = new PhotoViewPagerAdapter();
        mVpImage.setAdapter(mAdapter);
    }

    @Override
    public void initListener() {
        mVpImage.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                if (position == 0) {
                    loadPreImage();
                }
                showBtnWatchOrignImage();
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
    }

    /**
     * 显示底部“查看原图”按钮
     */
    private void showBtnWatchOrignImage() {
        //如果当前图是原图则隐藏底部按钮，否则显示
        int currentItem = mVpImage.getCurrentItem();
        ImageAttachment ia = (ImageAttachment) mData.get(currentItem).getAttachment();
        if (!TextUtils.isEmpty(ia.getPath())) {
            showWatchOrignBtn(false);
        } else {
            showWatchOrignBtn(true);
        }
    }

    /**
     * 每次从本地查询10张图片
     */
    private void loadPreImage() {

        LogUtils.sf("loadPreImage");

        NimHistorySDK.queryMessageListByType(MsgTypeEnum.image, mAnchor, 10).setCallback(new RequestCallbackWrapper<List<IMMessage>>() {
            @Override
            public void onResult(int code, List<IMMessage> result, Throwable exception) {
                if (code != ResponseCode.RES_SUCCESS || exception != null || result == null || result.size() == 0) {
                    return;
                }

                Collections.reverse(result);

                //0、有查询数据就记录当前第一条消息
                mAnchor = result.get(0);

                //1、加载历史消息，筛选出图片消息
                List<IMMessage> tmpList = new ArrayList<>();
                for (int i = 0; i < result.size(); i++) {
                    IMMessage message = result.get(i);
                    if (message.getMsgType() == MsgTypeEnum.image) {
                        tmpList.add(message);
                    }
                }

                //2、如果在当前加载出来的消息中没有图片消息，则递归拉取
                if (tmpList.isEmpty()) {
                    loadPreImage();
                } else {
                    mData.addAll(0, tmpList);

                    //3、如果是第一次加载，还需要显示对应图片的位置
                    if (isFirstLoad)
                        for (int i = 0; i < result.size(); i++) {
                            IMMessage message = result.get(i);
                            if (message.isTheSame(mOriMessage)) {
                                mCurrentItem = i;
                                LogUtils.sf("第一次加载，还需要显示对应图片的位置:" + mCurrentItem);
                                break;
                            }
                        }
                    mAdapter.notifyDataSetChanged();
                    UIUtils.postTaskSafely(new Runnable() {
                        @Override
                        public void run() {
                            if (isFirstLoad) {
                                mVpImage.setCurrentItem(mCurrentItem, false);
                            } else {
                                mVpImage.setCurrentItem(mCurrentItem + mData.size(), false);
                            }
                            showBtnWatchOrignImage();
                        }
                    });
                    isFirstLoad = false;

                    //如果只有一张的话，则继续查询历史图片消息
                    if (mData.size() == 1) {
                        loadPreImage();
                    }
                }
            }
        });
    }

    class PhotoViewPagerAdapter extends PagerAdapter {

        @Override
        public int getCount() {
            return mData.size();
        }

        @Override
        public boolean isViewFromObject(View view, Object object) {
            return view == object;
        }

        @Override
        public Object instantiateItem(ViewGroup container, int position) {
            PhotoView pv = new PhotoView(ImageWatchActivity.this);
            pv.enable();//启动缩放
            pv.setScaleType(ImageView.ScaleType.CENTER_INSIDE);

            ImageAttachment ia = (ImageAttachment) mData.get(position).getAttachment();
            //本地没有原图
            if (TextUtils.isEmpty(ia.getPath())) {
                //先设置缩略图
                if (!TextUtils.isEmpty(ia.getThumbPath())) {
                    pv.setImageBitmap(Bimp.getLoacalBitmap(ia.getThumbPath()));
                }
                //再加载原图
//                ImageLoaderManager.LoadNetImage(ia.getUrl(), pv);
            } else {
                pv.setImageBitmap(Bimp.getLoacalBitmap(ia.getPath()));
            }

            container.addView(pv);
            return pv;
        }

        @Override
        public void destroyItem(ViewGroup container, int position, Object object) {
            container.removeView((View) object);
        }

        private int mChildCount = 0;

        @Override
        public void notifyDataSetChanged() {
            mChildCount = getCount();
            super.notifyDataSetChanged();
        }

        @Override
        public int getItemPosition(Object object) {
            if (mChildCount > 0) {
                mChildCount--;
                return POSITION_NONE;
            }
            return super.getItemPosition(object);
        }
    }

    /**
     * 设置是否显示底部的“查看原图”按钮
     */
    public void showWatchOrignBtn(boolean show) {
        mBtnWatchOrigImage.setVisibility(show ? View.VISIBLE : View.GONE);
    }

    /**
     * 加载原图
     */
    public void loadOrignImage() {
        mPbLoading.setVisibility(View.VISIBLE);
        mBtnWatchOrigImage.setEnabled(true);

        int currentItem = mVpImage.getCurrentItem();
        ImageAttachment ia = (ImageAttachment) mData.get(currentItem).getAttachment();

        //下载原图
        OkHttpUtils.get().url(ia.getUrl()).build().execute(new FileCallBack(FileUtils.getDirFromPath(ia.getPathForSave()), FileUtils.getFileNameFromPath(ia.getPathForSave())) {
            @Override
            public void onError(Call call, Exception e, int i) {
                mBtnWatchOrigImage.setEnabled(true);
                showWatchOrignBtn(true);
//                    mBtnWatchOrigImage.setVisibility(View.GONE);
                UIUtils.showToast("加载原图失败");
            }

            @Override
            public void onResponse(File file, int i) {
                mBtnWatchOrigImage.setEnabled(true);
                showWatchOrignBtn(false);
                mPbLoading.setVisibility(View.GONE);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mAdapter.notifyDataSetChanged();
                    }
                });
            }
        });
    }

}

19:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\LocationActivity.java
package com.lqr.wechat.activity;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 位置
 */
public class LocationActivity extends BaseActivity {

    private List<String> mData = new ArrayList<>();

    @InjectView(R.id.cvLocation)
    LQRRecyclerView mCvLocation;
    private LQRAdapterForRecyclerView<String> mAdapter;

    @Override
    public void initView() {
        setContentView(R.layout.activity_location);
        ButterKnife.inject(this);
    }

    @Override
    public void initData() {
        for (int i = 0; i < 100; i++) {
            mData.add("item " + i);
        }
        setAdapter();
    }

    private void setAdapter() {
        mAdapter = new LQRAdapterForRecyclerView<String>(this, R.layout.item_contact_cv, mData) {
            @Override
            public void convert(LQRViewHolderForRecyclerView helper, String item, int position) {
                helper.setText(R.id.tvName, item);
            }
        };
        mCvLocation.setAdapter(mAdapter);
    }
}

20:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\LoginActivity.java
package com.lqr.wechat.activity;


import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.lqr.wechat.R;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimAccountSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.AbortableFuture;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.auth.LoginInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import me.drakeet.materialdialog.MaterialDialog;

/**
 * @创建者 CSDN_LQR
 * @描述 登录界面
 */
public class LoginActivity extends BaseActivity {

    private String mUsername;
    private String mPassword;
    private String mToken;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @InjectView(R.id.etPhone)
    EditText mEtPhone;
    @InjectView(R.id.etPwd)
    EditText mEtPwd;
    @InjectView(R.id.vLinePhone)
    View mVLinePhone;
    @InjectView(R.id.vLinePwd)
    View mVLinePwd;

    @InjectView(R.id.btnLogin)
    Button mBtnLogin;
    private AbortableFuture<LoginInfo> mLoginRequest;

    @OnClick(R.id.tvOtherLogin)
    public void otherLogin() {
        startActivity(new Intent(this, OtherLoginActivity.class));
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_login);
        ButterKnife.inject(this);
        initToolbar();

        if (!TextUtils.isEmpty(mEtPhone.getText().toString()) && !TextUtils.isEmpty(mEtPwd.getText().toString())) {
            mBtnLogin.setEnabled(true);
        }
    }

    @Override
    public void initListener() {
        /*------------------ 监听编辑框，变换样式 begin ------------------*/
        mEtPhone.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    mVLinePhone.setBackgroundColor(UIUtils.getColor(R.color.green0));
                } else {
                    mVLinePhone.setBackgroundColor(UIUtils.getColor(R.color.line));
                }
            }
        });
        mEtPwd.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    mVLinePwd.setBackgroundColor(UIUtils.getColor(R.color.green0));
                } else {
                    mVLinePwd.setBackgroundColor(UIUtils.getColor(R.color.line));
                }
            }
        });
        mEtPhone.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (!TextUtils.isEmpty(mEtPhone.getText().toString()) && !TextUtils.isEmpty(mEtPwd.getText().toString())) {
                    mBtnLogin.setEnabled(true);
                } else {
                    mBtnLogin.setEnabled(false);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        mEtPwd.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (!TextUtils.isEmpty(mEtPhone.getText().toString()) && !TextUtils.isEmpty(mEtPwd.getText().toString())) {
                    mBtnLogin.setEnabled(true);
                } else {
                    mBtnLogin.setEnabled(false);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        /*------------------ 监听编辑框，变换样式 end ------------------*/

        mBtnLogin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doLogin();
                mBtnLogin.setEnabled(false);
            }
        });
        super.initListener();
    }

    /**
     * 设置ToolBar
     */
    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("使用手机号登录");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    /**
     * 登录
     */
    public void doLogin() {
        showWaitingDialog("正在登录...");
        mUsername = mEtPhone.getText().toString().trim();
        mPassword = mEtPwd.getText().toString().trim();
        //判断非空
        if (TextUtils.isEmpty(mUsername) || TextUtils.isEmpty(mPassword)) {
            UIUtils.showToast("用户名和密码不能为空");
            return;
        }
        //根据密码得到token(根据创建密码的方式，如果注册时使用的密码使用了MD5加密过的，就对密码进行md5加密得到token)
//        mToken = MD5Utils.decode16(mPassword);
        mToken = mPassword;

        //配置登录信息，并开始登录
        mLoginRequest = NimAccountSDK.login(mUsername, mToken, new RequestCallback<LoginInfo>() {
            @Override
            public void onSuccess(LoginInfo param) {
                onLoginDone();

                //保存用户名到内存中
                UserCache.setAccount(mUsername);
                //保存用户信息到本地，方便下次启动APP做自动登录用
                NimAccountSDK.saveUserAccount(mUsername);
                NimAccountSDK.saveUserToken(mToken);
                //更新本地用户资料
                List<String> list = new ArrayList<String>();
                list.add(UserCache.getAccount());
                NimUserInfoSDK.getUserInfosFormServer(list, null);

                //进行主界面
                Intent intent = new Intent(LoginActivity.this, MainActivity.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK|Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent);
                finish();
            }

            @Override
            public void onFailed(int code) {
                onLoginDone();
                if (code == 302 || code == 404) {
                    MaterialDialog materialDialog = showMaterialDialog("", "", "确定", "", new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            hideMaterialDialog();
                        }
                    }, null);
                    TextView tv = new TextView(LoginActivity.this);
                    tv.setText("账号或密码错误，请重新填写。");
                    tv.setTextColor(UIUtils.getColor(R.color.black0));
                    tv.setPadding(0, UIUtils.dip2Px(15), 0, UIUtils.dip2Px(18));
                    materialDialog.setContentView(tv);
//                    UIUtils.showToast("帐号或密码错误");
                } else {
                    UIUtils.showToast("登录失败: " + code);
                }
            }

            @Override
            public void onException(Throwable exception) {
                onLoginDone();
                UIUtils.showToast("无效输入");
            }
        });
    }

    private void onLoginDone() {
        hideWaitingDialog();
        mLoginRequest = null;
        mBtnLogin.setEnabled(true);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            //ToolBar的返回点击事件
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }


}

21:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\MainActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.support.v4.view.ViewPager;
import android.support.v7.widget.Toolbar;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.adapter.MainPagerAdapter;
import com.lqr.wechat.broadcast.AuthBroadcastReceiver;
import com.lqr.wechat.factory.PopupWindowFactory;
import com.lqr.wechat.fragment.BaseFragment;
import com.lqr.wechat.fragment.ContactsFragment;
import com.lqr.wechat.fragment.DiscoveryFragment;
import com.lqr.wechat.fragment.MeFragment;
import com.lqr.wechat.fragment.MessageFragment;
import com.lqr.wechat.nimsdk.NimAccountSDK;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimSystemSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.nimsdk.custom.CustomAttachParser;
import com.lqr.wechat.utils.LogUtils;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.StatusCode;
import com.netease.nimlib.sdk.friend.model.FriendChangedNotify;
import com.netease.nimlib.sdk.msg.MsgService;
import com.netease.nimlib.sdk.msg.constant.SystemMessageType;
import com.netease.nimlib.sdk.msg.model.SystemMessage;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 微信主界面
 */
public class MainActivity extends BaseActivity {

    public static final int REQ_CLEAR_UNREAD = 100;

    private int exit = 0;
    private MessageFragment mMessageFragment;
    private ContactsFragment mContactsFragment;
    private DiscoveryFragment mDiscoveryFragment;
    private MeFragment mMeFragment;
    private List<BaseFragment> mFragments;

    private PopupWindow mPopupWindow;

    private List<SystemMessage> items = new ArrayList<>();//系统消息
    private static final boolean MERGE_ADD_FRIEND_VERIFY = true; // 是否要合并好友申请，同一个用户仅保留最近一条申请内容（默认不合并）
    private Set<String> addFriendVerifyRequestAccounts = new HashSet<>(); // 发送过好友申请的账号（好友申请合并用）

    private AuthBroadcastReceiver mAuthBroadcastReceiver;
    private Observer<StatusCode> mOnlineStatusObserver;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @InjectView(R.id.vpContent)
    ViewPager mVpContent;

    // 底部
    @InjectView(R.id.llButtom)
    LinearLayout mLlBottom;

    @InjectView(R.id.tvMessageNormal)
    TextView mTvMessageNormal;
    @InjectView(R.id.tvMessagePress)
    TextView mTvMessagePress;
    @InjectView(R.id.tvMessageTextNormal)
    TextView mTvMessageTextNormal;
    @InjectView(R.id.tvMessageTextPress)
    TextView mTvMessageTextPress;
    @InjectView(R.id.tvMessageCount)
    public TextView mTvMessageCount;

    @InjectView(R.id.tvContactsNormal)
    TextView mTvContactsNormal;
    @InjectView(R.id.tvContactsPress)
    TextView mTvContactsPress;
    @InjectView(R.id.tvContactsTextNormal)
    TextView mTvContactsTextNormal;
    @InjectView(R.id.tvContactsTextPress)
    TextView mTvContactsTextPress;
    @InjectView(R.id.tvContactCount)
    public TextView mTvContactCount;

    @InjectView(R.id.tvDiscoveryNormal)
    TextView mTvDiscoveryNormal;
    @InjectView(R.id.tvDiscoveryPress)
    TextView mTvDiscoveryPress;
    @InjectView(R.id.tvDiscoveryTextNormal)
    TextView mTvDiscoveryTextNormal;
    @InjectView(R.id.tvDiscoveryTextPress)
    TextView mTvDiscoveryTextPress;
    @InjectView(R.id.tvDiscoveryCount)
    public TextView mTvDiscoveryCount;

    @InjectView(R.id.tvMeNormal)
    TextView mTvMeNormal;
    @InjectView(R.id.tvMePress)
    TextView mTvMePress;
    @InjectView(R.id.tvMeTextNormal)
    TextView mTvMeTextNormal;
    @InjectView(R.id.tvMeTextPress)
    TextView mTvMeTextPress;
    @InjectView(R.id.tvMeCount)
    public TextView mTvMeCount;


    @OnClick({R.id.llMessage, R.id.llContacts, R.id.llDiscovery, R.id.llMe})
    public void click(View view) {
        setTransparency();
        switch (view.getId()) {
            case R.id.llMessage:
                mVpContent.setCurrentItem(0, false);
                mTvMessagePress.getBackground().setAlpha(255);
                mTvMessageTextPress.setTextColor(Color.argb(255, 69, 192, 26));
                break;
            case R.id.llContacts:
                mVpContent.setCurrentItem(1, false);
                mTvContactsPress.getBackground().setAlpha(255);
                mTvContactsTextPress.setTextColor(Color.argb(255, 69, 192, 26));
                break;
            case R.id.llDiscovery:
                mVpContent.setCurrentItem(2, false);
                mTvDiscoveryPress.getBackground().setAlpha(255);
                mTvDiscoveryTextPress.setTextColor(Color.argb(255, 69, 192, 26));
                break;
            case R.id.llMe:
                mVpContent.setCurrentItem(3, false);
                mTvMePress.getBackground().setAlpha(255);
                mTvMeTextPress.setTextColor(Color.argb(255, 69, 192, 26));
                break;
        }
    }

    @Override
    public void init() {
        //注册登录出错广播接收者
        registerBroadcastReceiver();
        //监听在线状态
        observerLineStatus();
        //监听用户信息更新
        observeUserInfoUpdate();
        //监听好友关系的变化
        observeFriendChangedNotify();
        //监听群聊关系的变化
        observeTeamChangedNotify();
        //监听系统消息通知
        observeReceiveSystemMsg();
        // 注册自定义附件解析器到
        NIMClient.getService(MsgService.class).registerCustomAttachmentParser(new CustomAttachParser());
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_main);
        ButterKnife.inject(this);
        initToolbar();

        //默认选中第一个
        setTransparency();
        mTvMessagePress.getBackground().setAlpha(255);
        mTvMessageTextPress.setTextColor(Color.argb(255, 69, 192, 26));

        //设置ViewPager的最大缓存页面
        mVpContent.setOffscreenPageLimit(3);

    }

    @Override
    public void initData() {
        //创建4个界面的Fragment
        mFragments = new ArrayList<>();
        mMessageFragment = new MessageFragment();
        mContactsFragment = new ContactsFragment();
        mDiscoveryFragment = new DiscoveryFragment();
        mMeFragment = new MeFragment();
        mFragments.add(mMessageFragment);
        mFragments.add(mContactsFragment);
        mFragments.add(mDiscoveryFragment);
        mFragments.add(mMeFragment);

        //设置中间内容vp适配器
        mVpContent.setAdapter(new MainPagerAdapter(getSupportFragmentManager(), mFragments));
        mVpContent.setCurrentItem(0);

        //提示通讯录数据更新条目（未读数目）
        updateContactCount();
    }

    @Override
    public void initListener() {
        //设置vp的滑动监听事件，控制底部图标渐变
        mVpContent.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                //根据ViewPager滑动位置更改透明度
                int diaphaneity_one = (int) (255 * positionOffset);
                int diaphaneity_two = (int) (255 * (1 - positionOffset));
                switch (position) {
                    case 0:
                        mTvMessageNormal.getBackground().setAlpha(diaphaneity_one);
                        mTvMessagePress.getBackground().setAlpha(diaphaneity_two);
                        mTvContactsNormal.getBackground().setAlpha(diaphaneity_two);
                        mTvContactsPress.getBackground().setAlpha(diaphaneity_one);
                        mTvMessageTextNormal.setTextColor(Color.argb(diaphaneity_one, 153, 153, 153));
                        mTvMessageTextPress.setTextColor(Color.argb(diaphaneity_two, 69, 192, 26));
                        mTvContactsTextNormal.setTextColor(Color.argb(diaphaneity_two, 153, 153, 153));
                        mTvContactsTextPress.setTextColor(Color.argb(diaphaneity_one, 69, 192, 26));
                        break;
                    case 1:
                        mTvContactsNormal.getBackground().setAlpha(diaphaneity_one);
                        mTvContactsPress.getBackground().setAlpha(diaphaneity_two);
                        mTvDiscoveryNormal.getBackground().setAlpha(diaphaneity_two);
                        mTvDiscoveryPress.getBackground().setAlpha(diaphaneity_one);
                        mTvContactsTextNormal.setTextColor(Color.argb(diaphaneity_one, 153, 153, 153));
                        mTvContactsTextPress.setTextColor(Color.argb(diaphaneity_two, 69, 192, 26));
                        mTvDiscoveryTextNormal.setTextColor(Color.argb(diaphaneity_two, 153, 153, 153));
                        mTvDiscoveryTextPress.setTextColor(Color.argb(diaphaneity_one, 69, 192, 26));
                        break;
                    case 2:
                        mTvDiscoveryNormal.getBackground().setAlpha(diaphaneity_one);
                        mTvDiscoveryPress.getBackground().setAlpha(diaphaneity_two);
                        mTvMeNormal.getBackground().setAlpha(diaphaneity_two);
                        mTvMePress.getBackground().setAlpha(diaphaneity_one);
                        mTvDiscoveryTextNormal.setTextColor(Color.argb(diaphaneity_one, 153, 153, 153));
                        mTvDiscoveryTextPress.setTextColor(Color.argb(diaphaneity_two, 69, 192, 26));
                        mTvMeTextNormal.setTextColor(Color.argb(diaphaneity_two, 153, 153, 153));
                        mTvMeTextPress.setTextColor(Color.argb(diaphaneity_one, 69, 192, 26));
                        break;
                }

            }

            @Override
            public void onPageSelected(int position) {
                //如果是“通讯录”页被选中，则显示快速导航条
                if (position == 1) {
                    mContactsFragment.showQuickIndexBar(true);
                } else {
                    mContactsFragment.showQuickIndexBar(false);
                }

                //根据position刷新对应Fragment的数据
                mFragments.get(position).initData();
            }

            @Override
            public void onPageScrollStateChanged(int state) {
                if (state != ViewPager.SCROLL_STATE_IDLE) {
                    //滚动过程中隐藏快速导航条
                    mContactsFragment.showQuickIndexBar(false);
                } else {
                    mContactsFragment.showQuickIndexBar(true);
                }
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.itemSearch:
                Intent intent = new Intent(this, SearchUserActivity.class);
                intent.putExtra(SearchUserActivity.SEARCH_TYPE, SearchUserActivity.SEARCH_USER_REMOTE);
                startActivity(intent);
                break;
            case R.id.itemMore:
                showMenu();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQ_CLEAR_UNREAD) {
            updateContactCount();
        }
    }

    @Override
    protected void onDestroy() {
        unRegisterBroadcastReceiver();
        super.onDestroy();
    }

    private void initToolbar() {
        //设置ToolBar
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("微信");
        mToolbar.setTitleTextColor(UIUtils.getColor(R.color.white));
    }

    private void showMenu() {
        View menuView = View.inflate(this, R.layout.popup_menu_main, null);
        //发起群聊
        menuView.findViewById(R.id.itemCreateGroupCheat).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, TeamCheatCreateActvitiy.class));
                mPopupWindow.dismiss();
            }
        });
        //添加朋友
        menuView.findViewById(R.id.itemAddFriend).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivityForResult(new Intent(MainActivity.this, NewFriendActivity.class), MainActivity.REQ_CLEAR_UNREAD);
                mPopupWindow.dismiss();
            }
        });
        //扫一扫
        menuView.findViewById(R.id.itemScan).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, ScanActivity.class));
                mPopupWindow.dismiss();
            }
        });
        //帮助与反馈
        menuView.findViewById(R.id.itemHelpAndFeedback).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, WebViewActivity.class);
                intent.putExtra("url", AppConst.Url.HELP_FEEDBACK);
                startActivity(intent);
                mPopupWindow.dismiss();
            }
        });
        mPopupWindow = PopupWindowFactory.getPopupWindowAtLocation(menuView, mVpContent, Gravity.RIGHT | Gravity.TOP, UIUtils.dip2Px(12), mToolbar.getHeight() + getStatusBarHeight());
    }

    /**
     * 把press图片、文字全部隐藏(设置透明度)
     */
    private void setTransparency() {
        mTvMessageNormal.getBackground().setAlpha(255);
        mTvContactsNormal.getBackground().setAlpha(255);
        mTvDiscoveryNormal.getBackground().setAlpha(255);
        mTvMeNormal.getBackground().setAlpha(255);
        mTvMessagePress.getBackground().setAlpha(1);
        mTvContactsPress.getBackground().setAlpha(1);
        mTvDiscoveryPress.getBackground().setAlpha(1);
        mTvMePress.getBackground().setAlpha(1);
        mTvMessageTextNormal.setTextColor(Color.argb(255, 153, 153, 153));
        mTvContactsTextNormal.setTextColor(Color.argb(255, 153, 153, 153));
        mTvDiscoveryTextNormal.setTextColor(Color.argb(255, 153, 153, 153));
        mTvMeTextNormal.setTextColor(Color.argb(255, 153, 153, 153));
        mTvMessageTextPress.setTextColor(Color.argb(0, 69, 192, 26));
        mTvContactsTextPress.setTextColor(Color.argb(0, 69, 192, 26));
        mTvDiscoveryTextPress.setTextColor(Color.argb(0, 69, 192, 26));
        mTvMeTextPress.setTextColor(Color.argb(0, 69, 192, 26));
    }

    /**
     * 提示通讯录数据更新条目（未读数目）
     */
    public void updateContactCount() {
        //新好友、被邀请入群 未读消息数
        List<SystemMessageType> types = new ArrayList<>();
        types.add(SystemMessageType.AddFriend);
        types.add(SystemMessageType.TeamInvite);
        int unreadCount = NimSystemSDK.querySystemMessageUnreadCountByType(types);
        if (unreadCount > 0) {
            mTvContactCount.setVisibility(View.VISIBLE);
            mTvContactCount.setText(String.valueOf(unreadCount));
            return;
        } else {
            mTvContactCount.setVisibility(View.GONE);
        }
    }

    /**
     * 复写返回按键的响应，2秒内点击2次退出应用
     */
//    @Override
//    public void onBackPressed() {
//        if (exit++ == 1) {
//            App.exit();
//        } else {
//            UIUtils.showToast("再按一次退出");
//            new Timer().schedule(new TimerTask() {
//                @Override
//                public void run() {
//                    exit = 0;
//                }
//            }, 2000);
//        }
//    }

    /**
     * 注册广播接收者
     */
    private void registerBroadcastReceiver() {
        //登录出错广播接收者
        mAuthBroadcastReceiver = new AuthBroadcastReceiver();
        registerReceiver(mAuthBroadcastReceiver, new IntentFilter(AuthBroadcastReceiver.ACTION));
    }

    /**
     * 反注册广播接收者
     */
    private void unRegisterBroadcastReceiver() {
        if (mAuthBroadcastReceiver != null) {
            unregisterReceiver(mAuthBroadcastReceiver);
            mAuthBroadcastReceiver = null;
        }
    }

    /**
     * 监听在线状态
     */
    private void observerLineStatus() {
        mOnlineStatusObserver = new Observer<StatusCode>() {
            public void onEvent(StatusCode status) {
                LogUtils.sf("User status changed to: " + status);
                // 被踢出、账号被禁用、密码错误等情况，自动登录失败，需要返回到登录界面进行重新登录操作
                if (status.wontAutoLogin()) {
                    //发广播通知
                    Intent intent = new Intent();
                    intent.setAction(AuthBroadcastReceiver.ACTION);
                    intent.putExtra("status", status.getValue());
                    sendBroadcast(intent);
                }
            }
        };
        NimAccountSDK.onlineStatusListen(
                mOnlineStatusObserver, true);
    }

    /**
     * 监听用户信息更新
     */
    private void observeUserInfoUpdate() {
        NimUserInfoSDK.observeUserInfoUpdate(new Observer<List<NimUserInfo>>() {
            @Override
            public void onEvent(List<NimUserInfo> nimUserInfos) {
                mMeFragment.initData();
            }
        }, true);
    }

    /**
     * 监听好友关系的变化
     */
    private void observeFriendChangedNotify() {
        NimFriendSDK.observeFriendChangedNotify(new Observer<FriendChangedNotify>() {
            @Override
            public void onEvent(FriendChangedNotify friendChangedNotify) {
//                List<Friend> addedOrUpdatedFriends = friendChangedNotify.getAddedOrUpdatedFriends(); // 新增的好友
//                List<String> deletedFriendAccounts = friendChangedNotify.getDeletedFriends(); // 删除好友或者被解除好友

                //更新通讯录数据
                mContactsFragment.initData();
            }
        }, true);
    }

    /**
     * 监听群聊关系的变化
     */
    private void observeTeamChangedNotify() {
        NimTeamSDK.observeTeamRemove(new Observer<Team>() {
            @Override
            public void onEvent(Team team) {
                mMessageFragment.initData();
            }
        }, true);
//        NimTeamSDK.observeTeamUpdate(new Observer<List<Team>>() {
//            @Override
//            public void onEvent(List<Team> teams) {
//                mMessageFragment.initData();
//            }
//        }, true);
    }

    /**
     * 监听系统消息通知
     */
    private void observeReceiveSystemMsg() {
        NimSystemSDK.observeReceiveSystemMsg(new Observer<SystemMessage>() {
            @Override
            public void onEvent(final SystemMessage systemMessage) {

                items.clear();
                List<SystemMessageType> types = new ArrayList<>();
                types.add(SystemMessageType.AddFriend);
                types.add(SystemMessageType.TeamInvite);
                InvocationFuture<List<SystemMessage>> listInvocationFuture = NimSystemSDK.querySystemMessageByType(types, 0, 100);
                listInvocationFuture.setCallback(new RequestCallback<List<SystemMessage>>() {
                    @Override
                    public void onSuccess(List<SystemMessage> param) {
                        if (!StringUtils.isEmpty(param)) {
                            items.addAll(param);

                            //TODO:查询系统消息后返回数据的顺序问题
                            SystemMessage del = null;
                            for (SystemMessage m : items) {
                                if (m.getMessageId() != systemMessage.getMessageId() &&
                                        m.getFromAccount().equals(systemMessage.getFromAccount()) && m.getType() == SystemMessageType.AddFriend) {
                                    del = m;
                                    break;
                                }
                            }
                            if (del != null) {
                                items.remove(del);
                                //删除本地系统消息中旧的一条
                                NimSystemSDK.deleteSystemMessage(del);
                            }

                            //提示通讯录数据更新条目
                            updateContactCount();
                            mContactsFragment.updateHeaderViewUnreadCount();


                            //更新本地新朋友数据库信息
                            if (systemMessage.getType() == SystemMessageType.AddFriend) {
                                NimUserInfoSDK.getUserInfoFromServer(systemMessage.getFromAccount(), null);
                            }
                        }
                    }

                    @Override
                    public void onFailed(int code) {
                    }

                    @Override
                    public void onException(Throwable exception) {
                    }
                });
            }
        }, true);
    }
}

22:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\MsgNotificationActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 消息通知--卡包
 */
public class MsgNotificationActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_msg_notification);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_one_text, menu);
        menu.getItem(0).setTitle("清空").setEnabled(false);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("消息通知");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

23:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\MyCouponActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 我的票券--卡包
 */
public class MyCouponActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_my_coupon);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("我的票券");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

24:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\MyInfoActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.lqr.imagepicker.ImagePicker;
import com.lqr.imagepicker.bean.ImageItem;
import com.lqr.imagepicker.ui.ImageGridActivity;
import com.lqr.optionitemview.OptionItemView;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.CustomDialog;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.ResponseCode;
import com.netease.nimlib.sdk.uinfo.constant.GenderEnum;
import com.netease.nimlib.sdk.uinfo.constant.UserInfoFieldEnum;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

import static com.lqr.wechat.activity.SessionActivity.IMAGE_PICKER;

/**
 * @创建者 CSDN_LQR
 * @描述 个人信息
 */
public class MyInfoActivity extends BaseActivity {

    Intent mIntent;
    private NimUserInfo mNimUserInfo;

    private View mGenderDialogView;
    private CustomDialog mDialog;
    private TextView mTvMale;
    private TextView mTvFemale;
    private Drawable mSelectedDrawable;
    private Drawable mUnSelectedDrawable;

    Observer<List<NimUserInfo>> userInfoUpdateObserver = new Observer<List<NimUserInfo>>() {
        @Override
        public void onEvent(List<NimUserInfo> nimUserInfos) {
            initData();
        }
    };

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.llHeader)
    LinearLayout mLlHeader;
    @InjectView(R.id.ivHeader)
    ImageView mIvHeader;
    @InjectView(R.id.oivName)
    OptionItemView mOivName;
    @InjectView(R.id.oivQRCordCard)
    OptionItemView mOivQRCordCard;
    @InjectView(R.id.oivAccount)
    OptionItemView mOivAccount;
    @InjectView(R.id.oivGender)
    OptionItemView mOivGender;
    @InjectView(R.id.oivSignature)
    OptionItemView mOivSignature;

    @OnClick({R.id.llHeader, R.id.ivHeader, R.id.oivName, R.id.oivQRCordCard, R.id.oivGender, R.id.oivSignature})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.llHeader:
                mIntent = new Intent(this, ImageGridActivity.class);
                startActivityForResult(mIntent, IMAGE_PICKER);
                break;
            case R.id.ivHeader:
                if (mNimUserInfo == null)
                    return;
                mIntent = new Intent(this, ShowBigImageActivity.class);
                mIntent.putExtra("url", mNimUserInfo.getAvatar());
                startActivity(mIntent);
                break;
            case R.id.oivName:
                mIntent = new Intent(this, ChangeNameActivity.class);
                mIntent.putExtra("name", mNimUserInfo.getName());
                startActivity(mIntent);
                break;
            case R.id.oivQRCordCard:
                mIntent = new Intent(this, QRCodeCardActivity.class);
                mIntent.putExtra(QRCodeCardActivity.QRCODE_USER, mNimUserInfo);
                startActivity(mIntent);
                break;
            case R.id.oivGender:
                if (mGenderDialogView == null) {
                    mGenderDialogView = View.inflate(this, R.layout.dialog_gender, null);
                    mTvMale = (TextView) mGenderDialogView.findViewById(R.id.tvMale);
                    mTvFemale = (TextView) mGenderDialogView.findViewById(R.id.tvFemale);
                    mDialog = new CustomDialog(this, mGenderDialogView, R.style.dialog);
                    mTvMale.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            updateGender(GenderEnum.MALE);
                        }
                    });
                    mTvFemale.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            updateGender(GenderEnum.FEMALE);
                        }
                    });
                }
                updateGenderView(mNimUserInfo.getGenderEnum());
                mDialog.show();
                break;
            case R.id.oivSignature:
                mIntent = new Intent(this, ChangeSignatureActivity.class);
                mIntent.putExtra("signature", mNimUserInfo.getSignature());
                startActivity(mIntent);
                break;
//            case R.id.llHeader:
//                break;
        }
    }

    @Override
    public void init() {
        // 监听用户信息更新
        NimUserInfoSDK.observeUserInfoUpdate(userInfoUpdateObserver, true);

        mSelectedDrawable = UIUtils.getResource().getDrawable(R.mipmap.list_selected);
        mUnSelectedDrawable = UIUtils.getResource().getDrawable(R.mipmap.list_unselected);
        mSelectedDrawable.setBounds(0, 0, mSelectedDrawable.getMinimumWidth(), mSelectedDrawable.getMinimumHeight());
        mUnSelectedDrawable.setBounds(0, 0, mUnSelectedDrawable.getMinimumWidth(), mUnSelectedDrawable.getMinimumHeight());
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // 销毁用户信息更新监听
        NimUserInfoSDK.observeUserInfoUpdate(userInfoUpdateObserver, false);
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_my_info);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public void initData() {
        mNimUserInfo = NimUserInfoSDK.getUser(UserCache.getAccount());
        if (mNimUserInfo == null) {
            getUserInfoFromRemote();
        } else {
            //头像
            if (!TextUtils.isEmpty(mNimUserInfo.getAvatar())) {
                ImageLoaderManager.LoadNetImage(mNimUserInfo.getAvatar(), mIvHeader);
            }
            //用户名、账号、签名、性别
            mOivName.setRightText(mNimUserInfo.getName());
            mOivAccount.setRightText(mNimUserInfo.getAccount());
            mOivSignature.setRightText(TextUtils.isEmpty(mNimUserInfo.getSignature()) ? "未填写" : mNimUserInfo.getSignature());
            mOivGender.setRightText(mNimUserInfo.getGenderEnum() == GenderEnum.FEMALE ? "女" : mNimUserInfo.getGenderEnum() == GenderEnum.MALE ? "男" : "");
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {//返回多张照片
            if (data != null) {
                //是否发送原图
//                boolean isOrig = data.getBooleanExtra(ImagePreviewActivity.ISORIGIN, false);
                showWaitingDialog("上传头像...");
                ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);
                if (images != null && images.size() > 0) {
                    //取第一张照片
                    File file = new File(images.get(0).path);
                    NimUserInfoSDK.uploadFile(file, "image/jpeg", new RequestCallbackWrapper<String>() {
                        @Override
                        public void onResult(int code, String url, Throwable exception) {

                            if (code == ResponseCode.RES_SUCCESS
                                    && !TextUtils.isEmpty(url)) {// 上传成功得到Url
                                Map<UserInfoFieldEnum, Object> fields = new HashMap<UserInfoFieldEnum, Object>(
                                        1);
                                fields.put(UserInfoFieldEnum.AVATAR, url);
                            }

                            Map<UserInfoFieldEnum, Object> fields = new HashMap(1);
                            fields.put(UserInfoFieldEnum.AVATAR, url);
                            NimUserInfoSDK.updateUserInfo(fields, new RequestCallbackWrapper<Void>() {
                                @Override
                                public void onResult(int code, Void result, Throwable exception) {
                                    if (code == ResponseCode.RES_SUCCESS) {// 修改成功
                                        UIUtils.showToast("修改成功");
                                        getUserInfoFromRemote();// 重新加载个人资料
                                    } else {// 修改失败
                                        UIUtils.showToast("修改失败，请重试");
                                    }
                                    hideWaitingDialog();
                                }
                            });
                        }
                    });
                }
            }
        }
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("个人信息");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void getUserInfoFromRemote() {
        List<String> accountList = new ArrayList<>();
        accountList.add(UserCache.getAccount());
        NimUserInfoSDK.getUserInfosFormServer(accountList, new RequestCallback<List<NimUserInfo>>() {
            @Override
            public void onSuccess(List<NimUserInfo> param) {
                initData();
            }

            @Override
            public void onFailed(int code) {
                UIUtils.showToast("获取用户信息失败" + code);
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
            }
        });
    }

    private void updateGender(final GenderEnum gender) {
        updateGenderView(gender);
        showWaitingDialog("请稍等");
        Map<UserInfoFieldEnum, Object> fields = new HashMap(1);
        fields.put(UserInfoFieldEnum.GENDER, gender.getValue());
        NimUserInfoSDK.updateUserInfo(fields, new RequestCallbackWrapper<Void>() {
            @Override
            public void onResult(int code, Void result, Throwable exception) {
                hideWaitingDialog();
                if (code == ResponseCode.RES_SUCCESS) {
                    UIUtils.showToast("修改成功");
                    mDialog.dismiss();
                } else {
                    UIUtils.showToast("修改失败");
                }
            }
        });
    }

    private void updateGenderView(GenderEnum gender) {
        if (gender == GenderEnum.MALE) {
            mTvMale.setCompoundDrawables(null, null, mSelectedDrawable, null);
            mTvFemale.setCompoundDrawables(null, null, mUnSelectedDrawable, null);
        } else if (gender == GenderEnum.FEMALE) {
            mTvMale.setCompoundDrawables(null, null, mUnSelectedDrawable, null);
            mTvFemale.setCompoundDrawables(null, null, mSelectedDrawable, null);
        } else {
            mTvMale.setCompoundDrawables(null, null, mUnSelectedDrawable, null);
            mTvFemale.setCompoundDrawables(null, null, mUnSelectedDrawable, null);
        }
    }
}

25:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\NearbyPerpleActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 附近的人
 */

public class NearbyPerpleActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_nearby_perple);
        ButterKnife.inject(this);
        initToolbar();
        showMaterialDialog("提示", "查看附近的人功能将获取你的位置信息，你的位置信息会被保留一段时间。通过列表右上角的清除功能可随时手动清除位置信息。", "确定", "取消", new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                hideMaterialDialog();
            }
        }, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                hideMaterialDialog();
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("附近的人");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

26:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\NewFriendActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.NewFriend;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimSystemSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.msg.constant.SystemMessageType;
import com.netease.nimlib.sdk.msg.model.SystemMessage;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 新的朋友界面
 */
public class NewFriendActivity extends BaseActivity {

    private Intent mIntent;
    private List<NewFriend> mNewFriendList = new ArrayList<>();
    private LQRAdapterForRecyclerView<NewFriend> mAdapter;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.etContent)
    EditText mEtContent;
    @InjectView(R.id.tvNewFriend)
    TextView mTvNewFriend;
    @InjectView(R.id.rvNewFriend)
    LQRRecyclerView mRvNewFriend;

    @OnClick({R.id.etContent})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.etContent:
                mIntent = new Intent(this, SearchUserActivity.class);
                mIntent.putExtra(SearchUserActivity.SEARCH_TYPE, SearchUserActivity.SEARCH_USER_LOCAL);
                startActivity(mIntent);
                break;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_new_friend);
        ButterKnife.inject(this);
        initToolbar();

        //清空所有的新好友提示
        List<SystemMessageType> types = new ArrayList<>();
        types.add(SystemMessageType.AddFriend);
        NimSystemSDK.resetSystemMessageUnreadCount(types);
    }

    @Override
    public void initData() {
        showWaitingDialog("请稍等");
        //1、获取添加好友类的系统信息
        List<SystemMessageType> types = new ArrayList<>();
        types.add(SystemMessageType.AddFriend);
        InvocationFuture<List<SystemMessage>> listInvocationFuture = NimSystemSDK.querySystemMessageByType(types, 0, 100);
        listInvocationFuture.setCallback(new RequestCallback<List<SystemMessage>>() {
            @Override
            public void onSuccess(final List<SystemMessage> smList) {
                //2、从服务器上得到所有的好友用户信息
                List<String> accounts = new ArrayList<>();
                for (SystemMessage msg : smList) {
                    accounts.add(msg.getFromAccount());
                }
                if (StringUtils.isEmpty(accounts)) {
                    mTvNewFriend.setVisibility(View.GONE);
                    loadDone();
                    return;
                } else {
                    mTvNewFriend.setVisibility(View.VISIBLE);
                    NimUserInfoSDK.getUserInfosFormServer(accounts, new RequestCallback<List<NimUserInfo>>() {
                        @Override
                        public void onSuccess(List<NimUserInfo> userInfoList) {
                            mNewFriendList.clear();
                            //3、得到所有最新数据
                            for (int i = 0; i < userInfoList.size(); i++) {
                                NimUserInfo userInfo = userInfoList.get(i);
                                mNewFriendList.add(new NewFriend(userInfo, smList.get(i).getContent()));
                            }
                            setAdapter();
                            loadDone();
                        }

                        @Override
                        public void onFailed(int code) {
                            loadDone();
                        }

                        @Override
                        public void onException(Throwable exception) {
                            loadDone();
                        }
                    });
                }

            }

            @Override
            public void onFailed(int code) {
                UIUtils.showToast("加载新好友数据失败" + code);
                loadDone();
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
                loadDone();
            }
        });
    }

    private void loadDone() {
        UIUtils.postTaskSafely(new Runnable() {
            @Override
            public void run() {
                hideWaitingDialog();
            }
        });
    }

    private void setAdapter() {
        if (mAdapter == null) {
            mAdapter = new LQRAdapterForRecyclerView<NewFriend>(this, R.layout.item_new_friends_rv, mNewFriendList) {
                @Override
                public void convert(LQRViewHolderForRecyclerView helper, final NewFriend item, final int position) {
                    if (!TextUtils.isEmpty(item.getUserInfo().getAvatar())) {
                        ImageLoaderManager.LoadNetImage(item.getUserInfo().getAvatar(), (ImageView) helper.getView(R.id.ivHeader));
                    } else {
                        ((ImageView) helper.getView(R.id.ivHeader)).setImageResource(R.mipmap.default_header);
                    }
                    helper.setText(R.id.tvName, item.getUserInfo().getName()).setText(R.id.tvMsg, TextUtils.isEmpty(item.getMsg()) ? "对方请求添加你为好友" : item.getMsg());

                    if (NimFriendSDK.isMyFriend(item.getUserInfo().getAccount())) {
                        helper.setViewVisibility(R.id.tvAdded, View.VISIBLE)
                                .setViewVisibility(R.id.btnAck, View.GONE);
                    } else {
                        helper.setViewVisibility(R.id.tvAdded, View.GONE)
                                .setViewVisibility(R.id.btnAck, View.VISIBLE);
                    }

                    helper.getView(R.id.btnAck).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            NimFriendSDK.ackAddFriendRequest(item.getUserInfo().getAccount(), true);
                            UIUtils.postTaskDelay(new Runnable() {
                                @Override
                                public void run() {
                                    mAdapter.notifyItemChanged(position);
                                }
                            }, 500);

                        }
                    });
                }
            };
            mRvNewFriend.setAdapter(mAdapter);
        } else {
            mAdapter.notifyDataSetChanged();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_one_text, menu);
        menu.getItem(0).setTitle("添加朋友");
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemOne:
                startActivity(new Intent(this, AddFriendActivity.class));
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("新的朋友");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }


}

27:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\NewMsgNotifySetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 新消息提醒
 */
public class NewMsgNotifySetActivity extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_new_msg_notify_set);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("新消息提醒");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

28:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\OtherLoginActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.UIUtils;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 其他方式登录界面
 */
public class OtherLoginActivity extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @InjectView(R.id.etPhone)
    EditText mEtPhone;
    @InjectView(R.id.etPwd)
    EditText mEtPwd;
    @InjectView(R.id.vLinePhone)
    View mVLinePhone;
    @InjectView(R.id.vLinePwd)
    View mVLinePwd;

    @InjectView(R.id.btnLogin)
    Button mBtnLogin;

    @Override
    public void initView() {
        setContentView(R.layout.activity_other_login);
        ButterKnife.inject(this);

        initToolbar();
    }

    @Override
    public void initListener() {
        /*------------------ 监听编辑框，变换样式 begin ------------------*/
        mEtPhone.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    mVLinePhone.setBackgroundColor(UIUtils.getColor(R.color.green0));
                } else {
                    mVLinePhone.setBackgroundColor(UIUtils.getColor(R.color.line));
                }
            }
        });
        mEtPwd.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    mVLinePwd.setBackgroundColor(UIUtils.getColor(R.color.green0));
                } else {
                    mVLinePwd.setBackgroundColor(UIUtils.getColor(R.color.line));
                }
            }
        });
        mEtPhone.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (!TextUtils.isEmpty(mEtPhone.getText().toString()) && !TextUtils.isEmpty(mEtPwd.getText().toString())) {
                    mBtnLogin.setEnabled(true);
                } else {
                    mBtnLogin.setEnabled(false);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        mEtPwd.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (!TextUtils.isEmpty(mEtPhone.getText().toString()) && !TextUtils.isEmpty(mEtPwd.getText().toString())) {
                    mBtnLogin.setEnabled(true);
                } else {
                    mBtnLogin.setEnabled(false);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        /*------------------ 监听编辑框，变换样式 end ------------------*/
        super.initListener();
    }

    /**
     * 设置Toolbar
     */
    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("登录微信");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }
}

29:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\PhotoActivity.java
package com.lqr.wechat.activity;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.view.View;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.Bimp;
import com.lqr.wechat.utils.SDCardUtils;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.view.ZoomImageView;
import com.nostra13.universalimageloader.core.ImageLoader;

import java.io.File;
import java.util.UUID;

/**
 * @创建者 CSDN_LQR
 * @描述 查看图片的Activity
 * <p>
 * 使用：
 * Intent intent = new Intent(getActivity(), PhotoActivity.class);
 * intent.putExtra("flag", 2);//1是拍照，2是从相册选取图片
 * intent.putExtra("noZoom", 1);//不压缩
 * intent.putExtra("noSurePic", 1);//在选取完图片后，不需要确定图片
 * getActivity().startActivityForResult(intent, MainActivity.SELECT_BAR_CODE_PHOTO);
 */
public class PhotoActivity extends Activity {

    private View cancelBtn;
    private View sendBtn;
    private ZoomImageView img;

    private static final int TAKE_PHOTO = 110;
    private static final int SELECT_PHOTO = 111;
    private static final int CUT_PHOTO_REQUEST_CODE = 112;

    int flag = 0;
    int noZoom = 0;//0是要zoom，1是不zoom
    int noSurePic = 0;//0是要显示确定图片，1是不需要显示确定图片

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_photo);

        initView();

        flag = getIntent().getIntExtra("flag", 0);
        noZoom = getIntent().getIntExtra("noZoom", 0);
        noSurePic = getIntent().getIntExtra("noSurePic", 0);

        if (flag == 0) {
            String imgUrl = getIntent().getStringExtra("imgUrl");
            if (!StringUtils.isEmpty(imgUrl)) {
                ImageLoader.getInstance().displayImage(imgUrl, img);
            } else {
                this.finish();
            }
        } else if (flag == 1) {
            photo();
        } else if (flag == 2) {
            Intent intent = new Intent(
                    Intent.ACTION_PICK,
                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            startActivityForResult(intent, SELECT_PHOTO);
        }

    }

    private void initView() {
        cancelBtn = findViewById(R.id.photo_cancel);
        sendBtn = findViewById(R.id.photo_send);
        img = (ZoomImageView) findViewById(R.id.photo_img);
        cancelBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                PhotoActivity.this.finish();
            }
        });
        sendBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sendPic();
            }
        });
    }

    /**
     * 选取好图片后发送图片
     */
    private void sendPic() {
        Bundle b = new Bundle();
        b.putString("imgPath", filePath);
        Intent result = new Intent();
        result.putExtras(b);
        setResult(Activity.RESULT_OK, result);
        finish();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == RESULT_OK && (null != data || requestCode == TAKE_PHOTO)) {
            switch (requestCode) {//拍照返回
                case TAKE_PHOTO:
                    if (photoUri != null) {
                        if (noZoom == 0) {
                            startPhotoZoom(photoUri);
                        } else {
                            filePath = getRealFilePath(PhotoActivity.this, photoUri);
                            if (noSurePic == 0) {
                                Bitmap bitmap = Bimp.zoomForFilePath(PhotoActivity.this, filePath);
                                img.setImageBitmap(bitmap);
                            } else {
                                sendPic();
                            }

                        }
                    } else {
                        PhotoActivity.this.finish();
                    }
                    break;
                case SELECT_PHOTO:// 相册返回
                    Uri uri = data.getData();
                    if (uri != null) {
                        if (noZoom == 0) {
                            startPhotoZoom(uri);
                        } else {
                            filePath = getRealFilePath(PhotoActivity.this, uri);
                            if (noSurePic == 0) {
                                Bitmap bitmap = Bimp.zoomForFilePath(PhotoActivity.this, filePath);
                                img.setImageBitmap(bitmap);
                            } else {
                                sendPic();
                            }

                        }
                    } else {
                        PhotoActivity.this.finish();
                    }
                    break;
                case CUT_PHOTO_REQUEST_CODE:// 裁剪返回
                    Bitmap bitmap = Bimp.zoomForFilePath(PhotoActivity.this, filePath);
                    img.setImageBitmap(bitmap);
                    break;
            }
        } else {
            PhotoActivity.this.finish();
        }
    }

    private String filePath;

    private void startPhotoZoom(Uri uri) {
        try {
            String address = UUID.randomUUID() + "";
            File destDir = new File(SDCardUtils.getSDCardPath() + "/CSDN_LQR/img");
            if (!destDir.exists()) {
                destDir.mkdirs();
            }
//            Toast.makeText(PhotoActivity.this, uri.getPath(), Toast.LENGTH_LONG).show();
            Uri imageUri = Uri.parse("file:///sdcard/CSDN_LQR/img/" + address + ".jpg");
            filePath = imageUri.getPath();

            final Intent intent = new Intent("com.android.camera.action.CROP");

            // 照片URL地址
            intent.setDataAndType(uri, "image/*");

            intent.putExtra("crop", "true");
            intent.putExtra("aspectX", 1);
            intent.putExtra("aspectY", 1);
            intent.putExtra("outputX", 720);
            intent.putExtra("outputY", 720);
            // 输出路径
            intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
            // 输出格式
            intent.putExtra("outputFormat",
                    Bitmap.CompressFormat.JPEG.toString());
            // 不启用人脸识别
            intent.putExtra("noFaceDetection", false);
            intent.putExtra("return-data", false);
            startActivityForResult(intent, CUT_PHOTO_REQUEST_CODE);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String path;
    private Uri photoUri;

    public void photo() {
        Intent openCameraIntent = new Intent(
                MediaStore.ACTION_IMAGE_CAPTURE);

        String sdcardState = Environment.getExternalStorageState();
        String sdcardPathDir = Environment
                .getExternalStorageDirectory().getPath() + "/CSDN_LQR/img/";
        File file = null;
        if (Environment.MEDIA_MOUNTED.equals(sdcardState)) {
            File fileDir = new File(sdcardPathDir);
            if (!fileDir.exists()) {
                fileDir.mkdirs();
            }
            file = new File(sdcardPathDir + System.currentTimeMillis() + ".jpg");
        }
        if (file != null) {
            path = file.getPath();
//            photoUri = Uri.fromFile(file);
            photoUri = Uri.parse("file://"+file.getAbsolutePath());
            openCameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);

            startActivityForResult(openCameraIntent, TAKE_PHOTO);
        }
    }

    /**
     * 得到图片文件的真实路径
     *
     * @param context
     * @param uri
     * @return
     */
    public static String getRealFilePath(final Context context, final Uri uri) {
        if (null == uri) return null;
        final String scheme = uri.getScheme();
        String data = null;
        if (scheme == null)
            data = uri.getPath();
        else if (ContentResolver.SCHEME_FILE.equals(scheme)) {
            data = uri.getPath();
        } else if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {
            Cursor cursor = context.getContentResolver().query(uri, new String[]{MediaStore.Images.ImageColumns.DATA}, null, null, null);
            if (null != cursor) {
                if (cursor.moveToFirst()) {
                    int index = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
                    if (index > -1) {
                        data = cursor.getString(index);
                    }
                }
                cursor.close();
            }
        }
        return data;
    }

}

30:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\PostscriptActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 附言
 */
public class PostscriptActivity extends BaseActivity {

    public String mAccount;//账号
    public String mMsg;//附言

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;

    @InjectView(R.id.etMsg)
    EditText mEtMsg;

    @OnClick({R.id.btnOk, R.id.ibClear})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                showWaitingDialog("请稍等");
                mMsg = mEtMsg.getText().toString();
                //发送添加好友请求
                NimFriendSDK.addFriend(mAccount, mMsg, new RequestCallback<Void>() {
                    @Override
                    public void onSuccess(Void param) {
                        hideWaitingDialog();
                        UIUtils.showToast("添加好友申请成功");
                        finish();
                    }

                    @Override
                    public void onFailed(int code) {
                        UIUtils.showToast("添加好友失败" + code);
                        hideWaitingDialog();
                    }

                    @Override
                    public void onException(Throwable exception) {
                        exception.printStackTrace();
                        hideWaitingDialog();
                    }
                });
                break;
            case R.id.ibClear:
                mEtMsg.setText("");
                break;
        }
    }

    @Override
    public void init() {
        mAccount = getIntent().getStringExtra("account");
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_postscript);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle(UIUtils.getString(R.string.app_name));
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mBtnOk.setVisibility(View.VISIBLE);
        mBtnOk.setText("发送");
    }
}

31:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\PrivacySetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 隐私
 */
public class PrivacySetActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_privacy_set);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("隐私");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

32:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\QRCodeCardActivity.java
package com.lqr.wechat.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.lqr.ninegridimageview.LQRNineGridImageView;
import com.lqr.ninegridimageview.LQRNineGridImageViewAdapter;
import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.factory.ThreadPoolFactory;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;
import com.netease.nimlib.sdk.uinfo.constant.GenderEnum;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import cn.bingoogolapple.qrcode.zxing.QRCodeEncoder;

/**
 * @创建者 CSDN_LQR
 * @描述 二级码名片
 */
public class QRCodeCardActivity extends BaseActivity {

    public static final String QRCODE_USER = "code_user";
    public static final String QRCODE_TEAM = "code_team";

    private NimUserInfo mUser;
    private Team mTeam;
    private boolean isUserInfoQRcode = true;
    private LQRNineGridImageViewAdapter<NimUserInfo> mNineGridAdapter;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.ivHeader)
    ImageView mIvHeader;
    @InjectView(R.id.ngiv)
    LQRNineGridImageView mNgivHeader;
    @InjectView(R.id.tvName)
    TextView mTtvName;
    @InjectView(R.id.ivGender)
    ImageView mIvGender;
    @InjectView(R.id.ivCard)
    ImageView mIvCard;
    @InjectView(R.id.tvTip)
    TextView mTvTip;

    @Override
    public void init() {
        Intent intent = getIntent();
        mUser = (NimUserInfo) intent.getSerializableExtra(QRCODE_USER);
        mTeam = (Team) intent.getSerializableExtra(QRCODE_TEAM);
        if (mUser == null && mTeam == null)
            interrupt();
        if (mUser != null && mTeam == null) {
            isUserInfoQRcode = true;
        } else {
            isUserInfoQRcode = false;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_qrcode_card);
        ButterKnife.inject(this);
        initToolbar();
        mNineGridAdapter = new LQRNineGridImageViewAdapter<NimUserInfo>() {
            @Override
            protected void onDisplayImage(Context context, ImageView imageView, NimUserInfo userInfo) {
                if (!TextUtils.isEmpty(userInfo.getAvatar())) {
                    ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), imageView);
                } else {
                    imageView.setImageResource(R.mipmap.default_header);
                }
            }
        };

        if (isUserInfoQRcode) {
            mIvHeader.setVisibility(View.VISIBLE);
            mNgivHeader.setVisibility(View.GONE);
            final String avatar = mUser.getAvatar();

            if (!TextUtils.isEmpty(avatar)) {
                ImageLoaderManager.LoadNetImage(avatar, mIvHeader);
            } else {
                mIvHeader.setImageResource(R.mipmap.default_header);
            }
            mTtvName.setText(mUser.getName());
            mTvTip.setText("扫一扫上面的二维码图案，加我微信");
            if (mUser.getGenderEnum() == GenderEnum.FEMALE) {
                mIvGender.setImageResource(R.mipmap.ic_gender_female);
            } else if (mUser.getGenderEnum() == GenderEnum.MALE) {
                mIvGender.setImageResource(R.mipmap.ic_gender_male);
            } else {
                mIvGender.setVisibility(View.GONE);
            }
        } else {
            mIvHeader.setVisibility(View.GONE);
            mNgivHeader.setVisibility(View.VISIBLE);
            mTtvName.setText(TextUtils.isEmpty(mTeam.getName()) ? "群聊(" + mTeam.getMemberCount() + ")" : mTeam.getName());
            mIvGender.setVisibility(View.GONE);
            mTvTip.setText("扫一扫上面的二维码图案，加入群聊");
            //设置群聊的头像
            NimTeamSDK.queryMemberList(mTeam.getId(), new RequestCallback<List<TeamMember>>() {
                @Override
                public void onSuccess(List<TeamMember> memberList) {
                    if (memberList != null && memberList.size() > 0) {
                        List<String> accounts = new ArrayList<>();
                        int count = memberList.size() > 9 ? 9 : memberList.size();
                        for (int i = 0; i < count; i++) {
                            accounts.add(memberList.get(i).getAccount());
                        }
                        NimUserInfoSDK.getUserInfosFormServer(accounts, new RequestCallback<List<NimUserInfo>>() {
                            @Override
                            public void onSuccess(List<NimUserInfo> result) {
                                mNgivHeader.setAdapter(mNineGridAdapter);
                                mNgivHeader.setImagesData(result);
                            }

                            @Override
                            public void onFailed(int code) {

                            }

                            @Override
                            public void onException(Throwable exception) {

                            }
                        });
                    }
                }

                @Override
                public void onFailed(int code) {

                }

                @Override
                public void onException(Throwable exception) {

                }
            });
        }
        createQRCode();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
//        new MenuInflater(this).inflate(R.menu.menu_more, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemMore:
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle(isUserInfoQRcode ? "二维码名片" : "群二维码名片");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void createQRCode() {
        ThreadPoolFactory.getNormalPool().execute(new Runnable() {
            @Override
            public void run() {
                String content = isUserInfoQRcode ? AppConst.QRCodeCommend.ACCOUNT + mUser.getAccount() : AppConst.QRCodeCommend.TEAMID + mTeam.getId();
                final Bitmap codeWithLogo5 = QRCodeEncoder.syncEncodeQRCode(content, UIUtils.dip2Px(200));
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mIvCard.setImageBitmap(codeWithLogo5);
                    }
                });
            }
        });
    }
}

33:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\RedPacketActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.UIUtils;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 红包
 */
public class RedPacketActivity extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @InjectView(R.id.tvTip)
    TextView mTvTip;

    @InjectView(R.id.tvMoneyLeft)
    TextView mTvMoneyLeft;
    @InjectView(R.id.etMoney)
    EditText mEtMoney;
    @InjectView(R.id.tvMoneyRight)
    TextView mTvMoneyRight;

    @InjectView(R.id.etMessage)
    EditText mEtMessage;
    @InjectView(R.id.tvHint)
    TextView mTvHint;

    @InjectView(R.id.tvMoney)
    TextView mTvMoney;
    @InjectView(R.id.btnOk)
    Button mBtnOk;

    @Override
    public void initView() {
        setContentView(R.layout.activity_red_packet);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public void initListener() {
        mEtMoney.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (TextUtils.isEmpty(s)) {
                    mBtnOk.setEnabled(false);
                    mTvMoney.setText("￥0.00");
                } else {
                    mBtnOk.setEnabled(true);
                    String result = String.format("%.2f", Double.valueOf(s.toString()));
                    mTvMoney.setText("￥" + result);
                    Double money = Double.valueOf(result);
                    if (money > 200) {
                        mTvTip.setVisibility(View.VISIBLE);
                        mTvMoneyLeft.setTextColor(UIUtils.getColor(R.color.red5));
                        mEtMoney.setTextColor(UIUtils.getColor(R.color.red5));
                        mTvMoneyRight.setTextColor(UIUtils.getColor(R.color.red5));
                        mBtnOk.setEnabled(false);
                    } else {
                        mTvTip.setVisibility(View.GONE);
                        mTvMoneyLeft.setTextColor(UIUtils.getColor(R.color.black0));
                        mEtMoney.setTextColor(UIUtils.getColor(R.color.black0));
                        mTvMoneyRight.setTextColor(UIUtils.getColor(R.color.black0));
                        mBtnOk.setEnabled(true);
                    }
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        mEtMessage.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                mTvHint.setVisibility(TextUtils.isEmpty(s) ? View.VISIBLE : View.GONE);
                if (s.length() > 25) {
                    mEtMessage.setText(s.subSequence(0, 25));
                    mEtMessage.setSelection(25);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_one_icon, menu);
        menu.getItem(0).setIcon(R.mipmap.ic_question);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemOne:
                UIUtils.showToast("有问题？");
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("发红包");
        getSupportActionBar().setSubtitle("微信安全支付");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mToolbar.setBackgroundColor(UIUtils.getColor(R.color.red1));
    }

}

34:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\ScanActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.os.Vibrator;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.lqr.imagepicker.ImagePicker;
import com.lqr.imagepicker.bean.ImageItem;
import com.lqr.imagepicker.ui.ImageGridActivity;
import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.factory.PopupWindowFactory;
import com.lqr.wechat.factory.ThreadPoolFactory;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.utils.LogUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.team.model.Team;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import cn.bingoogolapple.qrcode.core.QRCodeView;
import cn.bingoogolapple.qrcode.zxing.QRCodeDecoder;
import cn.bingoogolapple.qrcode.zxing.ZXingView;

import static com.lqr.wechat.activity.SessionActivity.IMAGE_PICKER;

/**
 * @创建者 CSDN_LQR
 * @描述 扫一扫
 */
public class ScanActivity extends BaseActivity implements QRCodeView.Delegate {

    private FrameLayout mView;
    private PopupWindow mPopupWindow;

    @InjectView(R.id.zxingview)
    ZXingView mZxingview;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @InjectView(R.id.llSaoma)
    LinearLayout mLlSaoma;
    @InjectView(R.id.llFengmian)
    LinearLayout mLlFengmian;
    @InjectView(R.id.llJiejing)
    LinearLayout mLlJiejing;
    @InjectView(R.id.llFanyi)
    LinearLayout mLlFanyi;

    @InjectView(R.id.ivSaomaPress)
    ImageView mIvSaomaPress;
    @InjectView(R.id.ivSaomaNormal)
    ImageView mIvSaomaNormal;
    @InjectView(R.id.ivFengmianPress)
    ImageView mIvFengmianPress;
    @InjectView(R.id.ivFengmianNormal)
    ImageView mIvFengmianNormal;
    @InjectView(R.id.ivJiejingPress)
    ImageView mIvJiejingPress;
    @InjectView(R.id.ivJiejingNormal)
    ImageView mIvJiejingNormal;
    @InjectView(R.id.ivFanyiPress)
    ImageView mIvFanyiPress;
    @InjectView(R.id.ivFanyiNormal)
    ImageView mIvFanyiNormal;

    @OnClick({R.id.llSaoma, R.id.llFengmian, R.id.llJiejing, R.id.llFanyi})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.llSaoma:
                selectBottomOne(0);
                break;
            case R.id.llFengmian:
                selectBottomOne(1);
                break;
            case R.id.llJiejing:
                selectBottomOne(2);
                break;
            case R.id.llFanyi:
                selectBottomOne(3);
                break;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_scan);
        ButterKnife.inject(this);
        initToolbar();
        selectBottomOne(0);
    }

    @Override
    public void initListener() {
        mZxingview.setDelegate(this);
    }

    @Override
    protected void onStart() {
        super.onStart();
        mZxingview.startCamera();
        mZxingview.startSpotAndShowRect();
    }

    @Override
    protected void onStop() {
        super.onStop();
        mZxingview.stopCamera();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mZxingview.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_more, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemMore:
                showPopupMenu();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("二级码/条码");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    public void selectBottomOne(int switchItem) {
        mIvSaomaPress.setVisibility(View.GONE);
        mIvFengmianPress.setVisibility(View.GONE);
        mIvJiejingPress.setVisibility(View.GONE);
        mIvFanyiPress.setVisibility(View.GONE);
        switch (switchItem) {
            case 0:
                getSupportActionBar().setTitle("二级码/条码");
                mIvSaomaPress.setVisibility(View.VISIBLE);
                break;
            case 1:
                getSupportActionBar().setTitle("封面/电影海报");
                mIvFengmianPress.setVisibility(View.VISIBLE);
                break;
            case 2:
                getSupportActionBar().setTitle("街景");
                mIvJiejingPress.setVisibility(View.VISIBLE);
                break;
            case 3:
                getSupportActionBar().setTitle("翻译");
                mIvFanyiPress.setVisibility(View.VISIBLE);
                break;
        }
    }

    private void showPopupMenu() {
        if (mView == null) {
            mView = new FrameLayout(this);
            mView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
            mView.setBackgroundColor(UIUtils.getColor(R.color.white));

            TextView tv = new TextView(this);
            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, UIUtils.dip2Px(45));
            tv.setLayoutParams(params);
            tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
            tv.setPadding(UIUtils.dip2Px(20), 0, 0, 0);
            tv.setTextColor(UIUtils.getColor(R.color.gray0));
            tv.setTextSize(14);
            tv.setText("从相册选取二维码");
            mView.addView(tv);

            tv.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    mPopupWindow.dismiss();
                    Intent intent = new Intent(ScanActivity.this, ImageGridActivity.class);
                    startActivityForResult(intent, IMAGE_PICKER);
                }
            });
        }
        mPopupWindow = PopupWindowFactory.getPopupWindowAtLocation(mView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, getWindow().getDecorView().getRootView(), Gravity.BOTTOM, 0, 0);
        mPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                PopupWindowFactory.makeWindowLight(ScanActivity.this);
            }
        });
        PopupWindowFactory.makeWindowDark(this);
    }

    private void vibrate() {
        Vibrator vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
        vibrator.vibrate(200);
    }

    @Override
    public void onScanQRCodeSuccess(String result) {
        LogUtils.sf(result);
        handleResult(result);
    }

    private void handleResult(String result) {
        vibrate();
        mZxingview.startSpot();
        //添加用户
        if (result.startsWith(AppConst.QRCodeCommend.ACCOUNT)) {
            String account = result.substring(AppConst.QRCodeCommend.ACCOUNT.length());
//            UIUtils.showToast("微信号：" + account);
            if (NimFriendSDK.isMyFriend(account)) {
                UIUtils.showToast("该用户已经是您的好友");
                return;
            }
            Intent intent = new Intent(ScanActivity.this, PostscriptActivity.class);
            intent.putExtra("account", account);
            startActivity(intent);
        }
        // 进群
        else if (result.startsWith(AppConst.QRCodeCommend.TEAMID)) {
            final String teamId = result.substring(AppConst.QRCodeCommend.TEAMID.length());
            NimTeamSDK.searchTeam(teamId, new RequestCallback<Team>() {
                @Override
                public void onSuccess(Team team) {
                    if (team.isMyTeam()) {
                        UIUtils.showToast("您已经在群聊中");
                    } else {
                        List<String> accounts = new ArrayList<String>(1);
                        accounts.add(UserCache.getAccount());
                        NimTeamSDK.addMembers(teamId, accounts, new RequestCallback<Void>() {
                            @Override
                            public void onSuccess(Void param) {
                                //跳转到群聊
                                Intent intent = new Intent(ScanActivity.this, SessionActivity.class);
                                intent.putExtra(SessionActivity.SESSION_ACCOUNT, teamId);
                                intent.putExtra(SessionActivity.SESSION_TYPE, SessionTypeEnum.Team);
                                startActivity(intent);
                                finish();
                            }

                            @Override
                            public void onFailed(int code) {
                                UIUtils.showToast("加群失败" + code);
                            }

                            @Override
                            public void onException(Throwable exception) {
                                UIUtils.showToast("加群失败");
                                exception.printStackTrace();
                            }
                        });
                    }
                }

                @Override
                public void onFailed(int code) {
                    UIUtils.showToast("查不到群" + code);
                }

                @Override
                public void onException(Throwable exception) {
                    UIUtils.showToast("查不到群");
                    exception.printStackTrace();
                }
            });
        }
    }

    @Override
    public void onScanQRCodeOpenCameraError() {
        UIUtils.showToast("打开相机出错");
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {//返回多张照片
            if (data != null) {
                //是否发送原图
//                boolean isOrig = data.getBooleanExtra(ImagePreviewActivity.ISORIGIN, false);
                final ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);
                if (images != null && images.size() > 0) {
                    //取第一张照片
                    ThreadPoolFactory.getNormalPool().execute(new Runnable() {
                        @Override
                        public void run() {
                            String result = QRCodeDecoder.syncDecodeQRCode(images.get(0).path);
                            if (TextUtils.isEmpty(result)) {
                                UIUtils.showToast("扫描失败");
                            } else {
                                handleResult(result);
                            }
                        }
                    });
                }
            }
        }
    }
}

35:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\SearchUserActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.MenuItem;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.KeyBoardUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 搜索用户（本地、网上）
 */
public class SearchUserActivity extends BaseActivity {

    private NimUserInfo mUser;

    public static final String SEARCH_TYPE = "search_type";
    public boolean isSearchUserLocal = SEARCH_USER_LOCAL;
    public static final boolean SEARCH_USER_LOCAL = true;
    public static final boolean SEARCH_USER_REMOTE = false;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.etSearch)
    EditText mEtSearch;

    @InjectView(R.id.rlNoResultTip)
    RelativeLayout mRlNoResultTip;
    @InjectView(R.id.llSearch)
    LinearLayout mLlSearch;
    @InjectView(R.id.tvMsg)
    TextView mTvMsg;

    @Override
    public void init() {
        isSearchUserLocal = getIntent().getBooleanExtra(SEARCH_TYPE, SEARCH_USER_LOCAL);
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_search_user);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public void initListener() {
        mEtSearch.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                mRlNoResultTip.setVisibility(View.GONE);
                if (TextUtils.isEmpty(mEtSearch.getText().toString().trim())) {
                    mLlSearch.setVisibility(View.GONE);
                } else {
                    mLlSearch.setVisibility(View.VISIBLE);
                    mTvMsg.setText(s);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

        //监听键盘回车或搜索
        mEtSearch.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_SEND || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
                    if (TextUtils.isEmpty(mEtSearch.getText().toString().trim())) {
                        KeyBoardUtils.closeKeybord(mEtSearch, SearchUserActivity.this);
                    } else {
                        doSearch();
                    }
                    return true;
                }
                return false;
            }
        });

        mLlSearch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doSearch();
            }
        });
    }

    private void doSearch() {
        showWaitingDialog("请稍等");
        String account = mEtSearch.getText().toString().trim();
        if (isSearchUserLocal) {
            mUser = NimUserInfoSDK.getUser(account);
            searchDone();
        } else {
            NimUserInfoSDK.getUserInfoFromServer(account, new RequestCallback<List<NimUserInfo>>() {
                @Override
                public void onSuccess(List<NimUserInfo> param) {
                    if (param != null && param.size() > 0) {
                        mUser = param.get(0);
                        searchDone();
                    }
                }

                @Override
                public void onFailed(int code) {
                    UIUtils.showToast("搜索失败" + code);
                    hideWaitingDialog();
                }

                @Override
                public void onException(Throwable exception) {
                    exception.printStackTrace();
                    hideWaitingDialog();
                }
            });
        }
    }

    private void searchDone() {
        hideWaitingDialog();
        if (mUser == null) {
            mRlNoResultTip.setVisibility(View.VISIBLE);
        } else {
            mRlNoResultTip.setVisibility(View.GONE);
            //跳转到用户信息界面
            Intent intent = new Intent(this, UserInfoActivity.class);
            intent.putExtra("account", mUser.getAccount());
            startActivity(intent);
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mEtSearch.setVisibility(View.VISIBLE);
        mEtSearch.setHintTextColor(UIUtils.getColor(R.color.gray2));
        mEtSearch.setTextColor(UIUtils.getColor(R.color.white));
    }

}

36:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\SessionActivity.java
package com.lqr.wechat.activity;

import android.Manifest;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.view.ViewPager;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.lqr.emoji.EmoticonPickerView;
import com.lqr.emoji.EmotionKeyboard;
import com.lqr.emoji.IEmoticonSelectedListener;
import com.lqr.imagepicker.ImagePicker;
import com.lqr.imagepicker.bean.ImageItem;
import com.lqr.imagepicker.ui.ImagePreviewActivity;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.videorecordview.LQRVideoRecordView;
import com.lqr.wechat.R;
import com.lqr.wechat.adapter.FuncPagerAdapter;
import com.lqr.wechat.adapter.SessionAdapter;
import com.lqr.wechat.factory.ThreadPoolFactory;
import com.lqr.wechat.fragment.BaseFragment;
import com.lqr.wechat.fragment.Func1Fragment;
import com.lqr.wechat.fragment.Func2Fragment;
import com.lqr.wechat.model.Contact;
import com.lqr.wechat.nimsdk.NimHistorySDK;
import com.lqr.wechat.nimsdk.NimMessageSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.custom.StickerAttachment;
import com.lqr.wechat.nimsdk.helper.SendImageHelper;
import com.lqr.wechat.utils.KeyBoardUtils;
import com.lqr.wechat.utils.LogUtils;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.DotView;
import com.lqr.wechat.view.LQRRecordProgress;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.ResponseCode;
import com.netease.nimlib.sdk.media.record.AudioRecorder;
import com.netease.nimlib.sdk.media.record.IAudioRecordCallback;
import com.netease.nimlib.sdk.media.record.RecordType;
import com.netease.nimlib.sdk.msg.MessageBuilder;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.AttachmentProgress;
import com.netease.nimlib.sdk.msg.model.IMMessage;
import com.netease.nimlib.sdk.msg.model.QueryDirectionEnum;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import butterknife.OnTouch;
import cn.bingoogolapple.refreshlayout.BGANormalRefreshViewHolder;
import cn.bingoogolapple.refreshlayout.BGARefreshLayout;
import cn.bingoogolapple.refreshlayout.BGARefreshViewHolder;
import kr.co.namee.permissiongen.PermissionFail;
import kr.co.namee.permissiongen.PermissionGen;
import kr.co.namee.permissiongen.PermissionSuccess;

/**
 * @创建者 CSDN_LQR
 * @描述 聊天界面
 * <p>
 * 界面加载时将从本地获取历史消息，下拉加载 时优先从本地获取，从服务器拉取历史消息次之
 */
public class SessionActivity extends BaseActivity implements IEmoticonSelectedListener, BGARefreshLayout.BGARefreshLayoutDelegate, IAudioRecordCallback, LQRVideoRecordView.OnRecordStausChangeListener {

    public static final int IMAGE_PICKER = 100;

    public static final String SESSION_ACCOUNT = "account";
    public static final String SESSION_TYPE = "type";

    //当前会话信息
    public String mSessionId;//单聊的联系人的id，群聊是群id
    private Contact mContact;
    private Team mTeam;

    public SessionTypeEnum mSessionType = SessionTypeEnum.P2P;
    //消息列表及监听
    private Observer<IMMessage> mMsgStatusObserver;
    private Observer<List<IMMessage>> mIncomingMessageObserver;
    private Observer<AttachmentProgress> mAttachmentProgressObserver;
    private List<IMMessage> mMessages = new ArrayList<>();
    private SessionAdapter mAdapter;

    private Runnable mCvMessageScrollToBottomTask = new Runnable() {
        @Override
        public void run() {
            mCvMessage.moveToPosition(mMessages.size() - 1);
        }
    };
    //获取历史消息
    private IMMessage mAnchor;
    private QueryDirectionEnum mDirection = QueryDirectionEnum.QUERY_OLD;//查询以前的消息
    private static final int LOAD_MESSAGE_COUNT = 20;
    private boolean mFirstLoad = true;

    private boolean mRemote = false;
    //底部控件
    private FuncPagerAdapter mBottomFucAdapter;
    private List<BaseFragment> mFragments;

    private EmotionKeyboard mEmotionKeyboard;
    //录音
    private AudioRecorder mAudioRecorderHelper;
    private boolean mStartRecord;
    private boolean mCanclled;

    private boolean mTouched;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.refreshLayout)
    BGARefreshLayout mRefreshLayout;

    @InjectView(R.id.cvMessage)
    LQRRecyclerView mCvMessage;

    @InjectView(R.id.llButtomFunc)
    LinearLayout mLlButtomFunc;
    @InjectView(R.id.ivAudio)
    ImageView mIvAudio;
    @InjectView(R.id.etContent)
    EditText mEtContent;
    @InjectView(R.id.btnAudio)
    Button mBtnAudio;
    @InjectView(R.id.ivEmo)
    ImageView mIvEmo;
    @InjectView(R.id.ivAdd)
    ImageView mIvAdd;

    @InjectView(R.id.btnSend)
    Button mBtnSend;
    @InjectView(R.id.flBottom)
    FrameLayout mFlBottom;
    @InjectView(R.id.epv)
    EmoticonPickerView mEpv;
    @InjectView(R.id.vpFunc)
    ViewPager mVpFunc;

    @InjectView(R.id.dv)
    DotView mDv;
    @InjectView(R.id.flPlayAudio)
    FrameLayout mFlPlayAudio;
    @InjectView(R.id.cTimer)
    Chronometer mCTimer;

    @InjectView(R.id.tvTimerTip)
    TextView mTvTimerTip;
    @InjectView(R.id.llPlayVideo)
    LinearLayout mLlPlayVideo;
    @InjectView(R.id.vrvVideo)
    LQRVideoRecordView mVrvVideo;
    @InjectView(R.id.tvTipOne)
    TextView mTvTipOne;
    @InjectView(R.id.tvTipTwo)
    TextView mTvTipTwo;
    @InjectView(R.id.rp)
    LQRRecordProgress mRp;
    @InjectView(R.id.btnVideo)
    Button mBtnVideo;
    private Observer<TeamMember> memberRemoveObserver;
    private Observer<List<TeamMember>> memberUpdateObserver;

    @OnTouch(R.id.cvMessage)
    public boolean cvTouch() {
        if (mEtContent.hasFocus()) {
            closeKeyBoardAndLoseFocus();
            return true;
        } else if (mFlBottom.getVisibility() == View.VISIBLE) {
            mFlBottom.setVisibility(View.GONE);
            closeKeyBoardAndLoseFocus();
            return true;
        }
        return false;
    }

    @OnClick({R.id.ivAudio, R.id.btnSend})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.ivAudio:
                toggleAudioButtonVisibility();
                break;
            case R.id.btnSend:
                sendTextMsg();
                break;
        }
    }

    @Override
    public void init() {
        Intent intent = getIntent();
        SessionTypeEnum sessionType = (SessionTypeEnum) intent.getSerializableExtra(SESSION_TYPE);
        if (sessionType != null) {
            mSessionType = sessionType;
        }

        mSessionId = intent.getStringExtra(SESSION_ACCOUNT);
        if (TextUtils.isEmpty(mSessionId)) {
            interrupt();
            return;
        }

        registerAllObserver();
        requestPermission();
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_session);
        ButterKnife.inject(this);
        initToolbar();
        initEmotionPickerView();
        initEmotionKeyboard();
        initRefreshLayout();
        initBottomFunc();

        //解决RecyclerView局部刷新时闪烁
//        ((DefaultItemAnimator) mCvMessage.getItemAnimator()).setSupportsChangeAnimations(false);

        closeKeyBoardAndLoseFocus();
    }

    @Override
    public void initData() {
        //获取消息列表(历史记录)
        mMessages.clear();
        setAdapter();
        loadHistoryMsgFromLocal();

        if (mSessionType == SessionTypeEnum.P2P) {
            mContact = new Contact(mSessionId);
            //设置标题处的好友名称（备注/昵称）
            getSupportActionBar().setTitle(TextUtils.isEmpty(mContact.getAlias()) ? mContact.getName() : mContact.getAlias());
        } else {
            //设置标题处的群组名称
            ThreadPoolFactory.getNormalPool().execute(new Runnable() {
                @Override
                public void run() {
                    mTeam = NimTeamSDK.queryTeamBlock(mSessionId);
                    UIUtils.postTaskSafely(new Runnable() {
                        @Override
                        public void run() {
                            getSupportActionBar().setTitle(TextUtils.isEmpty(mTeam.getName()) ? "群聊(" + mTeam.getMemberCount() + ")" : mTeam.getName());
                        }
                    });
                }
            });

        }
    }


    @Override
    public void initListener() {
        //监听文本输入框，有值则显示发送按钮，无值则隐藏发送按钮
        mEtContent.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (TextUtils.isEmpty(mEtContent.getText().toString())) {
                    mIvAdd.setVisibility(View.VISIBLE);
                    mBtnSend.setVisibility(View.GONE);
                } else {
                    mIvAdd.setVisibility(View.GONE);
                    mBtnSend.setVisibility(View.VISIBLE);
                }
            }
        });

        //监听文本输入框的焦点获取，当获取焦点显示软键盘时，将消息列表滚动到最后一行
        mEtContent.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    cvScrollToBottom();
                }
            }
        });

        //监听ViewPager的滑动，改变底部小圆点的样式
        mVpFunc.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                //改变小圆点位置
                mDv.changeCurrentPage(position);
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });

        //录音按钮的触摸事件
//        "按住 说话"
//        "松开 结束"
//        "松开手指，取消发送"
        mBtnAudio.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        mTouched = true;
                        initAudioRecord();
                        onStartAudioRecord();
                        break;
                    case MotionEvent.ACTION_MOVE:
                        mTouched = false;
                        cancelAudioRecord(isCancelled(v, event));
                        break;
                    case MotionEvent.ACTION_UP:
                        mTouched = false;
                        hidePlayAudio();
                        onEndAudioRecord(isCancelled(v, event));
                        break;
                    case MotionEvent.ACTION_CANCEL:
                        mTouched = false;
                        hidePlayAudio();
                        onEndAudioRecord(isCancelled(v, event));
                        break;
                }
                return false;
            }
        });

        //视频按钮的触摸事件
        mBtnVideo.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        mRp.start();
                        mRp.setProgressColor(Color.parseColor("#1AAD19"));
                        mTvTipOne.setVisibility(View.VISIBLE);
                        mTvTipTwo.setVisibility(View.GONE);
                        //开始录制
                        mVrvVideo.record(SessionActivity.this);
                        break;
                    case MotionEvent.ACTION_UP:
                        mRp.stop();
                        mTvTipOne.setVisibility(View.GONE);
                        mTvTipTwo.setVisibility(View.GONE);
                        //判断时间
                        if (mVrvVideo.getTimeCount() > 3) {
                            if (!isCancelled(v, event)) {
                                onRecrodFinish();
                            } else {
                                if (mVrvVideo.getVecordFile() != null)
                                    mVrvVideo.getVecordFile().delete();
                            }
                        } else {
                            if (!isCancelled(v, event)) {
                                Toast.makeText(getApplicationContext(), "视频时长太短", Toast.LENGTH_SHORT).show();
                            } else {
                                if (mVrvVideo.getVecordFile() != null)
                                    mVrvVideo.getVecordFile().delete();
                            }
                        }
                        resetVideoRecord();
                        break;
                    case MotionEvent.ACTION_MOVE:
                        if (isCancelled(v, event)) {
                            mTvTipOne.setVisibility(View.GONE);
                            mTvTipTwo.setVisibility(View.VISIBLE);
                            mRp.setProgressColor(Color.parseColor("#FF1493"));
                        } else {
                            mTvTipOne.setVisibility(View.VISIBLE);
                            mTvTipTwo.setVisibility(View.GONE);
                            mRp.setProgressColor(Color.parseColor("#1AAD19"));
                        }
                        break;
                }
                return true;
            }
        });
    }

    @Override
    public void onResume() {
        if (mSessionType == SessionTypeEnum.Team) {
            mTeam = NimTeamSDK.queryTeamBlock(mSessionId);
            getSupportActionBar().setTitle(TextUtils.isEmpty(mTeam.getName()) ? "群聊(" + mTeam.getMemberCount() + ")" : mTeam.getName());
        }
        setAdapter();
        super.onResume();
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_info, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                break;
            case R.id.itemFriendInfo:
                Intent intent;
                if (mSessionType == SessionTypeEnum.P2P) {
                    intent = new Intent(SessionActivity.this, UserInfoActivity.class);
                    intent.putExtra(UserInfoActivity.USER_INFO_ACCOUNT, mSessionId);
                    startActivity(intent);
                } else {
                    intent = new Intent(SessionActivity.this, TeamCheatInfoActivity.class);
                    intent.putExtra(TeamCheatInfoActivity.GROUP_CHEAT_INFO_TEAMID, mSessionId);
                    startActivityForResult(intent, 100);
                }
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {//返回多张照片
            if (data != null) {
                //是否发送原图
                boolean isOrig = data.getBooleanExtra(ImagePreviewActivity.ISORIGIN, false);
                ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);

                for (ImageItem imageItem : images) {
                    new SendImageHelper.SendImageTask(SessionActivity.this, isOrig, imageItem, new SendImageHelper.Callback() {
                        @Override
                        public void sendImage(File file, boolean isOrig) {
                            sendImagesMsg(file);
                        }
                    }).execute();
                }
            }
        } else if (resultCode == TeamCheatInfoActivity.RESP_QUIT_TEAM || resultCode == TeamCheatInfoActivity.RESP_CHEAT_SINGLE) {
            finish();
        } else if (resultCode == TeamCheatInfoActivity.RESP_CLEAR_CHATTING_RECORD_HISTORY) {
            mAdapter.clearData();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        //销毁消息状态监听和消息接收监听
        unRegisterAllObserver();
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void initRefreshLayout() {
        // 为BGARefreshLayout 设置代理
        mRefreshLayout.setDelegate(this);
        // 设置下拉刷新和上拉加载更多的风格     参数1：应用程序上下文，参数2：是否具有上拉加载更多功能
        BGARefreshViewHolder refreshViewHolder = new BGANormalRefreshViewHolder(this, false);
        // 设置下拉刷新和上拉加载更多的风格
        mRefreshLayout.setRefreshViewHolder(refreshViewHolder);
    }

    /**
     * 初始化底部功能区
     */
    private void initBottomFunc() {
        //底部功能区
        mFragments = new ArrayList<>();
        Func1Fragment func1Fragment1 = new Func1Fragment();
        Func2Fragment func1Fragment2 = new Func2Fragment();
        mFragments.add(func1Fragment1);
        mFragments.add(func1Fragment2);
        mBottomFucAdapter = new FuncPagerAdapter(getSupportFragmentManager(), mFragments);
        mVpFunc.setAdapter(mBottomFucAdapter);

        //初始化圆点的个数及当前被选中的位置
        mDv.initData(mFragments.size(), 0);
    }

    public void setAdapter() {
        if (mAdapter == null) {
            mAdapter = new SessionAdapter(this, mMessages);
            mCvMessage.setAdapter(mAdapter);
        } else {
            mAdapter.notifyDataSetChanged();
        }
    }

    private void registerAllObserver() {
        observeMsgStatus();
        observeReceiveMessage();
        observerAttachmentProgressObserver();
        if (mSessionType == SessionTypeEnum.Team) {
            observeMemberRemove();
            observeMemberUpdate();
        }
    }

    private void unRegisterAllObserver() {
        NimMessageSDK.observeMsgStatus(mMsgStatusObserver, false);
        NimMessageSDK.observeReceiveMessage(mIncomingMessageObserver, false);
        NimMessageSDK.observeAttachProgress(mAttachmentProgressObserver, false);
        if (mSessionType == SessionTypeEnum.Team) {
            NimTeamSDK.observeMemberRemove(memberRemoveObserver, false);
            NimTeamSDK.observeMemberUpdate(memberUpdateObserver, false);
        }
    }

    /**
     * 注册消息状态监听
     */
    private void observeMsgStatus() {
        mMsgStatusObserver = new Observer<IMMessage>() {
            @Override
            public void onEvent(IMMessage imMessage) {
                if (NimMessageSDK.isCurrentSessionMessage(imMessage, mSessionId, mSessionType)) {
                    onMessageStatusChange(imMessage);
                }
            }
        };
        NimMessageSDK.observeMsgStatus(mMsgStatusObserver, true);
    }

    /**
     * 注册消息接收监听
     */
    private void observeReceiveMessage() {
        mIncomingMessageObserver = new Observer<List<IMMessage>>() {
            @Override
            public void onEvent(List<IMMessage> imMessages) {
                if (imMessages == null || imMessages.isEmpty()) {
                    return;
                }

                //筛选出当前会话的消息
                List<IMMessage> currentMsgList = new ArrayList<>();
                for (IMMessage msg : imMessages) {
                    if (NimMessageSDK.isCurrentSessionMessage(msg, mSessionId, mSessionType)) {
                        currentMsgList.add(msg);
                    }
                }

                //获取未插入新消息前的最后一个可见位置
                int theLastOnePosition = mAdapter.getData().size() - 1;
                mAdapter.addMoreData(currentMsgList);

                //如果当前列表处于最新消息，则自动滚动到底部
                int lastVisibleItemPosition = ((GridLayoutManager) mCvMessage.getLayoutManager()).findLastVisibleItemPosition();
                if (lastVisibleItemPosition == theLastOnePosition)
                    cvScrollToBottom();

            }
        };
        NimMessageSDK.observeReceiveMessage(mIncomingMessageObserver, true);
    }

    /**
     * 消息附件上传/下载进度观察者
     */
    private void observerAttachmentProgressObserver() {
        mAttachmentProgressObserver = new Observer<AttachmentProgress>() {
            @Override
            public void onEvent(AttachmentProgress progress) {
                onAttachmentProgressChange(progress);
            }
        };
        NimMessageSDK.observeAttachProgress(mAttachmentProgressObserver, true);
    }

    private void observeMemberUpdate() {
        memberUpdateObserver = new Observer<List<TeamMember>>() {
            @Override
            public void onEvent(List<TeamMember> teamMembers) {
                onResume();
            }
        };
        NimTeamSDK.observeMemberUpdate(memberUpdateObserver, true);
    }

    private void observeMemberRemove() {
        memberRemoveObserver = new Observer<TeamMember>() {
            @Override
            public void onEvent(TeamMember teamMember) {
                onResume();
            }
        };
        NimTeamSDK.observeMemberRemove(memberRemoveObserver, true);
    }

    private void onMessageStatusChange(IMMessage message) {
        int index = getItemIndex(message.getUuid());
        if (index >= 0 && index < mMessages.size()) {
            IMMessage msg = mMessages.get(index);
            msg.setStatus(message.getStatus());
            msg.setAttachStatus(message.getAttachStatus());
            mAdapter.notifyItemChanged(index);
        }
    }

    private void onAttachmentProgressChange(AttachmentProgress progress) {
        int index = getItemIndex(progress.getUuid());
        if (index >= 0 && index < mMessages.size()) {
            IMMessage item = mMessages.get(index);
            LogUtils.sf("Transferred = " + progress.getTransferred());
            LogUtils.sf("Total = " + progress.getTotal());
            float value = (float) progress.getTransferred() / (float) progress.getTotal();
            mAdapter.putProgress(item, value * 100);
            mAdapter.notifyItemChanged(index);
        }
    }

    private int getItemIndex(String uuid) {
        for (int i = 0; i < mMessages.size(); i++) {
            IMMessage message = mMessages.get(i);
            if (TextUtils.equals(message.getUuid(), uuid)) {
                return i;
            }
        }
        return -1;
    }


    /**
     * 获取锚点
     */
    private IMMessage getAnchor() {
        if (mMessages.size() == 0) {
            return mAnchor == null ? MessageBuilder.createEmptyMessage(mSessionId, mSessionType, 0) : mAnchor;
        } else {
            int index = (mDirection == QueryDirectionEnum.QUERY_NEW ? mMessages.size() - 1 : 0);
            return mMessages.get(index);
        }
    }

    /**
     * 从本地获取历史消息
     */
    private void loadHistoryMsgFromLocal() {
        LogUtils.sf("从本地获取历史消息");
        mDirection = QueryDirectionEnum.QUERY_OLD;
        mRemote = false;
        NimHistorySDK.queryMessageListEx(getAnchor(), mDirection, LOAD_MESSAGE_COUNT, true).setCallback(loadFromRemoteCallback);
    }

    /**
     * 从服务器获取最新的历史消息
     */
//    private void loadNewMsgFromServer() {
//        LogUtils.sf("从服务器获取最新的历史消息");
//        mDirection = QueryDirectionEnum.QUERY_NEW;
//        mRemote = true;
//        NimHistorySDK.pullMessageHistoryEx(getAnchor(), new DateTime(2017,1,5,23,59,59).getMillis(), LOAD_MESSAGE_COUNT, mDirection, true).setCallback(loadFromRemoteCallback);
//    }

    /**
     * 从服务器获取旧的历史消息
     */
    private void loadHistoryMsgFromRemote() {
        LogUtils.sf("从服务器获取旧的历史消息");
        mDirection = QueryDirectionEnum.QUERY_OLD;
        mRemote = true;
        NimHistorySDK.pullMessageHistory(getAnchor(), LOAD_MESSAGE_COUNT, true).setCallback(loadFromRemoteCallback);
    }

    private boolean mIsFirstLoadHistory = true;

    RequestCallback<List<IMMessage>> loadFromRemoteCallback = new RequestCallbackWrapper<List<IMMessage>>() {
        @Override
        public void onResult(int code, List<IMMessage> result, Throwable exception) {
            if (code != ResponseCode.RES_SUCCESS || exception != null) {
                return;
            }

            if (result == null)
                return;

            //是第一次加载本地历史消息时，不需要从服务器加载数据
            if (mIsFirstLoadHistory) {
                mIsFirstLoadHistory = false;
            }
            //如果从本地获取消息已经没有了，则从服务器获取消息
            else if (result.size() == 0 && !mRemote) {
                loadHistoryMsgFromRemote();
                return;
            }

            onMessageLoaded(result);
        }
    };


    /**
     * 历史消息加载处理
     *
     * @param messages
     */
    private void onMessageLoaded(List<IMMessage> messages) {
        if (mRemote) {
            Collections.reverse(messages);
        }

        if (mFirstLoad && mMessages.size() > 0) {
            // 在第一次加载的过程中又收到了新消息，做一下去重
            for (IMMessage message : messages) {
                for (IMMessage item : mMessages) {
                    if (item.isTheSame(message)) {
                        mAdapter.removeItem(item);
                        break;
                    }
                }
            }
        }

        if (mFirstLoad && mAnchor != null) {
            mAdapter.addLastItem(mAnchor);
        }

        if (mDirection == QueryDirectionEnum.QUERY_NEW) {
            mAdapter.addMoreData(messages);
        } else {
            mAdapter.addNewData(messages);
        }

        if (mFirstLoad) {
            cvScrollToBottom();
        } else {
            if (messages.size() > 0) {
                mCvMessage.moveToPosition(messages.size() - 1);
            }
        }

        mRefreshLayout.endRefreshing();

        mFirstLoad = false;
    }

    /**
     * 发送文字消息
     */
    public void sendTextMsg() {
        String content = mEtContent.getText().toString();
        if (!TextUtils.isEmpty(content)) {
            IMMessage message = NimMessageSDK.createTextMessage(mSessionId, mSessionType, content);
            sendMsg(message);
            mEtContent.setText("");
        }
    }

    /**
     * 发送贴图消息
     *
     * @param stickerAttachment
     */
    private void sendStickerMsg(StickerAttachment stickerAttachment) {
        IMMessage stickerMessage = NimMessageSDK.createCustomMessage(mSessionId, mSessionType, "贴图消息", stickerAttachment);
        sendMsg(stickerMessage);
    }

    /**
     * 发送图片消息
     */
    private void sendImagesMsg(File image) {
        IMMessage message = NimMessageSDK.createImageMessage(mSessionId, mSessionType, image.getAbsoluteFile(), image.getName());
        sendMsg(message);
    }

    /**
     * 发送语音消息
     */
    private void sendAudioMsg(File audioFile, long audioLength) {
        IMMessage msg = NimMessageSDK.createAudioMessage(mSessionId, mSessionType, audioFile, audioLength);
        sendMsg(msg);
    }

    /**
     * 发送视频消息
     */
    private void sendVidoMsg(File videoFile, String displayName) {
        IMMessage msg = NimMessageSDK.createVideoMessage(mSessionId, mSessionType, videoFile, displayName);
        sendMsg(msg);
    }


    /**
     * 发送消息的统一步骤
     */
    private void sendMsg(IMMessage message) {
        NimMessageSDK.sendMessage(message);
        mAdapter.addLastItem(message);
        mAdapter.notifyDataSetChanged();
        cvScrollToBottom();
    }

    /**
     * 获取焦点，并打开键盘
     */
    private void openKeyBoardAndGetFocus() {
        mEtContent.requestFocus();
        KeyBoardUtils.openKeybord(mEtContent, this);
    }

    /**
     * 失去焦点，并关闭键盘
     */
    private void closeKeyBoardAndLoseFocus() {
        mEtContent.clearFocus();
        KeyBoardUtils.closeKeybord(mEtContent, this);
        mFlBottom.setVisibility(View.GONE);
    }

    /**
     * 消息列表滚动至最后
     */
    private void cvScrollToBottom() {
        UIUtils.postTaskDelay(mCvMessageScrollToBottomTask, 100);
    }

    /*================== 表情、贴图相关 begin ==================*/

    /**
     * 设置表情、贴图控件
     */
    private void initEmotionPickerView() {
        mEpv.setWithSticker(true);
        mEpv.show(this);
        mEpv.attachEditText(mEtContent);
    }

    /**
     * 初始化表情软键盘
     */
    private void initEmotionKeyboard() {
        //1、创建EmotionKeyboard对象
        mEmotionKeyboard = EmotionKeyboard.with(this);
        //2、绑定输入框控件
        mEmotionKeyboard.bindToEditText(mEtContent);
        //3、绑定输入框上面的消息列表控件（这里用的是RecyclerView，其他控件也可以，注意该控件是会影响输入框位置的控件）
        mEmotionKeyboard.bindToContent(mCvMessage);
        //4、绑定输入框下面的底部区域（这里是把表情区和功能区共放在FrameLayout下，所以绑定的控件是FrameLayout）
        mEmotionKeyboard.setEmotionView(mFlBottom);
        //5、绑定表情按钮（可以绑定多个，如微信就有2个，一个是表情按钮，一个是功能按钮）
        mEmotionKeyboard.bindToEmotionButton(mIvEmo, mIvAdd);
        //6、当在第5步中绑定了多个EmotionButton时，这里的回调监听的view就有用了，注意是为了判断是否要自己来控制底部的显隐，还是交给EmotionKeyboard控制
        mEmotionKeyboard.setOnEmotionButtonOnClickListener(new EmotionKeyboard.OnEmotionButtonOnClickListener() {
            @Override
            public boolean onEmotionButtonOnClickListener(View view) {
                if (mBtnAudio.getVisibility() == View.VISIBLE) {
                    hideBtnAudio();
                }
                //输入框底部显示时
                if (mFlBottom.getVisibility() == View.VISIBLE) {
                    //表情控件显示而点击的按钮是ivAdd时，拦截事件，隐藏表情控件，显示功能区
                    if (mEpv.getVisibility() == View.VISIBLE && view.getId() == R.id.ivAdd) {
                        mEpv.setVisibility(View.GONE);
                        mLlButtomFunc.setVisibility(View.VISIBLE);
                        return true;
                        //功能区显示而点击的按钮是ivEmo时，拦截事件，隐藏功能区，显示表情控件
                    } else if (mLlButtomFunc.getVisibility() == View.VISIBLE && view.getId() == R.id.ivEmo) {
                        mEpv.setVisibility(View.VISIBLE);
                        mLlButtomFunc.setVisibility(View.GONE);
                        return true;
                    }
                } else {
                    //点击ivEmo，显示表情控件
                    if (view.getId() == R.id.ivEmo) {
                        mEpv.setVisibility(View.VISIBLE);
                        mLlButtomFunc.setVisibility(View.GONE);
                        //点击ivAdd，显示功能区
                    } else {
                        mEpv.setVisibility(View.GONE);
                        mLlButtomFunc.setVisibility(View.VISIBLE);
                    }
                }
                cvScrollToBottom();
                return false;
            }
        });
    }

    @Override
    public void onEmojiSelected(String s) {
    }

    @Override
    public void onStickerSelected(String catalog, String chartlet) {
        StickerAttachment stickerAttachment = new StickerAttachment(catalog, chartlet);
        sendStickerMsg(stickerAttachment);
    }

    /*================== 表情、贴图相关 end ==================*/
    /*================== 录制音频相关 begin ==================*/

    /**
     * 切换语音按钮显隐
     */
    public void toggleAudioButtonVisibility() {
        if (mBtnAudio.getVisibility() == View.VISIBLE) {
            hideBtnAudio();
        } else {
            showBtnAudio();
        }
        //修改图标
        mIvAudio.setImageResource(mBtnAudio.getVisibility() == View.VISIBLE ? R.mipmap.ic_cheat_keyboard : R.mipmap.ic_cheat_voice);
    }

    private void showBtnAudio() {
        mBtnAudio.setVisibility(View.VISIBLE);
        mEtContent.setVisibility(View.GONE);
        mIvEmo.setVisibility(View.GONE);
        //关闭键盘
        closeKeyBoardAndLoseFocus();
    }

    private void hideBtnAudio() {
        mBtnAudio.setVisibility(View.GONE);
        mEtContent.setVisibility(View.VISIBLE);
        mIvEmo.setVisibility(View.VISIBLE);
        //打开键盘
        openKeyBoardAndGetFocus();
    }

    private void showPlayAudio() {
        mBtnAudio.setText("松开 结束");
        mBtnAudio.setBackgroundResource(R.drawable.shape_btn_voice_press);
    }

    private void hidePlayAudio() {
        mBtnAudio.setText("按住 说话");
        mBtnAudio.setBackgroundResource(R.drawable.shape_btn_voice_normal);
        mFlPlayAudio.setVisibility(View.GONE);
    }

    /**
     * 正在进行语音录制和取消语音录制，界面展示
     */
    private void updateTimerTip(boolean cancel) {
        if (cancel) {
            mTvTimerTip.setText("松开手指，取消发送");
            mTvTimerTip.setBackgroundResource(R.drawable.shape_bottom_corner_solid_red);
            mBtnAudio.setText("松开手指，取消发送");
        } else {
            mTvTimerTip.setText("手指上滑，取消发送");
            mTvTimerTip.setBackgroundResource(0);
            mBtnAudio.setText("松开 结束");
        }
    }

    /**
     * 开始语音录制动画
     */
    private void startAudioRecordAnim() {
        mFlPlayAudio.setVisibility(View.VISIBLE);
        mCTimer.setBase(SystemClock.elapsedRealtime());//时间复位
        mCTimer.start();
    }

    /**
     * 结束语音录制动画
     */
    private void stopAudiioRecordAnim() {
        mFlPlayAudio.setVisibility(View.GONE);
        mCTimer.stop();
        mCTimer.setBase(SystemClock.elapsedRealtime());//时间复位
    }

    private static boolean isCancelled(View view, MotionEvent event) {
        int[] location = new int[2];
        view.getLocationOnScreen(location);

        if (event.getRawX() < location[0] || event.getRawX() > location[0] + view.getWidth()
                || event.getRawY() < location[1] - 40) {
            return true;
        }

        return false;
    }

    /**
     * 初始化AudioRecord
     */
    private void initAudioRecord() {
        if (mAudioRecorderHelper == null)
            mAudioRecorderHelper = new AudioRecorder(this, RecordType.AAC, AudioRecorder.DEFAULT_MAX_AUDIO_RECORD_TIME_SECOND, this);
    }

    /**
     * 开始语音录制
     */
    private void onStartAudioRecord() {
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mStartRecord = mAudioRecorderHelper.startRecord();
        mCanclled = false;
        if (mStartRecord == false) {
            UIUtils.showToast("初始化录音失败");
            return;
        }

        if (!mTouched) {
            return;
        }

        showPlayAudio();
        updateTimerTip(false);
        startAudioRecordAnim();
    }

    /**
     * 结束语音录制
     */
    private void onEndAudioRecord(boolean cancel) {
        getWindow().setFlags(0, WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        mAudioRecorderHelper.completeRecord(cancel);
        hidePlayAudio();
        stopAudiioRecordAnim();
    }

    /**
     * 取消语音录制
     */
    private void cancelAudioRecord(boolean cancel) {
        if (!mStartRecord) {
            return;
        }

        if (mCanclled == cancel) {
            return;
        }

        mCanclled = cancel;
        updateTimerTip(cancel);
    }

    @Override
    public void onRecordReady() {

    }

    @Override
    public void onRecordStart(File audioFile, RecordType recordType) {

    }

    @Override
    public void onRecordSuccess(File audioFile, long audioLength, RecordType recordType) {
        sendAudioMsg(audioFile, audioLength);
    }

    @Override
    public void onRecordFail() {

    }

    @Override
    public void onRecordCancel() {

    }

    @Override
    public void onRecordReachedMaxTime(final int maxTime) {
        stopAudiioRecordAnim();
        showMaterialDialog("", "录音达到最大时间，是否发送？", "发送", "取消", new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mAudioRecorderHelper.handleEndRecord(true, maxTime);
                hideMaterialDialog();
            }
        }, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                hideMaterialDialog();
            }
        });
    }

    public boolean isRecording() {
        return mAudioRecorderHelper != null && mAudioRecorderHelper.isRecording();
    }

    public void requestPermission() {
        PermissionGen.with(this)
                .addRequestCode(100)
                .permissions(
                        Manifest.permission.CAMERA,
                        Manifest.permission.RECORD_AUDIO)
                .request();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions,
                                           int[] grantResults) {
        PermissionGen.onRequestPermissionsResult(this, requestCode, permissions, grantResults);
    }

    @PermissionSuccess(requestCode = 100)
    public void doSomething() {
//        UIUtils.showToast("获取录音权限成功，可以正常发送语音");
    }

    @PermissionFail(requestCode = 100)
    public void doFailSomething() {
        UIUtils.showToast("获取录音权限失败，可能无法发送语音");
    }

    /*================== 录制音频相关 end ==================*/
    /*================== 录制视频相关 begin ==================*/

    @Override
    public void onBackPressed() {
        if (mIsPlayVideoShown) {
            hidePlayVideo();
            return;
        }
        super.onBackPressed();
    }

    private boolean mIsPlayVideoShown = false;//标记小视频视图是否显示

    public void showPlayVideo() {
        mLlPlayVideo.setVisibility(View.VISIBLE);
        initVideoRecord();
        mIsPlayVideoShown = true;
    }

    public void hidePlayVideo() {
        mLlPlayVideo.setVisibility(View.GONE);
        releaseVideoRecord();
        mIsPlayVideoShown = false;
        cvTouch();
    }

    public void initVideoRecord() {
        UIUtils.postTaskDelay(new Runnable() {
            @Override
            public void run() {
                mVrvVideo.openCamera();
            }
        }, 1000);
    }

    public void releaseVideoRecord() {
        mVrvVideo.stop();
    }

    /**
     * 停止录制（释放相机后重新打开相机）
     */
    public void resetVideoRecord() {
        mVrvVideo.stop();
        mVrvVideo.openCamera();
    }

    @Override
    public void onRecrodFinish() {
        UIUtils.postTaskSafely(new Runnable() {
            @Override
            public void run() {
                mTvTipOne.setVisibility(View.GONE);
                mTvTipTwo.setVisibility(View.GONE);
                resetVideoRecord();
                //发送视频
                sendVidoMsg(mVrvVideo.getVecordFile(), mVrvVideo.getVecordFile().getName());
            }
        });
    }

    @Override
    public void onRecording(int timeCount, int recordMaxTime) {

    }

    @Override
    public void onRecordStart() {

    }

    /*================== 录制视频相关 end ==================*/
    /*================== 下拉刷新、上拉加载更多监听 begin ==================*/
    @Override
    public void onBGARefreshLayoutBeginRefreshing(BGARefreshLayout refreshLayout) {
        loadHistoryMsgFromRemote();
    }

    @Override
    public boolean onBGARefreshLayoutBeginLoadingMore(BGARefreshLayout refreshLayout) {
        return false;
    }


    /*================== 下拉刷新、上拉加载更多监听 end ==================*/
}

37:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\SettingActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;

import com.lqr.wechat.App;
import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimAccountSDK;
import com.lqr.wechat.view.CustomDialog;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 设置界面
 */
public class SettingActivity extends BaseActivity {

    Intent intent;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    private View mExitDialogView;
    private CustomDialog mDialog;

    @OnClick({R.id.oivNewMsgNotifySet, R.id.oivDontDistorbSet, R.id.oivCheatSet, R.id.oivPrivacySet, R.id.oivCommon, R.id.oivAccountAndSafeSet, R.id.oivAbout, R.id.oivExit})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.oivNewMsgNotifySet:
                intent = new Intent(this, NewMsgNotifySetActivity.class);
                startActivity(intent);
                break;
            case R.id.oivDontDistorbSet:
                intent = new Intent(this, DontDistorbSetActivity.class);
                startActivity(intent);
                break;
            case R.id.oivCheatSet:
                intent = new Intent(this, CheatSetActivity.class);
                startActivity(intent);
                break;
            case R.id.oivPrivacySet:
                intent = new Intent(this, PrivacySetActivity.class);
                startActivity(intent);
                break;
            case R.id.oivCommon:
                intent = new Intent(this, CommonSetActivity.class);
                startActivity(intent);
                break;
            case R.id.oivAccountAndSafeSet:
                intent = new Intent(this, AccountAndSafeSetActivity.class);
                startActivity(intent);
                break;
            case R.id.oivAbout:
                intent = new Intent(this, AboutActivity.class);
                startActivity(intent);
                break;
            case R.id.oivExit:
                if (mExitDialogView == null) {
                    mExitDialogView = View.inflate(this, R.layout.dialog_exit, null);
                    mDialog = new CustomDialog(this, mExitDialogView, R.style.dialog);
                    mDialog.show();

                    mExitDialogView.findViewById(R.id.tvExitAccount).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            //退出当前账号
                            NimAccountSDK.logout();
                            intent = new Intent(SettingActivity.this, LoginActivity.class);
                            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(intent);
                            finish();
                            mDialog.dismiss();
                        }
                    });

                    mExitDialogView.findViewById(R.id.tvExitApp).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            //退出app
                            App.exit();
                            mDialog.dismiss();
                        }
                    });

                } else {
                    mDialog.show();
                }
                break;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_setting);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("设置");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

38:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\ShowBigImageActivity.java
package com.lqr.wechat.activity;

import android.os.Environment;
import android.support.v7.widget.Toolbar;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.bm.library.PhotoView;
import com.lqr.wechat.R;
import com.lqr.wechat.factory.PopupWindowFactory;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.utils.UIUtils;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.FileCallBack;

import java.io.File;

import butterknife.ButterKnife;
import butterknife.InjectView;
import okhttp3.Call;

/**
 * @创建者 CSDN_LQR
 * @描述 查看头像
 */
public class ShowBigImageActivity extends BaseActivity {

    private String mUrl;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.pv)
    PhotoView mPv;
    @InjectView(R.id.pb)
    ProgressBar mPb;
    private FrameLayout mView;
    private PopupWindow mPopupWindow;

    @Override
    public void init() {
        mUrl = getIntent().getStringExtra("url");
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_show_big_image);
        ButterKnife.inject(this);
        initToolbar();
        mPv.enable();// 启用图片缩放功能

        ImageLoaderManager.LoadNetImage(mUrl, mPv);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu_more, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemMore:
                showPopupMenu();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("头像");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void showPopupMenu() {
        if (mView == null) {
            mView = new FrameLayout(this);
            mView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
            mView.setBackgroundColor(UIUtils.getColor(R.color.white));

            TextView tv = new TextView(this);
            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, UIUtils.dip2Px(45));
            tv.setLayoutParams(params);
            tv.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
            tv.setPadding(UIUtils.dip2Px(20), 0, 0, 0);
            tv.setTextColor(UIUtils.getColor(R.color.gray0));
            tv.setTextSize(14);
            tv.setText("保存到手机");
            mView.addView(tv);

            tv.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    mPopupWindow.dismiss();
                    //下载头像
                    final String dirPath = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), getPackageName()).getAbsolutePath();
                    final String fileName = "header.jpg";
                    OkHttpUtils.get().url(mUrl).build().execute(new FileCallBack(dirPath, fileName) {
                        @Override
                        public void onError(Call call, Exception e, int id) {
                            UIUtils.showToast("头像保存失败");
                        }

                        @Override
                        public void onResponse(File response, int id) {
                            UIUtils.showToast("头像保存在" + dirPath + "/" + fileName);
                        }
                    });
                }
            });
        }
        mPopupWindow = PopupWindowFactory.getPopupWindowAtLocation(mView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, getWindow().getDecorView().getRootView(), Gravity.BOTTOM, 0, 0);
        mPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                PopupWindowFactory.makeWindowLight(ShowBigImageActivity.this);
            }
        });
        PopupWindowFactory.makeWindowDark(this);
    }
}

39:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\SplashActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.text.TextUtils;
import android.view.Window;
import android.view.WindowManager;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimAccountSDK;
import com.lqr.wechat.utils.UIUtils;

import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 欢迎界面
 */
public class SplashActivity extends BaseActivity {


    @OnClick(R.id.btnLogin)
    public void login() {
        startActivity(new Intent(this, LoginActivity.class));
    }

    @OnClick(R.id.btnRegister)
    public void register() {
        UIUtils.showToast("暂不支持");
//        startActivity(new Intent(this, RegisterActivity.class));
//        finish();
    }

    @Override
    public void init() {
        if (canAutoLogin()) {
            //登录到主界面
            startActivity(new Intent(this, MainActivity.class));
            finish();
        }
    }

    @Override
    public void initView() {
        requestWindowFeature(Window.FEATURE_NO_TITLE);//隐藏标题栏
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);//隐藏状态栏
        setContentView(R.layout.activity_splash);
        ButterKnife.inject(this);
    }

    /**
     * 判断是否可以自动登录
     *
     * @return
     */
    public boolean canAutoLogin() {
        String account = NimAccountSDK.getUserAccount();
        String token = NimAccountSDK.getUserAccount();
        return !TextUtils.isEmpty(account) && !TextUtils.isEmpty(token);
    }

}

40:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TeamAnnouncementEditActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.netease.nimlib.sdk.team.constant.TeamFieldEnum;
import com.netease.nimlib.sdk.team.model.Team;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 编辑群公告界面
 */

public class TeamAnnouncementEditActivity extends BaseActivity {

    public static final String TEAM = "team";

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;

    @InjectView(R.id.etContent)
    EditText mEtContent;
    private Team mTeam;

    @OnClick({R.id.btnOk})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                final String content = mEtContent.getText().toString().trim();
                if (!TextUtils.isEmpty(content)) {
                    showMaterialDialog("", "该公告会通知全部群成员，是否发布?", "发布", "取消", new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            hideMaterialDialog();
                            Map<TeamFieldEnum, Serializable> fields = new HashMap<>(1);
                            fields.put(TeamFieldEnum.Announcement, content);
                            NimTeamSDK.updateTeamFields(mTeam.getId(), fields);
                            showWaitingDialog("正在保存");
                            //TODO:@所有人
                            finish();
                        }
                    }, new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            hideMaterialDialog();
                        }
                    });

                }
                break;
        }
    }

    @Override
    public void init() {
        mTeam = (Team) getIntent().getSerializableExtra(TEAM);
        if (mTeam == null) {
            interrupt();
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_team_announcement_edit);
        ButterKnife.inject(this);
        initToolbar();
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("群公告");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mBtnOk.setVisibility(View.VISIBLE);
        mBtnOk.setText("完成");
    }


}

41:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TeamCheatCreateActvitiy.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.Contact;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.SortUtils;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.QuickIndexBar;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.friend.model.Friend;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.team.constant.TeamFieldEnum;
import com.netease.nimlib.sdk.team.constant.TeamTypeEnum;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

import static com.lqr.wechat.R.id.ivHeader;

/**
 * @创建者 CSDN_LQR
 * @描述 发起群聊
 */
public class TeamCheatCreateActvitiy extends BaseActivity {

    public static final String ADD_TEAM_MEMBER = "add_team_member";//拉人入群
    private boolean isAddTeamMemberMode = false;//标记当前是否是拉人入群模式（默认是创建群）
    private List<String> mSelectedTeamMemberAccounts = new ArrayList<>();//已经在群中的成员账号

    private List<Contact> mContacts = new ArrayList<>();
    private List<Friend> mFriends = new ArrayList<>();
    private LQRAdapterForRecyclerView<Contact> mAdapter;
    private int i;

    private List<Contact> mSelectedContacts = new ArrayList<>();//选中的联系人
    private LQRAdapterForRecyclerView<Contact> mSelectedContactsAdapter;
    private Drawable mSearchDrawable;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;

    @InjectView(R.id.rvSelectedContacts)
    LQRRecyclerView mRvSelectedContacts;
    @InjectView(R.id.etKey)
    EditText mEtKey;
    @InjectView(R.id.vTop)
    View mVTop;

    @InjectView(R.id.rvContacts)
    LQRRecyclerView mRvContacts;
    @InjectView(R.id.quickIndexBar)
    QuickIndexBar mQuickIndexBar;
    @InjectView(R.id.tvLetter)
    TextView mTvLetter;

    private View mHeaderView;
    private TextView mTvSelectOneGroup;
    private TextView mTvCreateGroupFaceToFace;

    @OnClick({R.id.btnOk})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                if (mSelectedContacts.size() == 0)
                    return;
                ArrayList<String> accounts = new ArrayList<>(mSelectedContacts.size());
                for (Contact contact : mSelectedContacts) {
                    accounts.add(contact.getAccount());
                }

                if (isAddTeamMemberMode) {
                    Intent intent = new Intent();
                    intent.putStringArrayListExtra(ADD_TEAM_MEMBER, accounts);
                    setResult(RESULT_OK, intent);
                    finish();
                } else {
                    showWaitingDialog("正在发起群聊");
                    HashMap<TeamFieldEnum, Serializable> fields = new HashMap<>();
//                fields.put(TeamFieldEnum.Name, "群聊(" + accounts.size() + 1 + ")");
                    NimTeamSDK.createTeam(fields, TeamTypeEnum.Normal, accounts, new RequestCallback<Team>() {
                        @Override
                        public void onSuccess(Team param) {
                            hideWaitingDialog();
                            //跳转到SessionActivity
                            Intent intent = new Intent(TeamCheatCreateActvitiy.this, SessionActivity.class);
                            intent.putExtra(SessionActivity.SESSION_ACCOUNT, param.getId());
                            intent.putExtra(SessionActivity.SESSION_TYPE, SessionTypeEnum.Team);
                            startActivity(intent);
                            setResult(RESULT_OK);
                            finish();
                        }

                        @Override
                        public void onFailed(int code) {
                            UIUtils.showToast("建群失败" + code);
                            hideWaitingDialog();
                        }

                        @Override
                        public void onException(Throwable exception) {
                            exception.printStackTrace();
                            hideWaitingDialog();
                        }
                    });
                }
                break;
        }
    }

    @Override
    public void init() {
        //已经在群中的成员账号
        ArrayList<String> stringArrayListExtra = getIntent().getStringArrayListExtra(ADD_TEAM_MEMBER);
        if (stringArrayListExtra == null) {
            isAddTeamMemberMode = false;
        } else {
            isAddTeamMemberMode = true;
        }
        if (!StringUtils.isEmpty(stringArrayListExtra)) {
            mSelectedTeamMemberAccounts.addAll(stringArrayListExtra);
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_team_cheat_create);
        ButterKnife.inject(this);

        initToolbar();
        initHeaderView();

        //得到搜索框的左图标
        mSearchDrawable = UIUtils.getResource().getDrawable(R.mipmap.ic_search1);
        mSearchDrawable.setBounds(0, 0, mSearchDrawable.getMinimumWidth(), mSearchDrawable.getMinimumHeight());
    }

    @Override
    public void initData() {
        try {
            mFriends.clear();
            mContacts.clear();

            //得到好友列表
            List<Friend> friends = NimFriendSDK.getFriends();
            if (!StringUtils.isEmpty(friends)) {
                mFriends.addAll(friends);

                //得到本地没有信息的账号
                List<String> accountList = new ArrayList<>();
                for (int i = 0; i < mFriends.size(); i++) {
                    String account = mFriends.get(i).getAccount();
                    if (NimUserInfoSDK.getUser(account) == null) {
                        accountList.add(account);
                    }
                }

                //从服务器上获取用户信息
                if (!StringUtils.isEmpty(accountList)) {
                    NimUserInfoSDK.getUserInfosFormServer(accountList, new RequestCallback<List<NimUserInfo>>() {
                        @Override
                        public void onSuccess(List<NimUserInfo> param) {
                            setDataAndUpdateView();
                        }

                        @Override
                        public void onFailed(int code) {
                            UIUtils.showToast("获取联系人信息失败" + code);
                        }

                        @Override
                        public void onException(Throwable exception) {
                            exception.printStackTrace();
                        }
                    });
                } else {
                    setDataAndUpdateView();
                }
            } else {
                setDataAndUpdateView();
            }
        } catch (Exception e) {
            e.printStackTrace();
            initData();
        }

        setSelectedContactsAdapter();
    }

    @Override
    public void initListener() {
        mQuickIndexBar.setListener(new QuickIndexBar.OnLetterUpdateListener() {
            @Override
            public void onLetterUpdate(String letter) {
                //显示字母提示
                showLetter(letter);

                //滑动对对应字母条目处
                if ("↑".equalsIgnoreCase(letter)) {
                    mRvContacts.moveToPosition(0);
                } else if ("☆".equalsIgnoreCase(letter)) {
                    mRvContacts.moveToPosition(0);
                } else {
                    //找出第一个对应字母的位置后，滑动到指定位置
                    for (i = 0; i < mContacts.size(); i++) {
                        Contact contact = mContacts.get(i);
                        String c = contact.getPinyin().charAt(0) + "";
                        if (c.equalsIgnoreCase(letter)) {
                            mRvContacts.moveToPosition(i);
                            break;
                        }
                    }
                }
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("发起群聊");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mBtnOk.setVisibility(View.VISIBLE);
        mBtnOk.setText("确定");
    }

    private void initHeaderView() {
        mHeaderView = View.inflate(this, R.layout.header_group_cheat_rv, null);
        mTvSelectOneGroup = (TextView) mHeaderView.findViewById(R.id.tvSelectOneGroup);
        mTvCreateGroupFaceToFace = (TextView) mHeaderView.findViewById(R.id.tvCreateGroupFaceToFace);
    }

    private void setDataAndUpdateView() {
        if (mFriends != null) {
            for (int i = 0; i < mFriends.size(); i++) {
                mContacts.add(new Contact(mFriends.get(i).getAccount()));
            }
            //整理排序
            SortUtils.sortContacts(mContacts);
        }
        setContactsAdapter();
    }

    /**
     * 设置联系人列表适配器
     */
    private void setContactsAdapter() {
        mAdapter = new LQRAdapterForRecyclerView<Contact>(this, R.layout.item_contact_cv, mContacts) {
            @Override
            public void convert(final LQRViewHolderForRecyclerView helper, final Contact item, int position) {
                helper.setText(R.id.tvName, TextUtils.isEmpty(item.getAlias()) ? item.getName() : item.getAlias());
                if (!TextUtils.isEmpty(item.getAvatar())) {
                    ImageLoaderManager.LoadNetImage(item.getAvatar(), (ImageView) helper.getView(ivHeader));
                } else {
                    helper.setImageResource(ivHeader, R.mipmap.default_header);
                }

                String str = "";
                //得到当前字母
                String currentLetter = item.getPinyin().charAt(0) + "";

                if (position == 0) {
                    str = currentLetter;
                } else {
                    //得到上一个字母
                    String preLetter = mContacts.get(position - 1).getPinyin().charAt(0) + "";
                    //如果和上一个字母的首字母不同则显示字母栏
                    if (!preLetter.equalsIgnoreCase(currentLetter)) {
                        str = currentLetter;
                    }

                    int nextIndex = position + 1;
                    if (nextIndex < mContacts.size() - 1) {
                        //得到下一个字母
                        String nextLetter = mContacts.get(nextIndex).getPinyin().charAt(0) + "";
                        //如果和下一个字母的首字母不同则隐藏下划线
                        if (!nextLetter.equalsIgnoreCase(currentLetter)) {
                            helper.setViewVisibility(R.id.vLine, View.INVISIBLE);
                        } else {
                            helper.setViewVisibility(R.id.vLine, View.VISIBLE);
                        }
                    } else {
                        helper.setViewVisibility(R.id.vLine, View.INVISIBLE);
                    }
                }
                if (position == mContacts.size() - 1) {
                    helper.setViewVisibility(R.id.vLine, View.GONE);
                }

                //根据str是否为空决定字母栏是否显示
                if (TextUtils.isEmpty(str)) {
                    helper.setViewVisibility(R.id.tvIndex, View.GONE);
                } else {
                    helper.setViewVisibility(R.id.tvIndex, View.VISIBLE);
                    helper.setText(R.id.tvIndex, currentLetter);
                }


                final CheckBox cb = helper.getView(R.id.cb);
                helper.setViewVisibility(R.id.cb, View.VISIBLE);

                if (isAddTeamMemberMode) {
                    //判断当前的联系人是否已经在群中，是则显示灰色勾选图标
                    if (mSelectedTeamMemberAccounts.contains(item.getAccount())) {
                        cb.setEnabled(false);
                        cb.setChecked(true);
                    } else {
                        cb.setEnabled(true);
                    }
                }

                //条目点击勾选好友
                helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (isAddTeamMemberMode) {
                            //判断当前的联系人是否已经在群中，是否点击无效
                            if (mSelectedTeamMemberAccounts.contains(item.getAccount())) {
                                return;
                            }
                        }

                        if (cb.isChecked()) {
                            cb.setChecked(false);
                            //去掉选中项
                            mSelectedContactsAdapter.removeItem(item);
                        } else {
                            cb.setChecked(true);
                            //增加选中项
                            mSelectedContactsAdapter.addLastItem(item);
                        }
                        mBtnOk.setText("确定" + (mSelectedContacts.size() > 0 ? "(" + mSelectedContacts.size() + ")" : ""));
                        //根据选中联系人的个数显隐藏搜索框左图标
                        if (mSelectedContacts.size() > 0) {
                            mEtKey.setCompoundDrawables(null, null, null, null);
                        } else {
                            mEtKey.setCompoundDrawables(mSearchDrawable, null, null, null);
                        }
                    }
                });

            }
        };
        //加入头部
        mAdapter.addHeaderView(mHeaderView);
        //设置适配器
        if (mRvContacts != null)
            mRvContacts.setAdapter(mAdapter.getHeaderAndFooterAdapter());
    }

    /**
     * 设置被选中联系人头像列表适配器
     */
    private void setSelectedContactsAdapter() {
//        for (int i = 0; i < 10; i++) {
//            mSelectedContacts.add(new Contact());
//        }
        if (mSelectedContactsAdapter == null) {
            mSelectedContactsAdapter = new LQRAdapterForRecyclerView<Contact>(this, R.layout.item_selected_contact_rv, mSelectedContacts) {
                @Override
                public void convert(LQRViewHolderForRecyclerView helper, Contact item, int position) {

                    //动态设置列表宽度
                    LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) mRvSelectedContacts.getLayoutParams();
//                    params.weight = mSelectedContacts.size() > 5 ? 4 : 0;
                    int parentWidth = ((LinearLayout) mRvSelectedContacts.getParent()).getWidth();
                    int childWidth = parentWidth * 4 / 5;
                    params.width = mSelectedContacts.size() > 5 ? childWidth : params.WRAP_CONTENT;
                    mRvSelectedContacts.setLayoutParams(params);

                    ImageView ivHeader = helper.getView(R.id.ivHeader);
                    if (TextUtils.isEmpty(item.getAvatar())) {
                        ivHeader.setImageResource(R.mipmap.default_header);
                    } else {
                        ImageLoaderManager.LoadNetImage(item.getAvatar(), ivHeader);
                    }
                }
            };
            mRvSelectedContacts.setAdapter(mSelectedContactsAdapter);
        } else {
            mSelectedContactsAdapter.notifyDataSetChanged();
        }
    }

    /**
     * 显示所触摸到的字母
     *
     * @param letter
     */
    protected void showLetter(String letter) {
        mTvLetter.setVisibility(View.VISIBLE);// 设置为可见
        mTvLetter.setText(letter);

        UIUtils.getMainThreadHandler().removeCallbacksAndMessages(null);
        UIUtils.postTaskDelay(new Runnable() {
            @Override
            public void run() {
                mTvLetter.setVisibility(View.GONE);
            }
        }, 500);
    }
}

42:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TeamCheatInfoActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.kyleduo.switchbutton.SwitchButton;
import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.optionitemview.OptionItemView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimHistorySDK;
import com.lqr.wechat.nimsdk.NimRecentContactSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.CustomDialog;
import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.team.constant.TeamMemberType;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 群聊信息界面
 */
public class TeamCheatInfoActivity extends BaseActivity {

    public static final String GROUP_CHEAT_INFO_TEAMID = "teamId";
    public static final int REQ_ADD_MEMBERS = 1000;
    public static final int REQ_REMOVE_MEMBERS = 1001;
    public static final int REQ_CHANGE_NAME = 1002;
    public static final int REQ_WATCH_USER_INFO = 1003;
    public static final int RESP_QUIT_TEAM = 10000;
    public static final int RESP_CHEAT_SINGLE = 10001;
    public static final int RESP_CLEAR_CHATTING_RECORD_HISTORY = 10002;

    private Intent mIntent;
    private String mTeamId;
    private Team mTeam;
    private boolean mIsClearChattingHistory = false;
    private boolean mIsManager;//标记当前用户是不是管理员

    private Observer<TeamMember> memberRemoveObserver;
    private Observer<List<TeamMember>> memberUpdateObserver;

    private List<TeamMember> mTeamMemberList = new ArrayList<>();
    private LQRAdapterForRecyclerView mAdapter;
    private CustomDialog mDialog;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.rvMember)
    LQRRecyclerView mRvMember;
    @InjectView(R.id.oivTeamName)
    OptionItemView mOivTeamName;
    @InjectView(R.id.tvAnnouncement)
    TextView mTvAnnouncement;
    @InjectView(R.id.vLineTeamManage)
    View mVLineTeamManage;
    @InjectView(R.id.oivTeamManage)
    OptionItemView mOivTeamManage;
    @InjectView(R.id.oivNickNameInTeam)
    OptionItemView mOivNickNameInTeam;
    @InjectView(R.id.llShowNickName)
    LinearLayout mLlShowNickName;
    @InjectView(R.id.sbShowNickName)
    SwitchButton mSbShowNickName;

    @OnClick({R.id.oivTeamName, R.id.oivQRCordCard, R.id.llAnnouncement, R.id.oivNickNameInTeam, R.id.btnQuitTeam, R.id.oivClearMsgRecord})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.oivTeamName:
                mIntent = new Intent(this, TeamNameSetActivity.class);
                mIntent.putExtra(TeamNameSetActivity.TEAM_ID, mTeamId);
                startActivity(mIntent);
                break;
            case R.id.oivQRCordCard:
                mIntent = new Intent(this, QRCodeCardActivity.class);
                mIntent.putExtra(QRCodeCardActivity.QRCODE_TEAM, mTeam);
                startActivity(mIntent);
                break;
            case R.id.llAnnouncement:
                if (mIsManager) {
                    //编辑公告
                    mIntent = new Intent(this, TeamAnnouncementEditActivity.class);
                    mIntent.putExtra(TeamAnnouncementEditActivity.TEAM, mTeam);
                    startActivity(mIntent);
                } else {
                    showMaterialDialog("", "只有群主可以编辑群公告", "知道了", "", new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            hideMaterialDialog();
                        }
                    }, null);
                }
                break;
            case R.id.oivNickNameInTeam:
                showChangeNickNameDialog();
                break;
            case R.id.btnQuitTeam:
                showWaitingDialog("请稍等");
                NimTeamSDK.quitTeam(mTeamId, new RequestCallback<Void>() {
                    @Override
                    public void onSuccess(Void param) {
                        hideWaitingDialog();
                        //退出群聊时顺便清除本地最后联系人中的群消息
                        NimRecentContactSDK.deleteRecentContactAndNotify(mTeamId, SessionTypeEnum.Team);
                        setResult(RESP_QUIT_TEAM);
                        onBackPressed();
                    }

                    @Override
                    public void onFailed(int code) {
                        hideWaitingDialog();
                        UIUtils.showToast("退群失败" + code);
                    }

                    @Override
                    public void onException(Throwable exception) {
                        hideWaitingDialog();
                        UIUtils.showToast("退群失败");
                        exception.printStackTrace();
                    }
                });
                break;
            case R.id.oivClearMsgRecord:
                showMaterialDialog("", "确定删除群的聊天记录吗?", "清空", "取消", new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        hideMaterialDialog();
                        NimHistorySDK.clearChattingHistory(mTeamId, SessionTypeEnum.Team);
                        mIsClearChattingHistory = true;
                    }
                }, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        hideMaterialDialog();
                    }
                });
                break;
        }
    }

    @Override
    public void init() {
        mTeamId = getIntent().getStringExtra(TeamCheatInfoActivity.GROUP_CHEAT_INFO_TEAMID);
        if (TextUtils.isEmpty(mTeamId)) {
            interrupt();
            return;
        }

        mTeam = NimTeamSDK.queryTeamBlock(mTeamId);
//        mIsManager = UserCache.getAccount().equals(mTeam.getCreator());
        TeamMemberType myMemberType = NimTeamSDK.queryTeamMemberBlock(mTeamId, UserCache.getAccount()).getType();
        if (myMemberType == TeamMemberType.Manager || myMemberType == TeamMemberType.Owner) {
            mIsManager = true;
        } else {
            mIsManager = false;
        }

        //监听群成员变化
        observeMemberUpdate();
        observeMemberRemove();
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_team_cheat_info);
        ButterKnife.inject(this);

        initToolbar();
    }

    @Override
    protected void onResume() {
        super.onResume();
        mTeam = NimTeamSDK.queryTeamBlock(mTeamId);
        getSupportActionBar().setTitle("群聊信息(" + mTeam.getMemberCount() + ")");
        mOivTeamName.setRightText(TextUtils.isEmpty(mTeam.getName()) ? "未命名" : mTeam.getName());
        mOivNickNameInTeam.setRightText(NimTeamSDK.getTeamMemberDisplayNameWithoutMe(mTeamId, UserCache.getAccount()));
        if (!TextUtils.isEmpty(mTeam.getAnnouncement())) {
            mTvAnnouncement.setVisibility(View.VISIBLE);
            mTvAnnouncement.setText(mTeam.getAnnouncement());
        } else {
            mTvAnnouncement.setVisibility(View.GONE);
        }

//        if (mIsManager) {
//            mVLineTeamManage.setVisibility(View.VISIBLE);
//            mOivTeamManage.setVisibility(View.VISIBLE);
//        } else {
//            mVLineTeamManage.setVisibility(View.GONE);
//            mOivTeamManage.setVisibility(View.GONE);
//        }

        //是否显示群昵称
        mSbShowNickName.setChecked(NimTeamSDK.shouldShowNickName(mTeamId));
    }

    @Override
    public void initData() {
        //查询本群中成员
        NimTeamSDK.queryMemberList(mTeamId, new RequestCallback<List<TeamMember>>() {
            @Override
            public void onSuccess(List<TeamMember> param) {
                if (!StringUtils.isEmpty(param)) {
                    mTeamMemberList.clear();
                    mTeamMemberList.addAll(param);
                    if (mIsManager) {
                        mTeamMemberList.add(null);
                        mTeamMemberList.add(null);
                    } else {
                        mTeamMemberList.add(null);
                    }
                    //更新本地群成员资料
                    List<String> accountList = new ArrayList<>(param.size());
                    for (TeamMember tm : param) {
                        accountList.add(tm.getAccount());
                    }
                    if (!StringUtils.isEmpty(accountList)) {
                        NimUserInfoSDK.getUserInfosFormServer(accountList, new RequestCallback<List<NimUserInfo>>() {
                            @Override
                            public void onSuccess(List<NimUserInfo> param) {
                                setAdapter();
                            }

                            @Override
                            public void onFailed(int code) {
                                UIUtils.showToast("获取群成员信息失败" + code);
                            }

                            @Override
                            public void onException(Throwable exception) {
                                exception.printStackTrace();
                            }
                        });
                    }
                }
            }

            @Override
            public void onFailed(int code) {
                UIUtils.showToast("查询成员列表失败" + code);
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
            }
        });
    }

    @Override
    public void initListener() {
        mLlShowNickName.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mSbShowNickName.setChecked(!mSbShowNickName.isChecked());
            }
        });
        mSbShowNickName.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                showWaitingDialog("请稍等");
                NimTeamSDK.setShouldShowNickName(mTeamId, isChecked, new RequestCallback<Void>() {
                    @Override
                    public void onSuccess(Void param) {
                        hideWaitingDialog();
                    }

                    @Override
                    public void onFailed(int code) {
                        UIUtils.showToast("设置失败" + code);
                        hideWaitingDialog();
                    }

                    @Override
                    public void onException(Throwable exception) {
                        exception.printStackTrace();
                        hideWaitingDialog();
                    }
                });
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case REQ_ADD_MEMBERS:
                if (resultCode == RESULT_OK) {
                    showWaitingDialog("请稍等");
                    //拉人入群
                    ArrayList<String> accounts = data.getStringArrayListExtra(TeamCheatCreateActvitiy.ADD_TEAM_MEMBER);
                    NimTeamSDK.addMembers(mTeamId, accounts, new RequestCallback<Void>() {
                        @Override
                        public void onSuccess(Void param) {
                            hideWaitingDialog();
                        }

                        @Override
                        public void onFailed(int code) {
                            UIUtils.showToast("拉人入群失败" + code);
                            hideWaitingDialog();
                        }

                        @Override
                        public void onException(Throwable exception) {
                            exception.printStackTrace();
                            UIUtils.showToast("拉人入群失败");
                            hideWaitingDialog();
                        }
                    });
                }
                break;
            case REQ_REMOVE_MEMBERS:
                if (resultCode == RESULT_OK) {
                    showWaitingDialog("请稍等");
                    ArrayList<String> accounts = data.getStringArrayListExtra(TeamCheatRemoveMemberActivity.REMOVE_TEAM_MEMBER);
                    InvocationFuture<Void> invocationFuture = NimTeamSDK.removeMembers(mTeamId, accounts);
                    invocationFuture.setCallback(new RequestCallback<Void>() {
                        @Override
                        public void onSuccess(Void param) {
                            hideWaitingDialog();
                        }

                        @Override
                        public void onFailed(int code) {
                            UIUtils.showToast("踢人出群失败" + code);
                            hideWaitingDialog();
                        }

                        @Override
                        public void onException(Throwable exception) {
                            exception.printStackTrace();
                            UIUtils.showToast("踢人出群失败");
                            hideWaitingDialog();
                        }
                    });
                }
                break;
            case REQ_WATCH_USER_INFO:
                if (resultCode == RESULT_OK) {
                    setResult(RESP_CHEAT_SINGLE);
                    onBackPressed();
                }
                break;
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        NimTeamSDK.observeMemberUpdate(memberUpdateObserver, false);
        NimTeamSDK.observeMemberRemove(memberRemoveObserver, false);
    }

    @Override
    public void onBackPressed() {
        if (mIsClearChattingHistory)
            setResult(RESP_CLEAR_CHATTING_RECORD_HISTORY);
        super.onBackPressed();
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void setAdapter() {
        if (mAdapter == null) {
            mAdapter = new LQRAdapterForRecyclerView(this, R.layout.item_member_info_group_cheat_rv, mTeamMemberList) {
                @Override
                public void convert(LQRViewHolderForRecyclerView helper, Object obj, int position) {
                    final ImageView ivHeader = helper.getView(R.id.ivHeader);
                    if (mIsManager && position >= mTeamMemberList.size() - 2) {//+和-
                        if (position == mTeamMemberList.size() - 2) {//+
                            ivHeader.setImageResource(R.mipmap.ic_add_team_member);
                            helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    //拉人入群
                                    addMembers();
                                }
                            });
                        } else {//-
                            helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    //踢人出群
                                    removeMember();
                                }
                            });
                            ivHeader.setImageResource(R.mipmap.ic_remove_team_member);
                        }
                        helper.setText(R.id.tvName, "");
                    } else if (!mIsManager && position >= mTeamMemberList.size() - 1) {//+
                        helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //拉人入群
                                addMembers();
                            }
                        });
                        ivHeader.setImageResource(R.mipmap.ic_add_team_member);
                        helper.setText(R.id.tvName, "");
                    } else {
                        final TeamMember item = (TeamMember) obj;
                        helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //查看对方资料
                                Intent intent = new Intent(TeamCheatInfoActivity.this, UserInfoActivity.class);
                                intent.putExtra(UserInfoActivity.USER_INFO_ACCOUNT, item.getAccount());
                                startActivityForResult(intent, REQ_WATCH_USER_INFO);
                            }
                        });
                        helper.setText(R.id.tvName, NimTeamSDK.getTeamMemberDisplayNameWithoutMe(item.getTid(), item.getAccount()));
                        String account = item.getAccount();
                        NimUserInfo userInfo = NimUserInfoSDK.getUser(account);
                        if (userInfo == null) {
                            NimUserInfoSDK.getUserInfoFromServer(account, new RequestCallback<List<NimUserInfo>>() {
                                @Override
                                public void onSuccess(List<NimUserInfo> param) {
                                    if (!StringUtils.isEmpty(param)) {
                                        NimUserInfo userInfo = param.get(0);
                                        if (!TextUtils.isEmpty(userInfo.getAvatar())) {
                                            ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), ivHeader);
                                        } else {
                                            ivHeader.setImageResource(R.mipmap.default_header);
                                        }
                                    }
                                }

                                @Override
                                public void onFailed(int code) {
                                    ivHeader.setImageResource(R.mipmap.default_header);
                                }

                                @Override
                                public void onException(Throwable exception) {
                                    ivHeader.setImageResource(R.mipmap.default_header);
                                }
                            });
                        } else {
                            if (!TextUtils.isEmpty(userInfo.getAvatar())) {
                                ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), ivHeader);
                            } else {
                                ivHeader.setImageResource(R.mipmap.default_header);
                            }
                        }
                    }
                }
            };
            mRvMember.setAdapter(mAdapter);
        } else {
            mAdapter.notifyDataSetChanged();
        }
    }

    /**
     * 拉人入群
     */
    private void addMembers() {
        //得到群成员账号集合
        ArrayList<String> selectedTeamMemberAccounts = new ArrayList<>();
        for (int i = 0; i < mTeam.getMemberCount(); i++) {
            selectedTeamMemberAccounts.add(mTeamMemberList.get(i).getAccount());
        }

        Intent intent = new Intent(this, TeamCheatCreateActvitiy.class);
        intent.putStringArrayListExtra(TeamCheatCreateActvitiy.ADD_TEAM_MEMBER, selectedTeamMemberAccounts);
        startActivityForResult(intent, REQ_ADD_MEMBERS);
    }

    /**
     * 踢人出群
     */
    private void removeMember() {
        Intent intent = new Intent(this, TeamCheatRemoveMemberActivity.class);
        intent.putExtra(TeamCheatRemoveMemberActivity.TEAMID, mTeamId);
        startActivityForResult(intent, REQ_REMOVE_MEMBERS);
    }

    private void observeMemberUpdate() {
        memberUpdateObserver = new Observer<List<TeamMember>>() {
            @Override
            public void onEvent(List<TeamMember> teamMembers) {
                initData();
                onResume();
            }
        };
        NimTeamSDK.observeMemberUpdate(memberUpdateObserver, true);
    }

    private void observeMemberRemove() {
        memberRemoveObserver = new Observer<TeamMember>() {
            @Override
            public void onEvent(TeamMember teamMember) {
                initData();
                onResume();
            }
        };
        NimTeamSDK.observeMemberRemove(memberRemoveObserver, true);
    }

    private void showChangeNickNameDialog() {
        View view = View.inflate(this, R.layout.dialog_team_nick_change, null);
        mDialog = new CustomDialog(this, view, R.style.dialog);
        mDialog.setCancelable(false);
        mDialog.show();
        final EditText etName = (EditText) view.findViewById(R.id.etName);
//        String nickName = NimTeamSDK.getTeamNick(mTeamId, UserCache.getAccount());
        String nickName = NimTeamSDK.getTeamMemberDisplayNameWithoutMe(mTeamId, UserCache.getAccount());
        etName.setText(nickName);
        if (!TextUtils.isEmpty(nickName) && nickName.length() > 0)
            etName.setSelection(nickName.length());
        view.findViewById(R.id.tvCancle).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mDialog.dismiss();
                mDialog = null;
            }
        });
        view.findViewById(R.id.tvOk).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //修改我在群中的昵称
                String newNickName = etName.getText().toString().trim();
                if (!TextUtils.isEmpty(newNickName)) {
                    NimTeamSDK.updateMyTeamNick(mTeamId, newNickName, new RequestCallback<Void>() {
                        @Override
                        public void onSuccess(Void param) {
                            UIUtils.showToast("修改成功");
                            mDialog.dismiss();
                            mDialog = null;
                            onResume();
                        }

                        @Override
                        public void onFailed(int code) {
                            switch (code) {
                                case 805:
                                    UIUtils.showToast("网易云信的普通群不支持修改自己的群昵称");
                                    break;
                                default:
                                    UIUtils.showToast("修改失败" + code);
                                    break;
                            }
                        }

                        @Override
                        public void onException(Throwable exception) {
                            UIUtils.showToast("修改失败");
                            exception.printStackTrace();
                        }
                    });
                }
            }
        });
    }
}

43:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TeamCheatListActivity.java
package com.lqr.wechat.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.ninegridimageview.LQRNineGridImageView;
import com.lqr.ninegridimageview.LQRNineGridImageViewAdapter;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.ResponseCode;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 群聊列表界面
 */
public class TeamCheatListActivity extends BaseActivity {

    private List<Team> mMyTeamList = new ArrayList<>();
    private LQRAdapterForRecyclerView<Team> mAdapter;
    private TextView mHeaderView;
    private TextView mFooterTv;
    private LQRNineGridImageViewAdapter<NimUserInfo> mNineGridAdapter;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.llContent)
    LinearLayout mLlContent;

    @InjectView(R.id.tvTip)
    TextView mTvTip;
    @InjectView(R.id.rvTeamList)
    LQRRecyclerView mRvTeamList;

    @Override
    public void initView() {
        setContentView(R.layout.activity_team_cheat_list);
        ButterKnife.inject(this);
        initToolbar();
        initHeaderViewAndFooterView();
        mNineGridAdapter = new LQRNineGridImageViewAdapter<NimUserInfo>() {
            @Override
            protected void onDisplayImage(Context context, ImageView imageView, NimUserInfo userInfo) {
                if (!TextUtils.isEmpty(userInfo.getAvatar())) {
                    ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), imageView);
                } else {
                    imageView.setImageResource(R.mipmap.default_header);
                }
            }
        };
    }

    @Override
    public void initData() {
        NimTeamSDK.queryTeamList(new RequestCallbackWrapper<List<Team>>() {
            @Override
            public void onResult(int code, List<Team> result, Throwable exception) {
                if (code == ResponseCode.RES_SUCCESS && result != null && exception == null) {
                    mLlContent.setVisibility(View.VISIBLE);
                    mTvTip.setVisibility(View.GONE);

                    mMyTeamList.clear();
                    mMyTeamList.addAll(result);

                    setAdapter();

                } else {
                    mLlContent.setVisibility(View.GONE);
                    mTvTip.setVisibility(View.VISIBLE);
                    exception.printStackTrace();
                }
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
            case R.id.itemSearch:
                break;
            case R.id.itemMore:
                Intent intent = new Intent(this, TeamCheatCreateActvitiy.class);
                startActivityForResult(intent, 100);
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == RESULT_OK) {
            finish();
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("群聊");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void initHeaderViewAndFooterView() {
        mHeaderView = new TextView(this);
        ViewGroup.LayoutParams params1 = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, UIUtils.dip2Px(23));
        mHeaderView.setBackgroundColor(Color.parseColor("#E5E5E5"));
        mHeaderView.setGravity(Gravity.CENTER_VERTICAL);
        mHeaderView.setPadding(UIUtils.dip2Px(15), 0, 0, 0);
        mHeaderView.setText("群聊");
        mHeaderView.setTextColor(Color.parseColor("#989898"));
        mHeaderView.setTextSize(13);
        mHeaderView.setLayoutParams(params1);

        mFooterTv = new TextView(this);
        ViewGroup.LayoutParams params2 = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, UIUtils.dip2Px(50));
        mFooterTv.setLayoutParams(params2);
        mFooterTv.setGravity(Gravity.CENTER);
    }

    private void setAdapter() {
        if (mAdapter == null) {
            mAdapter = new LQRAdapterForRecyclerView<Team>(this, R.layout.item_contact_cv, mMyTeamList) {
                @Override
                public void convert(final LQRViewHolderForRecyclerView helper, final Team item, int position) {
                    helper.setViewVisibility(R.id.ivHeader, View.GONE)
                            .setViewVisibility(R.id.ngiv, View.GONE);
                    final LQRNineGridImageView ngivHeader = helper.getView(R.id.ngiv);
                    NimTeamSDK.queryMemberList(item.getId(), new RequestCallback<List<TeamMember>>() {
                                @Override
                                public void onSuccess(List<TeamMember> memberList) {
                                    //设置群聊名称
                                    if (!TextUtils.isEmpty(item.getName()))
                                        helper.setText(R.id.tvName, item.getName());
                                    else {
                                        StringBuilder sb = new StringBuilder();
                                        for (int i = 0; i < memberList.size(); i++) {
                                            TeamMember member = memberList.get(i);
                                            sb.append(NimTeamSDK.getTeamMemberDisplayNameWithYou(item.getId(), member.getAccount()));
                                            if (i != memberList.size() - 1) {
                                                sb.append("、");
                                            }
                                        }
                                        helper.setText(R.id.tvName, sb.toString());
                                    }

                                    //设置群聊的头像
                                    if (memberList != null && memberList.size() > 0) {
                                        List<String> accounts = new ArrayList<>();
                                        int count = memberList.size() > 9 ? 9 : memberList.size();
                                        for (int i = 0; i < count; i++) {
                                            accounts.add(memberList.get(i).getAccount());
                                        }
                                        NimUserInfoSDK.getUserInfosFormServer(accounts, new RequestCallback<List<NimUserInfo>>() {
                                            @Override
                                            public void onSuccess(List<NimUserInfo> result) {
                                                ngivHeader.setAdapter(mNineGridAdapter);
                                                ngivHeader.setImagesData(result);
                                            }

                                            @Override
                                            public void onFailed(int code) {

                                            }

                                            @Override
                                            public void onException(Throwable exception) {

                                            }
                                        });
                                    }
                                }

                                @Override
                                public void onFailed(int code) {

                                }

                                @Override
                                public void onException(Throwable exception) {
                                    exception.printStackTrace();
                                }
                            }

                    );


                    //条目点击事件
                    helper.getView(R.id.root).
                            setOnClickListener(new View.OnClickListener() {
                                                   @Override
                                                   public void onClick(View v) {
                                                       //跳转到SessionActivity
                                                       Intent intent = new Intent(TeamCheatListActivity.this, SessionActivity.class);
                                                       intent.putExtra(SessionActivity.SESSION_ACCOUNT, item.getId());
                                                       intent.putExtra(SessionActivity.SESSION_TYPE, SessionTypeEnum.Team);
                                                       startActivity(intent);
                                                       finish();
                                                   }
                                               }

                            );
                }
            }

            ;

            mAdapter.addHeaderView(mHeaderView);
            mFooterTv.setText(mMyTeamList.size() + "个群聊");
            mAdapter.addFooterView(mFooterTv);
            mRvTeamList.setAdapter(mAdapter.getHeaderAndFooterAdapter());
        } else {
            mAdapter.notifyDataSetChanged();
            mAdapter.getHeaderAndFooterAdapter().notifyDataSetChanged();
        }
    }

}

44:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TeamCheatRemoveMemberActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 移除群成员界面
 */
public class TeamCheatRemoveMemberActivity extends BaseActivity {

    public static final String TEAMID = "teamId";
    public static final String REMOVE_TEAM_MEMBER = "remove_team_member";//踢人出群
    private String mTeamId;
    private Team mTeam;
    private List<TeamMember> mTeamMembers = new ArrayList<>();
    private ArrayList<String> mWillBeRemovedAccounts = new ArrayList<>();
    private LQRAdapterForRecyclerView<TeamMember> mAdapter;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;

    @InjectView(R.id.etKey)
    EditText mEtKey;
    @InjectView(R.id.rvMember)
    LQRRecyclerView mRvMember;

    @OnClick({R.id.btnOk})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.btnOk:
                if (mWillBeRemovedAccounts.size() > 0) {
                    Intent intent = new Intent();
                    intent.putStringArrayListExtra(REMOVE_TEAM_MEMBER, mWillBeRemovedAccounts);
                    setResult(RESULT_OK, intent);
                    finish();
                }
                break;
        }
    }

    @Override
    public void init() {
        mTeamId = getIntent().getStringExtra(TEAMID);
        if (TextUtils.isEmpty(mTeamId)) {
            interrupt();
        }

        mTeam = NimTeamSDK.queryTeamBlock(mTeamId);
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_team_cheat_remove_member);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public void initData() {
        //获取群成员
        NimTeamSDK.queryMemberList(mTeamId, new RequestCallback<List<TeamMember>>() {
            @Override
            public void onSuccess(List<TeamMember> param) {
                mTeamMembers.clear();
                mTeamMembers.addAll(param);

                //调整群主位置置顶
                int creatorPosi = -1;
                for (int i = 0; i < param.size(); i++) {
                    TeamMember tm = param.get(i);
                    if (mTeam.getCreator().equals(tm.getAccount())) {
                        creatorPosi = i;
                        break;
                    }
                }
                if (creatorPosi != -1) {
                    mTeamMembers.remove(creatorPosi);
                    mTeamMembers.add(0, param.get(creatorPosi));
                }
                setAdapter();
            }

            @Override
            public void onFailed(int code) {
                UIUtils.showToast("获取群成员失败" + code);
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
            }
        });
    }

    private void setAdapter() {
        if (mAdapter == null) {
            mAdapter = new LQRAdapterForRecyclerView<TeamMember>(this, R.layout.item_contact_cv, mTeamMembers) {
                @Override
                public void convert(LQRViewHolderForRecyclerView helper, final TeamMember item, int position) {
                    helper.setText(R.id.tvName, NimTeamSDK.getTeamMemberDisplayNameWithoutMe(item.getTid(), item.getAccount()));
                    ImageView ivHeader = helper.getView(R.id.ivHeader);
                    NimUserInfo userInfo = NimUserInfoSDK.getUser(item.getAccount());
                    if (userInfo != null && !TextUtils.isEmpty(userInfo.getAvatar())) {
                        ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), ivHeader);
                    } else {
                        ivHeader.setImageResource(R.mipmap.default_header);
                    }
                    final CheckBox cb = helper.getView(R.id.cb);
                    if (UserCache.getAccount().equals(item.getAccount())) {
                        cb.setVisibility(View.GONE);
                    } else {
                        cb.setVisibility(View.VISIBLE);
                    }

                    helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (UserCache.getAccount().equals(item.getAccount())) {
                                return;
                            } else {
                                if (cb.isChecked()) {
                                    cb.setChecked(false);
                                    mWillBeRemovedAccounts.remove(item.getAccount());
                                } else {
                                    cb.setChecked(true);
                                    mWillBeRemovedAccounts.add(item.getAccount());
                                }
                            }
                        }
                    });
                }
            };
            mRvMember.setAdapter(mAdapter);
        } else {
            mAdapter.notifyDataSetChanged();
        }
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("聊天成员(" + mTeam.getMemberCount() + ")");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
        mBtnOk.setVisibility(View.VISIBLE);
        mBtnOk.setText("删除");
        mBtnOk.setBackgroundResource(R.drawable.shape_btn_delete);
    }
}

45:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TeamNameSetActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.lqr.wechat.R;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.team.constant.TeamFieldEnum;
import com.netease.nimlib.sdk.team.model.Team;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;


/**
 * @创建者 CSDN_LQR
 * @描述 群名片界面
 */
public class TeamNameSetActivity extends BaseActivity {

    public static final String TEAM_ID = "teamId";

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.btnOk)
    Button mBtnOk;

    @InjectView(R.id.etName)
    EditText mEtName;
    private String mTeamId;
    private Team mTeam;

    @OnClick(R.id.btnOk)
    public void click() {
        final String teamName = mEtName.getText().toString().trim();
//        if (!TextUtils.isEmpty(teamName)) {
            showWaitingDialog("修改群名片");
            Map<TeamFieldEnum, Serializable> fields = new HashMap<>(1);
            fields.put(TeamFieldEnum.Name, teamName);
            InvocationFuture<Void> invocationFuture = NimTeamSDK.updateTeamFields(mTeamId, fields);
            invocationFuture.setCallback(new RequestCallback<Void>() {
                @Override
                public void onSuccess(Void param) {
                    hideWaitingDialog();
                    finish();
                }

                @Override
                public void onFailed(int code) {
                    UIUtils.showToast("修改群名片失败" + code);
                    hideWaitingDialog();
                }

                @Override
                public void onException(Throwable exception) {
                    exception.printStackTrace();
                    hideWaitingDialog();
                }
            });
//        }
    }

    @Override
    public void init() {
        mTeamId = getIntent().getStringExtra(TEAM_ID);
        if (TextUtils.isEmpty(mTeamId)) {
            interrupt();
            return;
        }

        mTeam = NimTeamSDK.queryTeamBlock(mTeamId);
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_team_name_set);
        ButterKnife.inject(this);

        initToolbar();
        mEtName.setText(mTeam.getName());
        mEtName.setSelection(mTeam.getName().length());
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }


    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("群名片");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);

        mBtnOk.setVisibility(View.VISIBLE);
        mBtnOk.setText("保存");
    }
}

46:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TestActivity.java
package com.lqr.wechat.activity;


import com.lqr.wechat.R;

/**
 * @创建者 CSDN_LQR
 * @描述 用于测试的界面
 */
public class TestActivity extends BaseActivity {


    @Override
    public void initView() {
        setContentView(R.layout.activity_test);
    }

}

47:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\TransferActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.widget.EditText;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.UIUtils;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 转账
 */
public class TransferActivity extends BaseActivity {

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @InjectView(R.id.etMoney)
    EditText mEtMoney;

    @Override
    public void initView() {
        setContentView(R.layout.activity_transfer);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public void initListener() {
        mEtMoney.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (s.length() > 12) {
                    mEtMoney.setText(s.subSequence(0, 12));
                    mEtMoney.setSelection(12);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("转账");
        getSupportActionBar().setSubtitle("微信安全支付");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

}

48:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\UserInfoActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import com.lqr.optionitemview.OptionItemView;
import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.Contact;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimBlackListSDK;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.uinfo.constant.GenderEnum;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.List;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 详细资料界面
 */
public class UserInfoActivity extends BaseActivity {

    public static final String USER_INFO_ACCOUNT = "account";

    private Intent mIntent;
    private Animation mPushBottomInAnimation;
    private Animation mPushBottomOutAnimation;
    private String mAccount;
    private Contact mContact;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    //内容区
    @InjectView(R.id.ivHeader)
    ImageView mIvHeader;
    @InjectView(R.id.tvAlias)
    TextView mTvAlias;
    @InjectView(R.id.tvAccount)
    TextView mTvAccount;
    @InjectView(R.id.tvName)
    TextView mTvName;
    @InjectView(R.id.ivGender)
    ImageView mIvGender;

    @InjectView(R.id.oivAliasAndTag)
    OptionItemView mOivAliasAndTag;
    @InjectView(R.id.llArea)
    LinearLayout mLlArea;
    @InjectView(R.id.tvArea)
    TextView mTvArea;
    @InjectView(R.id.llSignature)
    LinearLayout mLlSignature;
    @InjectView(R.id.tvSignature)
    TextView mTvSignature;

    @InjectView(R.id.btnCheat)
    Button mBtnCheat;
    @InjectView(R.id.btnVideoCheat)
    Button mBtnVideoCheat;
    @InjectView(R.id.btnAddFriend)
    Button mBtnAddFriend;

    //菜单区
    @InjectView(R.id.rlMenu)
    RelativeLayout mRlMenu;
    @InjectView(R.id.vMask)
    View mVMask;
    @InjectView(R.id.svMenu)
    ScrollView mSvMenu;

    @OnClick({R.id.oivAliasAndTag, R.id.btnCheat, R.id.btnVideoCheat, R.id.btnAddFriend, R.id.oivAlias, R.id.oivFriendsCirclePrivacySet, R.id.oivAddToBlackList, R.id.oivDelete})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.oivAliasAndTag:
                jumpToAliasActivity();
                break;
            case R.id.btnCheat:
                setResult(RESULT_OK);
                mIntent = new Intent(this, SessionActivity.class);
                mIntent.putExtra(SessionActivity.SESSION_ACCOUNT, mAccount);
                startActivity(mIntent);
                finish();
                break;
            case R.id.btnVideoCheat:
                break;
            case R.id.btnAddFriend:
                mIntent = new Intent(this, PostscriptActivity.class);
                mIntent.putExtra("account", mAccount);
                startActivity(mIntent);
                break;
            case R.id.oivAlias://修改备注
                jumpToAliasActivity();
                hideMenu();
                break;
            case R.id.oivFriendsCirclePrivacySet://修改朋友圈权限
                startActivity(new Intent(UserInfoActivity.this, FriendCirclePrivacySetActivity.class));
                hideMenu();
                break;
            case R.id.oivAddToBlackList://加入黑名单
                hideMenu();
                showMaterialDialog("加入黑名单", "加入黑名单，你将不再收到对方的消息，并且你们互相看不到对方朋友圈的更新", "确定", "取消", new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        NimBlackListSDK.addToBlackList(mAccount, new RequestCallback<Void>() {
                            @Override
                            public void onSuccess(Void param) {
                                UIUtils.showToast("加入黑名单成功");
                                Intent intent = new Intent(UserInfoActivity.this, MainActivity.class);
                                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                                startActivity(intent);
                            }

                            @Override
                            public void onFailed(int code) {
                                UIUtils.showToast("加入黑名单失败" + code);
                            }

                            @Override
                            public void onException(Throwable exception) {
                                exception.printStackTrace();
                            }
                        });
                        hideMaterialDialog();
                    }
                }, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        hideMaterialDialog();
                    }
                });
                break;
            case R.id.oivDelete://删除好友
                hideMenu();
                showMaterialDialog("删除联系人", "将联系人" + mContact.getDisplayName() + "删除，将同时删除与联系人的聊天记录", "删除", "取消", new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //删除
                        NimFriendSDK.deleteFriend(mAccount, new RequestCallback<Void>() {
                            @Override
                            public void onSuccess(Void param) {
                                UIUtils.showToast("删除好友成功");
                                Intent intent = new Intent(UserInfoActivity.this, MainActivity.class);
                                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                                startActivity(intent);
                            }

                            @Override
                            public void onFailed(int code) {
                                UIUtils.showToast("删除好友失败" + code);
                            }

                            @Override
                            public void onException(Throwable exception) {
                                exception.printStackTrace();
                            }
                        });
                        hideMaterialDialog();
                    }
                }, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //取消
                        hideMaterialDialog();
                    }
                });
                break;
        }
    }

    private void jumpToAliasActivity() {
        mIntent = new Intent(UserInfoActivity.this, AliasActivity.class);
        mIntent.putExtra("contact", mContact);
        startActivityForResult(mIntent, AliasActivity.REQ_CHANGE_ALIAS);
    }

    @OnClick(R.id.vMask)
    public void mask() {
        toggleMenu();
    }

    @Override
    public void init() {
        mAccount = getIntent().getStringExtra("account");
        if (TextUtils.isEmpty(mAccount)) {
            interrupt();
            return;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_user_info);
        ButterKnife.inject(this);
        initToolbar();
        initAnimation();

        if (UserCache.getAccount().equals(mAccount)) {//自己
            mOivAliasAndTag.setVisibility(View.GONE);
            mLlArea.setVisibility(View.GONE);
            mLlSignature.setVisibility(View.GONE);
            mBtnCheat.setVisibility(View.VISIBLE);
        } else {
            if (NimFriendSDK.isMyFriend(mAccount)) {
                mBtnCheat.setVisibility(View.VISIBLE);
                mOivAliasAndTag.setVisibility(View.VISIBLE);
//                mBtnVideoCheat.setVisibility(View.VISIBLE);
                mBtnAddFriend.setVisibility(View.GONE);
            } else {
                mBtnCheat.setVisibility(View.GONE);
                mOivAliasAndTag.setVisibility(View.GONE);
//                mBtnVideoCheat.setVisibility(View.GONE);
                mBtnAddFriend.setVisibility(View.VISIBLE);
            }
        }
    }

    @Override
    public void initData() {
        //根据账号得到好友信息
        if (NimFriendSDK.isMyFriend(mAccount)) {
            mContact = new Contact(mAccount);
            //获取好友信息并显示
            setUserInfo();
            //先信息旧信息，同时更新新的好友信息
            getUserInfoFromServer();
        } else {
            getUserInfoFromServer();
        }
    }

    private void getUserInfoFromServer() {
        NimUserInfoSDK.getUserInfoFromServer(mAccount, new RequestCallback<List<NimUserInfo>>() {
            @Override
            public void onSuccess(List<NimUserInfo> param) {
                if (param != null && param.size() > 0) {
                    mContact = new Contact(NimFriendSDK.getFriendByAccount(mAccount), param.get(0));
                    //获取好友信息并显示
                    setUserInfo();
                }
            }

            @Override
            public void onFailed(int code) {

            }

            @Override
            public void onException(Throwable exception) {

            }
        });
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if (NimFriendSDK.isMyFriend(mAccount)) {
            new MenuInflater(this).inflate(R.menu.menu_more, menu);
        }
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                break;
            case R.id.itemMore:
                toggleMenu();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == AliasActivity.REQ_CHANGE_ALIAS && resultCode == RESULT_OK) {
            //修改备注成功
            initData();
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onBackPressed() {
        if (mRlMenu.getVisibility() == View.VISIBLE) {
            //隐藏
            mSvMenu.startAnimation(mPushBottomOutAnimation);
            return;
        }
        super.onBackPressed();
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("详细资料");
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }

    private void initAnimation() {
        mPushBottomInAnimation = AnimationUtils.loadAnimation(this, R.anim.push_bottom_in);
        mPushBottomOutAnimation = AnimationUtils.loadAnimation(this, R.anim.push_bottom_out);
        mPushBottomInAnimation.setDuration(300);
        mPushBottomOutAnimation.setDuration(300);
        mPushBottomOutAnimation.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                mRlMenu.setVisibility(View.GONE);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
    }

    private void toggleMenu() {
        if (mRlMenu.getVisibility() == View.VISIBLE) {
            //隐藏
            mSvMenu.startAnimation(mPushBottomOutAnimation);
        } else {
            //显示
            mRlMenu.setVisibility(View.VISIBLE);
            mSvMenu.startAnimation(mPushBottomInAnimation);
        }
    }

    private void hideMenu() {
        mSvMenu.startAnimation(mPushBottomOutAnimation);
    }

    private void setUserInfo() {
        //设置头像
        if (TextUtils.isEmpty(mContact.getAvatar())) {
            mIvHeader.setImageResource(R.mipmap.default_header);
        } else {
            ImageLoaderManager.LoadNetImage(mContact.getAvatar(), mIvHeader);
        }

        //设置性别
        NimUserInfo userInfo = mContact.getUserInfo();
        if (userInfo.getGenderEnum() == GenderEnum.FEMALE) {
            mIvGender.setImageResource(R.mipmap.ic_gender_female);
        } else if (userInfo.getGenderEnum() == GenderEnum.MALE) {
            mIvGender.setImageResource(R.mipmap.ic_gender_male);
        } else {
            mIvGender.setVisibility(View.GONE);
        }

        //判断是否有起备注
        if (TextUtils.isEmpty(mContact.getAlias())) {
//            mTvAlias.setVisibility(View.GONE);
            mTvName.setVisibility(View.GONE);
        } else {
//            mTvAlias.setVisibility(View.VISIBLE);
            mTvName.setVisibility(View.VISIBLE);
        }
        mTvAlias.setText(mContact.getDisplayName());
        mTvAccount.setText("微信号:" + mContact.getAccount());
        mTvName.setText("昵称:" + mContact.getName());
        Map<String, Object> extensionMap = mContact.getUserInfo().getExtensionMap();
        if (extensionMap != null)
            mTvArea.setText(StringUtils.isEmpty(extensionMap.get(AppConst.UserInfoExt.AREA)) ? "" : (String) extensionMap.get(AppConst.UserInfoExt.AREA));
        mTvSignature.setText(mContact.getUserInfo().getSignature());
    }
}

49:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\VipCardActivity.java
package com.lqr.wechat.activity;

import android.support.v7.widget.Toolbar;
import android.view.MenuItem;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 会员卡--卡包
 */
public class VipCardActivity extends BaseActivity {
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;

    @Override
    public void initView() {
        setContentView(R.layout.activity_vip_card);
        ButterKnife.inject(this);
        initToolbar();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle("会员卡");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationIcon(R.mipmap.ic_back);
    }
}

50:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\activity\WebViewActivity.java
package com.lqr.wechat.activity;

import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.MenuItem;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.view.ProgressWebView;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 内置浏览器界面
 */
public class WebViewActivity extends BaseActivity {

    private Intent mIntent;
    private Bundle mExtras;
    private String mUrl;
    private String mTitle;

    private boolean isLoading = false;

    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    @InjectView(R.id.webview)
    public ProgressWebView mWebView;

    @Override
    public void init() {
        //得到url
        try {
            mIntent = getIntent();
            mExtras = mIntent.getExtras();
            if (mExtras == null) {
                finish();
                return;
            }
            mUrl = mExtras.getString("url");
            if (StringUtils.isEmpty(mUrl)) {
                finish();
                return;
            }
            mTitle = mExtras.getString("title");
        } catch (Exception e) {
            e.printStackTrace();
            finish();
            return;
        }
    }

    @Override
    public void initView() {
        setContentView(R.layout.activity_webview);
        ButterKnife.inject(this);
        initToolbar();

        //设置webView
        WebSettings settings = mWebView.getSettings();
        settings.setRenderPriority(WebSettings.RenderPriority.HIGH);
        settings.setSupportMultipleWindows(true);
        settings.setJavaScriptEnabled(true);
        settings.setSavePassword(false);
        settings.setJavaScriptCanOpenWindowsAutomatically(true);
        settings.setMinimumFontSize(settings.getMinimumLogicalFontSize() + 8);
        settings.setAllowFileAccess(false);
        settings.setTextSize(WebSettings.TextSize.NORMAL);
        mWebView.setVerticalScrollbarOverlay(true);
        mWebView.setWebViewClient(new MyWebViewClient());
        mWebView.loadUrl(mUrl);
    }

    @Override
    public void initListener() {
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onBackPressed() {
        isLoading = false;

        //如果当前浏览器可以后退，则后退上一个页面
        if (mWebView.canGoBack()) {
            mWebView.goBack();
        } else {
            finish();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mWebView != null) {
            mWebView.removeAllViews();
            try {
                mWebView.destroy();
            } catch (Exception e) {
                e.printStackTrace();
            }
            mWebView = null;
        }
    }

    private void initToolbar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle(TextUtils.isEmpty(mTitle) ? "" : mTitle);
        mToolbar.setNavigationIcon(R.mipmap.ic_delete_white);
    }

    private class MyWebViewClient extends WebViewClient {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            //在自己浏览器中跳转
            mWebView.loadUrl(url);
            return true;
        }

        @Override
        public void onPageStarted(WebView view, String url, Bitmap favicon) {
            super.onPageStarted(view, url, favicon);
            isLoading = true;
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
            isLoading = false;
        }
    }

}

51:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\adapter\FuncPagerAdapter.java
package com.lqr.wechat.adapter;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;

import com.lqr.wechat.fragment.BaseFragment;

import java.util.List;

/**
 * @创建者 CSDN_LQR
 * @描述 聊天界面底部功能页面适配器
 */
public class FuncPagerAdapter extends FragmentPagerAdapter {

    private List<BaseFragment> mFragments;

    public FuncPagerAdapter(FragmentManager fm, List<BaseFragment> fragments) {
        super(fm);
        mFragments = fragments;
    }

    @Override
    public Fragment getItem(int position) {
        return mFragments.get(position);
    }

    @Override
    public int getCount() {
        return mFragments.size();
    }
}

52:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\adapter\MainPagerAdapter.java
package com.lqr.wechat.adapter;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;

import com.lqr.wechat.fragment.BaseFragment;

import java.util.List;

/**
 * @创建者 CSDN_LQR
 * @描述 主界面中ViewPager的适配器
 */
public class MainPagerAdapter extends FragmentPagerAdapter {

    private List<BaseFragment> mFragments;

    public MainPagerAdapter(FragmentManager fm, List<BaseFragment> fragments) {
        super(fm);
        mFragments = fragments;
    }

    @Override
    public Fragment getItem(int position) {
        return mFragments.get(position);
    }

    @Override
    public int getCount() {
        return mFragments.size();
    }
}

53:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\adapter\SessionAdapter.java
package com.lqr.wechat.adapter;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.AnimationDrawable;
import android.text.TextUtils;
import android.text.style.ImageSpan;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.emoji.MoonUtil;
import com.lqr.emoji.StickerManager;
import com.lqr.wechat.R;
import com.lqr.wechat.activity.FilePreviewActivity;
import com.lqr.wechat.activity.ImageWatchActivity;
import com.lqr.wechat.activity.SessionActivity;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.nimsdk.NimMessageSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.nimsdk.audio.BaseAudioControl;
import com.lqr.wechat.nimsdk.audio.MessageAudioControl;
import com.lqr.wechat.nimsdk.audio.Playable;
import com.lqr.wechat.nimsdk.custom.StickerAttachment;
import com.lqr.wechat.nimsdk.utils.ImageUtil;
import com.lqr.wechat.nimsdk.utils.ScreenUtil;
import com.lqr.wechat.utils.Bimp;
import com.lqr.wechat.utils.FileIconUtils;
import com.lqr.wechat.utils.FileOpenUtils;
import com.lqr.wechat.utils.FileUtils;
import com.lqr.wechat.utils.LogUtils;
import com.lqr.wechat.utils.MimeTypeUtils;
import com.lqr.wechat.utils.TimeUtils;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.utils.VideoThumbLoader;
import com.lqr.wechat.view.BubbleImageView;
import com.lqr.wechat.view.CircularProgressBar;
import com.netease.nimlib.sdk.AbortableFuture;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.media.record.AudioRecorder;
import com.netease.nimlib.sdk.msg.attachment.AudioAttachment;
import com.netease.nimlib.sdk.msg.attachment.FileAttachment;
import com.netease.nimlib.sdk.msg.attachment.ImageAttachment;
import com.netease.nimlib.sdk.msg.attachment.NotificationAttachment;
import com.netease.nimlib.sdk.msg.attachment.VideoAttachment;
import com.netease.nimlib.sdk.msg.constant.AttachStatusEnum;
import com.netease.nimlib.sdk.msg.constant.MsgDirectionEnum;
import com.netease.nimlib.sdk.msg.constant.MsgStatusEnum;
import com.netease.nimlib.sdk.msg.constant.MsgTypeEnum;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.IMMessage;
import com.netease.nimlib.sdk.team.model.MemberChangeAttachment;
import com.netease.nimlib.sdk.team.model.MuteMemberAttachment;
import com.netease.nimlib.sdk.team.model.UpdateTeamAttachment;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.FileCallBack;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okhttp3.Call;

import static com.netease.nimlib.sdk.msg.constant.MsgTypeEnum.notification;

/**
 * @创建者 CSDN_LQR
 * @描述 会话列表适配器
 */
public class SessionAdapter extends LQRAdapterForRecyclerView<IMMessage> {

    public static final int CLICK_TO_PLAY_AUDIO_DELAY = 500;
    private Context mContext;

    private static final int NOTIFICATION = R.layout.item_notification;
    private static final int SEND_TEXT = R.layout.item_text_send;
    private static final int RECEIVE_TEXT = R.layout.item_text_receive;
    private static final int SEND_STICKER = R.layout.item_sticker_send;
    private static final int RECEIVE_STICKER = R.layout.item_sticker_receive;
    private static final int SEND_IMAGE = R.layout.item_image_send;
    private static final int RECEIVE_IMAGE = R.layout.item_image_receive;
    private static final int SEND_VIDEO = R.layout.item_video_send;
    private static final int RECEIVE_VIDEO = R.layout.item_video_receive;
    private static final int SEND_LOCATION = R.layout.item_location_send;
    private static final int RECEIVE_LOCATION = R.layout.item_location_receive;
    private static final int SEND_AUDIO = R.layout.item_audio_send;
    private static final int RECEIVE_AUDIO = R.layout.item_audio_receive;
    private static final int SEND_FILE = R.layout.item_file_send;
    private static final int RECEIVE_FILE = R.layout.item_file_receive;

    private Map<String, Float> mProgress = new HashMap<>();
    private MessageAudioControl mAudioControl;
    private ImageView mAnimationView;

    public SessionAdapter(Context context, List<IMMessage> data) {
        super(context, data);
        mContext = context;
        mAudioControl = MessageAudioControl.getInstance(mContext);
    }

    public SessionAdapter(Context context, int defaultLayoutId, List<IMMessage> data) {
        super(context, defaultLayoutId, data);
    }

    @Override
    public void convert(LQRViewHolderForRecyclerView helper, final IMMessage item, final int position) {

        //设置时间
        setTime(helper, item, position);

        if (item.getMsgType() != notification) {
            //设置头像
            setHeader(helper, item);

            //显示昵称
            if (item.getSessionType() == SessionTypeEnum.Team) {
                helper.setViewVisibility(R.id.tvName, NimTeamSDK.shouldShowNickName(item.getSessionId()) ? View.VISIBLE : View.GONE)
                        .setText(R.id.tvName, NimTeamSDK.getTeamMemberDisplayNameWithoutMe(item.getSessionId(), item.getFromAccount()));
            } else {
                helper.setViewVisibility(R.id.tvName, View.GONE);
            }

            //点击重发
            helper.getView(R.id.ivError).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    NimMessageSDK.reSendMessage(item);
//                notifyItemChanged(position);
//                notifyDataSetChanged();
                    ((SessionActivity) mContext).initData();
                }
            });

            //更新消息发送状态
            setViewWithStatus(helper, item, position);
        }

        //文本消息
        if (item.getMsgType() == MsgTypeEnum.text) {
            setTextMessage(helper, item);
        }
        //贴图消息
        else if (item.getMsgType() == MsgTypeEnum.custom) {
            setStickerMessage(helper, item);
        }
        //图片消息
        else if (item.getMsgType() == MsgTypeEnum.image) {
            setImageMessage(helper, item);
        }
        //语音消息
        else if (item.getMsgType() == MsgTypeEnum.audio) {
            setAudioMessage(helper, item);
        }
        //视频消息
        else if (item.getMsgType() == MsgTypeEnum.video) {
            setVideoMessage(helper, item, position);
        }
        //文件消息
        else if (item.getMsgType() == MsgTypeEnum.file) {
            setFileMessage(helper, item);
        }
        //通知类消息
        else if (item.getMsgType() == notification) {
            setNotificationMessage(helper, item);
        }

    }

    private void setTime(LQRViewHolderForRecyclerView helper, IMMessage item, int position) {
        if (position > 0) {
            IMMessage preMessage = getData().get(position - 1);
            if (item.getTime() - preMessage.getTime() > (5 * 60 * 1000)) {//与上一条数据相关5分钟则显示时间
                helper.setViewVisibility(R.id.tvTime, View.VISIBLE).setText(R.id.tvTime, TimeUtils.getMsgFormatTime(item.getTime()));
            } else {
                helper.setViewVisibility(R.id.tvTime, View.GONE);
            }
        } else {
            helper.setViewVisibility(R.id.tvTime, View.VISIBLE).setText(R.id.tvTime, TimeUtils.getMsgFormatTime(item.getTime()));
        }
    }

    private void setHeader(LQRViewHolderForRecyclerView helper, IMMessage item) {
        ImageView ivAvatar = helper.getView(R.id.ivAvatar);
        String avatar = NimUserInfoSDK.getUser(item.getFromAccount()).getAvatar();
        if (!TextUtils.isEmpty(avatar)) {
            ImageLoaderManager.LoadNetImage(avatar, ivAvatar);
        } else {
            ivAvatar.setImageResource(R.mipmap.default_header);
        }
    }

    private void setTextMessage(LQRViewHolderForRecyclerView helper, IMMessage item) {
        helper.setText(R.id.tvText, item.getContent());
        //识别并显示表情
        MoonUtil.identifyFaceExpression(UIUtils.getContext(), helper.getView(R.id.tvText), item.getContent(), ImageSpan.ALIGN_BOTTOM);
    }

    private void setStickerMessage(LQRViewHolderForRecyclerView helper, IMMessage item) {
        StickerAttachment attachment = (StickerAttachment) item.getAttachment();
        String uri = StickerManager.getInstance().getStickerBitmapUri(attachment.getCatalog(), attachment.getChartlet());
        ImageLoaderManager.LoadNetImage(uri, (ImageView) helper.getView(R.id.ivSticker));
    }

    private void setImageMessage(LQRViewHolderForRecyclerView helper, final IMMessage item) {
        final BubbleImageView bivPic = helper.getView(R.id.bivPic);
        final ImageAttachment ia = (ImageAttachment) item.getAttachment();

        if (!TextUtils.isEmpty(ia.getPath())) {
            ImageLoaderManager.LoadLocalImage(ia.getPath(), bivPic);
        } else {
            //判断本地是否有缩略图
            if (ia.getThumbPath() == null) {
                LogUtils.sf("本地没有缩略图");
                AbortableFuture abortableFuture = NimMessageSDK.downloadAttachment(item, true);
                abortableFuture.setCallback(new RequestCallback() {
                    @Override
                    public void onSuccess(Object param) {
                        Bitmap bitmap = Bimp.getLoacalBitmap(ia.getThumbPath());
                        if (bitmap != null) {
                            bivPic.setImageBitmap(bitmap);
                        }
                    }

                    @Override
                    public void onFailed(int code) {

                    }

                    @Override
                    public void onException(Throwable exception) {

                    }
                });
            } else {
                LogUtils.sf("本地有缩略图");
                Bitmap bitmap = Bimp.getLoacalBitmap(ia.getThumbPath());
                if (bitmap != null) {
                    bivPic.setImageBitmap(bitmap);
                }
            }
        }

        //查看图片大图
        bivPic.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(mContext, ImageWatchActivity.class);
                intent.putExtra("message", item);
                intent.putExtra("account", ((SessionActivity) mContext).mSessionId);
                intent.putExtra("sessionType", ((SessionActivity) mContext).mSessionType);

                mContext.startActivity(intent);
            }
        });
    }

    /**
     * 设置语音信息
     */
    private void setAudioMessage(final LQRViewHolderForRecyclerView helper, final IMMessage item) {
        final AudioAttachment aa = (AudioAttachment) item.getAttachment();
        long durationMillis = aa.getDuration();
        long durationSecond = durationMillis / 1000;
        int increment = (int) (ScreenUtil.getDisplayWidth() / 2 / AudioRecorder.DEFAULT_MAX_AUDIO_RECORD_TIME_SECOND * durationSecond);

        //设置语音的长度
        RelativeLayout rlAudio = helper.setText(R.id.tvDuration, durationSecond + "''").getView(R.id.rlAudio);
        ViewGroup.LayoutParams params = rlAudio.getLayoutParams();
        params.width = UIUtils.dip2Px(65) + UIUtils.dip2Px(increment);
        rlAudio.setLayoutParams(params);

        //设置条目点击事件
        helper.getView(R.id.rlAudio).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //播放当前播放的其他语音
                mAudioControl.stopAudio();
                //得到当前要播放语音的动画控件
                mAnimationView = helper.getView(R.id.ivAudio);
                //下载音频
                if (TextUtils.isEmpty(aa.getPath())) {
                    OkHttpUtils.get().url(aa.getUrl()).build().execute(new FileCallBack(FileUtils.getDirFromPath(aa.getPathForSave()), FileUtils.getFileNameFromPath(aa.getPathForSave())) {
                        @Override
                        public void onError(Call call, Exception e, int id) {
                            UIUtils.showToast("语音下载失败");
                        }

                        @Override
                        public void onResponse(File response, int id) {
                            playAudioDelayAndSetPlayNext(item);
                        }
                    });
                } else {
                    playAudioDelayAndSetPlayNext(item);
                }

            }
        });
    }

    /**
     * 设置视频信息
     */
    private void setVideoMessage(LQRViewHolderForRecyclerView helper, final IMMessage item, final int position) {
        final BubbleImageView bivPic = helper.getView(R.id.bivPic);
        final VideoAttachment va = (VideoAttachment) item.getAttachment();

        //设置控件的尺寸
        int[] bounds = new int[]{va.getWidth(), va.getHeight()};
        final ImageUtil.ImageSize imageSize = ImageUtil.getThumbnailDisplaySize(bounds[0], bounds[1], getImageMaxEdge(), getImageMinEdge());
        setLayoutParams(imageSize.width, imageSize.height, bivPic);

        //视频文件存在
        if (!TextUtils.isEmpty(va.getPath())) {
            VideoThumbLoader.getInstance().showThumb(va.getPath(), bivPic, imageSize.width, imageSize.height);
        } else {
            bivPic.setImageResource(R.mipmap.img_video_default);
            //下载视频缩略图
            AbortableFuture abortableFuture = NimMessageSDK.downloadAttachment(item, true);
            abortableFuture.setCallback(new RequestCallback() {
                @Override
                public void onSuccess(Object param) {
                    Bitmap bitmap = Bimp.getLoacalBitmap(va.getThumbPath());
                    if (bitmap != null) {
                        bivPic.setImageBitmap(bitmap);
                    }
                }

                @Override
                public void onFailed(int code) {

                }

                @Override
                public void onException(Throwable exception) {

                }
            });
        }

        //点击事件
        helper.getView(R.id.ivPlay).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //视频文件存在
                if (!TextUtils.isEmpty(va.getPath())) {
                    //播放视频
                    FileOpenUtils.openFile(mContext, va.getPath(), MimeTypeUtils.getMimeType(va.getDisplayName()));
                } else {
                    //下载视频文件
                    OkHttpUtils.get().url(va.getUrl()).build().execute(new FileCallBack(FileUtils.getDirFromPath(va.getPathForSave()), FileUtils.getFileNameFromPath(va.getPathForSave())) {
                        @Override
                        public void onError(Call call, Exception e, int id) {
                            UIUtils.showToast("下载视频失败");
                        }

                        @Override
                        public void onResponse(File response, int id) {
                            if (!TextUtils.isEmpty(va.getPath())) {
                                VideoThumbLoader.getInstance().showThumb(va.getPath(), bivPic, imageSize.width, imageSize.height);
                                notifyItemChanged(position);
                            }
                        }

                        @Override
                        public void inProgress(float progress, long total, int id) {//use progress: 0 ~ 1
                            progress = progress * 100;
                            putProgress(item, progress);
                            if (progress == 0) {
                                item.setAttachStatus(AttachStatusEnum.def);
                            } else if (progress < 100) {
                                item.setAttachStatus(AttachStatusEnum.transferring);
                            } else {
                                item.setAttachStatus(AttachStatusEnum.transferred);
                            }
                            notifyItemChanged(position);
                            super.inProgress(progress, total, id);
                        }
                    });
                }
            }
        });
    }

    /**
     * 设置文件信息
     */
    private void setFileMessage(LQRViewHolderForRecyclerView helper, final IMMessage item) {
        FileAttachment fa = (FileAttachment) item.getAttachment();
        helper.setImageResource(R.id.ivIcon, FileIconUtils.getFileIconResId(fa.getExtension()))
                .setText(R.id.tvFileName, fa.getFileName())
                .setText(R.id.tvFileSize, FileUtils.formateFileSize(fa.getSize()))
                .getView(R.id.llFile).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //跳转到文件预览界面下载文件
                Intent intent = new Intent(mContext, FilePreviewActivity.class);
                intent.putExtra("message", item);
                mContext.startActivity(intent);
            }
        });
    }

    /**
     * 设置通知类信息
     */
    private void setNotificationMessage(LQRViewHolderForRecyclerView helper, IMMessage item) {
        NotificationAttachment na = (NotificationAttachment) item.getAttachment();
        String fromAccount = item.getFromAccount();
        String text = "";
        switch (na.getType()) {
            case InviteMember:
                text = NimTeamSDK.buildInviteMemberNotification(((MemberChangeAttachment) na), item.getSessionId(), fromAccount);
                break;
            case KickMember:
                text = NimTeamSDK.buildKickMemberNotification(((MemberChangeAttachment) na), item.getSessionId(), fromAccount);
                break;
            case LeaveTeam:
                text = NimTeamSDK.buildLeaveTeamNotification(item.getSessionId(), fromAccount);
                break;
            case DismissTeam:
                text = NimTeamSDK.buildDismissTeamNotification(item.getSessionId(), fromAccount);
                break;
            case UpdateTeam:
                text = NimTeamSDK.buildUpdateTeamNotification(((UpdateTeamAttachment) na), item.getSessionId(), fromAccount);
                break;
            case PassTeamApply:
                text = NimTeamSDK.buildManagerPassTeamApplyNotification((MemberChangeAttachment) na, item.getSessionId());
                break;
            case TransferOwner:
                text = NimTeamSDK.buildTransferOwnerNotification(((MemberChangeAttachment) na), item.getSessionId(), fromAccount);
                break;
            case AddTeamManager:
                text = NimTeamSDK.buildAddTeamManagerNotification((MemberChangeAttachment) na, item.getSessionId());
                break;
            case RemoveTeamManager:
                text = NimTeamSDK.buildRemoveTeamManagerNotification((MemberChangeAttachment) na, item.getSessionId());
                break;
            case AcceptInvite:
                text = NimTeamSDK.buildAcceptInviteNotification(((MemberChangeAttachment) na), item.getSessionId(), fromAccount);
                break;
            case MuteTeamMember:
                text = NimTeamSDK.buildMuteTeamNotification((MuteMemberAttachment) na, item.getSessionId());
                break;
            default:
                text = NimTeamSDK.getTeamMemberDisplayNameWithYou(item.getSessionId(), fromAccount) + ": unknown message";
                break;
        }
        helper.setText(R.id.tvNotification, text);
    }

    private void setViewWithStatus(LQRViewHolderForRecyclerView helper, IMMessage item, final int position) {
        //消息发送/接收状态
        MsgStatusEnum status = item.getStatus();

        if (status == MsgStatusEnum.success) {
            LogUtils.sf("发送成功...");
            helper.setViewVisibility(R.id.llError, View.GONE);
            setProgressVisiable(helper, item, false);
        } else if (status == MsgStatusEnum.fail) {
            LogUtils.sf("发送失败...");
            helper.setViewVisibility(R.id.llError, View.VISIBLE);
            setProgressVisiable(helper, item, false);
        } else if (status == MsgStatusEnum.sending) {
            LogUtils.sf("发送中...");
            helper.setViewVisibility(R.id.llError, View.GONE);
            setProgressVisiable(helper, item, true);
            //更新进度
            updateProgress(helper, item);

            //因为网易云集的状态监听不会监听到success，所以这里手动再刷新一次
            UIUtils.postTaskDelay(new Runnable() {
                @Override
                public void run() {
                    notifyItemChanged(position);
                }
            }, 1000);
        }

        //附件发送/接收状态
        if (item.getAttachment() != null) {
            AttachStatusEnum attachStatus = item.getAttachStatus();
            if (attachStatus == AttachStatusEnum.def) {

            } else if (attachStatus == AttachStatusEnum.transferring) {
                setProgressVisiable(helper, item, true);
                if (item.getMsgType() == MsgTypeEnum.video)
                    helper.setViewVisibility(R.id.ivPlay, View.GONE);
                //更新进度
                updateProgress(helper, item);
            } else if (attachStatus == AttachStatusEnum.transferred) {
                setProgressVisiable(helper, item, false);
                if (item.getMsgType() == MsgTypeEnum.video)
                    helper.setViewVisibility(R.id.ivPlay, View.VISIBLE);
            } else if (attachStatus == AttachStatusEnum.fail) {
                setProgressVisiable(helper, item, false);
                if (item.getMsgType() == MsgTypeEnum.video)
                    helper.setViewVisibility(R.id.ivPlay, View.GONE);
            }
        }
    }

    private void updateProgress(LQRViewHolderForRecyclerView helper, IMMessage item) {
        if (item.getAttachment() instanceof ImageAttachment) {
            //更新进度
            BubbleImageView bivPic = helper.getView(R.id.bivPic);
            Float progress = getProgress(item);
            if (progress != null) {
                bivPic.setPercent((int) progress.floatValue());
                LogUtils.sf("图片进度：" + getProgress(item) + "%");
            }
        } else if (item.getAttachment() instanceof VideoAttachment) {
            //更新进度
            CircularProgressBar cpbLoading = helper.getView(R.id.cpbLoading);
            Float progress = getProgress(item);
            if (progress != null) {
                cpbLoading.setProgress(progress.intValue());
                LogUtils.sf("视频进度：" + getProgress(item) + "%");
            }
        }
    }

    private void setProgressVisiable(LQRViewHolderForRecyclerView helper, IMMessage item, boolean visiable) {
        if (visiable) {
            if (item.getMsgType() == MsgTypeEnum.text || item.getMsgType() == MsgTypeEnum.custom || item.getMsgType() == MsgTypeEnum.location) {
                helper.setViewVisibility(R.id.pbSending, View.VISIBLE);
            } else if (item.getMsgType() == MsgTypeEnum.image || item.getMsgType() == MsgTypeEnum.video) {
                BubbleImageView bivPic = helper.getView(R.id.bivPic);
                bivPic.showShadow(true);
                if (item.getMsgType() == MsgTypeEnum.image)
                    bivPic.setProgressVisible(true);
                else
                    helper.setViewVisibility(R.id.cpbLoading, View.VISIBLE).setViewVisibility(R.id.ivPlay, View.GONE);
            }
        } else {
            if (item.getMsgType() == MsgTypeEnum.text || item.getMsgType() == MsgTypeEnum.custom || item.getMsgType() == MsgTypeEnum.location) {
                helper.setViewVisibility(R.id.pbSending, View.GONE);
            } else if (item.getMsgType() == MsgTypeEnum.image || item.getMsgType() == MsgTypeEnum.video) {
                BubbleImageView bivPic = helper.getView(R.id.bivPic);
                bivPic.showShadow(false);
                if (item.getMsgType() == MsgTypeEnum.image)
                    bivPic.setProgressVisible(false);
                else
                    helper.setViewVisibility(R.id.cpbLoading, View.GONE).setViewVisibility(R.id.ivPlay, View.VISIBLE);
            }
        }
    }

    /**
     * 添加条目进度
     */
    public void putProgress(IMMessage message, float progress) {
        mProgress.put(message.getUuid(), progress);
    }

    /**
     * 获取条目进度
     */
    public Float getProgress(IMMessage message) {
        return mProgress.get(message.getUuid());
    }

    @Override
    public int getItemViewType(int position) {
        IMMessage msg = getData().get(position);
        MsgTypeEnum msgType = msg.getMsgType();
        if (msgType == notification) {
            return NOTIFICATION;
        }
        if (msgType == MsgTypeEnum.text) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_TEXT;
            } else {
                return RECEIVE_TEXT;
            }
        }
        if (msgType == MsgTypeEnum.custom) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_STICKER;
            } else {
                return RECEIVE_STICKER;
            }
        }
        if (msgType == MsgTypeEnum.image) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_IMAGE;
            } else {
                return RECEIVE_IMAGE;
            }
        }
        if (msgType == MsgTypeEnum.video) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_VIDEO;
            } else {
                return RECEIVE_VIDEO;
            }
        }
        if (msgType == MsgTypeEnum.location) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_LOCATION;
            } else {
                return RECEIVE_LOCATION;
            }
        }
        if (msgType == MsgTypeEnum.audio) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_AUDIO;
            } else {
                return RECEIVE_AUDIO;
            }
        }
        if (msgType == MsgTypeEnum.file) {
            if (msg.getDirect() == MsgDirectionEnum.Out) {
                return SEND_FILE;
            } else {
                return RECEIVE_FILE;
            }
        }
        return super.getItemViewType(position);
    }

    /*================== 语音相关 begin ==================*/
    private void playAudioDelayAndSetPlayNext(IMMessage item) {
        mAudioControl.startPlayAudioDelay(CLICK_TO_PLAY_AUDIO_DELAY, item, onPlayListener);
        mAudioControl.setPlayNext(true, SessionAdapter.this, item);
    }

    private MessageAudioControl.AudioControlListener onPlayListener = new BaseAudioControl.AudioControlListener() {
        @Override
        public void onAudioControllerReady(Playable playable) {
            play();
            LogUtils.sf("语音 onAudioControllerReady");
        }

        @Override
        public void onEndPlay(Playable playable) {
            stop();
        }

        @Override
        public void updatePlayingProgress(Playable playable, long curPosition) {

        }
    };

    private void play() {
        if (mAnimationView != null && mAnimationView.getBackground() instanceof AnimationDrawable) {
            AnimationDrawable animation = (AnimationDrawable) mAnimationView.getBackground();
            animation.start();
        }
    }

    private void stop() {
        if (mAnimationView != null && mAnimationView.getBackground() instanceof AnimationDrawable) {
            AnimationDrawable animation = (AnimationDrawable) mAnimationView.getBackground();
            animation.stop();
            animation.selectDrawable(0);
        }
    }

    /*================== 语音相关 end ==================*/
    /*================== 视频相关 begin ==================*/
    public static int getImageMaxEdge() {
        return (int) (165.0 / 320.0 * ScreenUtil.screenWidth);
    }

    public static int getImageMinEdge() {
        return (int) (76.0 / 320.0 * ScreenUtil.screenWidth);
    }

    // 设置控件的长宽
    protected void setLayoutParams(int width, int height, View... views) {
        for (View view : views) {
            ViewGroup.LayoutParams maskParams = view.getLayoutParams();
            maskParams.width = width;
            maskParams.height = height;
            view.setLayoutParams(maskParams);
        }
    }

    /*================== 视频相关 end ==================*/
}

54:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\App.java
package com.lqr.wechat;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;

import com.lqr.emoji.LQRUIKit;
import com.lqr.imagepicker.ImagePicker;
import com.lqr.imagepicker.view.CropImageView;
import com.lqr.wechat.activity.SplashActivity;
import com.lqr.wechat.imageloader.UILImageLoader;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimAccountSDK;
import com.lqr.wechat.nimsdk.utils.ScreenUtil;
import com.lqr.wechat.nimsdk.utils.StorageUtils;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.SDKOptions;
import com.netease.nimlib.sdk.StatusBarNotificationConfig;
import com.netease.nimlib.sdk.auth.LoginInfo;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.uinfo.UserInfoProvider;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.cookie.CookieJarImpl;
import com.zhy.http.okhttp.cookie.store.PersistentCookieStore;

import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import okhttp3.OkHttpClient;

/**
 * @创建者 CSDN_LQR
 * @描述 自定义Application类
 */
public class App extends Application {

    public static List<Activity> activities = new LinkedList<Activity>();

    @Override
    public void onCreate() {
        super.onCreate();

        //对全局属性赋值
        mContext = getApplicationContext();
        mMainThread = Thread.currentThread();
        mMainThreadId = android.os.Process.myTid();
        mMainLooper = getMainLooper();
        mHandler = new Handler();


        //因为LQRUIKit中已经对ImageLoader进行过初始化了
//        initImageLoader(getApplicationContext());

        initNim();
        initImagePicker();
        initOkHttp();
    }

    private void initNim() {
        LQRUIKit.init(mContext);
        // SDK初始化（启动后台服务，若已经存在用户登录信息， SDK 将完成自动登录，只是后台登录而已，跳转逻辑需要自己处理）
        NIMClient.init(this, loginInfo(), options());
        StorageUtils.init(mContext, null);
        ScreenUtil.init(mContext);
    }

    private void initOkHttp() {
        CookieJarImpl cookieJar = new CookieJarImpl(new PersistentCookieStore(getApplicationContext()));
        OkHttpClient okHttpClient = new OkHttpClient.Builder()
                .cookieJar(cookieJar)
//                .addInterceptor(new LoggerInterceptor("TAG"))
                .connectTimeout(10000L, TimeUnit.MILLISECONDS)
                .readTimeout(10000L, TimeUnit.MILLISECONDS)
                //其他配置
                .build();

        OkHttpUtils.initClient(okHttpClient);
    }

    /**
     * 完全退出
     */
    public static void exit() {
        for (Activity activity : activities) {
            activity.finish();
        }
    }

    /**
     * 重启当前应用
     */
    public static void restart() {
        final Intent intent = mContext.getPackageManager().getLaunchIntentForPackage(mContext.getPackageName());
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        mContext.startActivity(intent);
    }

    //以下属性应用于整个应用程序，合理利用资源，减少资源浪费
    private static Context mContext;//上下文
    private static Thread mMainThread;//主线程
    private static long mMainThreadId;//主线程id
    private static Looper mMainLooper;//循环队列
    private static Handler mHandler;//主线程Handler

    public static Context getmContext() {
        return mContext;
    }

    public static void setContext(Context mContext) {
        App.mContext = mContext;
    }

    public static Thread getMainThread() {
        return mMainThread;
    }

    public static void setMainThread(Thread mMainThread) {
        App.mMainThread = mMainThread;
    }

    public static long getMainThreadId() {
        return mMainThreadId;
    }

    public static void setMainThreadId(long mMainThreadId) {
        App.mMainThreadId = mMainThreadId;
    }

    public static Looper getMainThreadLooper() {
        return mMainLooper;
    }

    public static void setMainLooper(Looper mMainLooper) {
        App.mMainLooper = mMainLooper;
    }

    public static Handler getMainHandler() {
        return mHandler;
    }

    public static void setMainHandler(Handler mHandler) {
        App.mHandler = mHandler;
    }


    /**
     * 初始化仿微信控件ImagePicker
     */
    private void initImagePicker() {
        ImagePicker imagePicker = ImagePicker.getInstance();
        imagePicker.setImageLoader(new UILImageLoader());   //设置图片加载器
        imagePicker.setShowCamera(true);  //显示拍照按钮
        imagePicker.setCrop(true);        //允许裁剪（单选才有效）
        imagePicker.setSaveRectangle(true); //是否按矩形区域保存
        imagePicker.setSelectLimit(9);    //选中数量限制
        imagePicker.setStyle(CropImageView.Style.RECTANGLE);  //裁剪框的形状
        imagePicker.setFocusWidth(800);   //裁剪框的宽度。单位像素（圆形自动取宽高最小值）
        imagePicker.setFocusHeight(800);  //裁剪框的高度。单位像素（圆形自动取宽高最小值）
        imagePicker.setOutPutX(1000);//保存文件的宽度。单位像素
        imagePicker.setOutPutY(1000);//保存文件的高度。单位像素
    }

    public static DisplayImageOptions options = new DisplayImageOptions.Builder()//
            .showImageOnLoading(R.mipmap.default_image)         //设置图片在下载期间显示的图片
            .showImageForEmptyUri(R.mipmap.default_image)       //设置图片Uri为空或是错误的时候显示的图片
            .showImageOnFail(R.mipmap.default_image)            //设置图片加载/解码过程中错误时候显示的图片
            .cacheInMemory(true)                                //设置下载的图片是否缓存在内存中
            .cacheOnDisk(true)                                  //设置下载的图片是否缓存在SD卡中
            .build();                                           //构建完成

    /**
     * ImageLoader 图片组件初始化
     *
     * @param context
     */
    public static void initImageLoader(Context context) {

//        File cacheDir = com.nostra13.universalimageloader.utils.StorageUtils.getOwnCacheDirectory(context, "CSDN_LQR/cache");
        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)
//                .memoryCacheExtraOptions(480, 800) // max width, max height，即保存的每个缓存文件的最大长宽
                .threadPriority(Thread.NORM_PRIORITY - 2)
                .denyCacheImageMultipleSizesInMemory()
                .memoryCacheSize(2 * 1024 * 1024)
                .discCacheSize(50 * 1024 * 1024)
//                .discCacheFileCount(10) //缓存的文件数量
                .discCacheFileNameGenerator(new Md5FileNameGenerator()).tasksProcessingOrder(QueueProcessingType.LIFO)
//                .discCache(new UnlimitedDiscCache(cacheDir))//自定义缓存路径
                .defaultDisplayImageOptions(options)//DisplayImageOptions.createSimple()
                .writeDebugLogs()
                .build();

        ImageLoader.getInstance().init(config);
    }


    /*================== 网易云信 Begin ==================*/
    // 如果返回值为 null，则全部使用默认参数。
    private SDKOptions options() {
        SDKOptions options = new SDKOptions();

        // 如果将新消息通知提醒托管给 SDK 完成，需要添加以下配置。否则无需设置。
        StatusBarNotificationConfig config = new StatusBarNotificationConfig();
        config.notificationEntrance = SplashActivity.class; // 点击通知栏跳转到该Activity
        config.notificationSmallIconId = R.mipmap.ic_launcher;
        // 呼吸灯配置
        config.ledARGB = Color.GREEN;
        config.ledOnMs = 1000;
        config.ledOffMs = 1500;
        // 通知铃声的uri字符串
        config.notificationSound = "android.resource://com.lqr.wechat/raw/msg";
        options.statusBarNotificationConfig = config;

        // 配置保存图片，文件，log 等数据的目录
        // 如果 options 中没有设置这个值，SDK 会使用下面代码示例中的位置作为 SDK 的数据目录。
        // 该目录目前包含 log, file, image, audio, video, thumb 这6个目录。
        // 如果第三方 APP 需要缓存清理功能， 清理这个目录下面个子目录的内容即可。
        String sdkPath = Environment.getExternalStorageDirectory() + "/" + getPackageName() + "/nim";
        options.sdkStorageRootPath = sdkPath;

        // 配置是否需要预下载附件缩略图，默认为 true
        options.preloadAttach = true;

        // 配置附件缩略图的尺寸大小。表示向服务器请求缩略图文件的大小
        // 该值一般应根据屏幕尺寸来确定， 默认值为 Screen.width / 2
        options.thumbnailSize = 720 / 2;

        // 用户资料提供者, 目前主要用于提供用户资料，用于新消息通知栏中显示消息来源的头像和昵称
        options.userInfoProvider = new UserInfoProvider() {
            @Override
            public UserInfo getUserInfo(String account) {
                return null;
            }

            @Override
            public int getDefaultIconResId() {
                return R.mipmap.avatar_def;
            }

            @Override
            public Bitmap getTeamIcon(String tid) {
                return null;
            }

            @Override
            public Bitmap getAvatarForMessageNotifier(String account) {
                return null;
            }

            @Override
            public String getDisplayNameForMessageNotifier(String account, String sessionId,
                                                           SessionTypeEnum sessionType) {
                return null;
            }
        };
        return options;
    }

    // 如果已经存在用户登录信息，返回LoginInfo，否则返回null即可
    private LoginInfo loginInfo() {
        // 从本地读取上次登录成功时保存的用户登录信息
        String account = NimAccountSDK.getUserAccount();
        String token = NimAccountSDK.getUserAccount();

        if (!TextUtils.isEmpty(account) && !TextUtils.isEmpty(token)) {
            //加载用户信息
            UserCache.setAccount(account);
            return new LoginInfo(account, token);
        } else {
            return null;
        }
    }

    /*================== 网易云信 End ==================*/
}

55:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\AppConst.java
package com.lqr.wechat;


import com.lqr.wechat.utils.LogUtils;

/**
 * @创建者 CSDN_LQR
 * @描述 全局常量类
 */
public class AppConst {

    public static final String TAG = "CSDN_LQR";
    public static final int DEBUGLEVEL = LogUtils.LEVEL_ALL;//日志输出级别
    public static final int CACHELTIMEOUT = 10 * 60 * 1000;// 10分钟(缓存过期时间)

    public static final String NETWORK_CHANGE_RECEIVED_ACTION = "android.net.conn.CONNECTIVITY_CHANGE";
    public static final String SMS_RECEIVED_ACTION = "android.provider.Telephony.SMS_RECEIVED";

    public static final String SERVER_ADDRESS = "http://xxx.com/client";

    public static final class Account {
        public static final String KEY_USER_ACCOUNT = "account";
        public static final String KEY_USER_TOKEN = "token";
    }

    //二维码扫码指令前缀
    public static final class QRCodeCommend {
        public static final String ACCOUNT = "account:";
        public static final String TEAMID = "teamId:";
    }

    //用户
    public static final class User {
        private static final String USER = SERVER_ADDRESS + "/user";
        public static final String LOGIN = USER + "/login";//登录
        public static final String REGISTER = USER + "/insertOrUpdate";//注册
        public static final String WX_LOGIN = USER + "/androidWXLogin";//微信登录
    }

    public static final class Url {
        //帮助与反馈
        public static final String HELP_FEEDBACK = "https://kf.qq.com/touch/product/wechat_app.html?scene_id=kf338&code=021njRdi0RdQfk1Khybi0kEQdi0njRde&state=123";
        //购物
        public static final String SHOP = "http://wqs.jd.com/portal/wx/portal_indexV4.shtml?PTAG=17007.13.1&ptype=1";
        //游戏
        public static final String GAME = "http://h.4399.com/android";
    }

    //用户拓展信息字段
    public static final class UserInfoExt {
        public static final String AREA = "area";
        public static final String PHONE = "phone";
    }

    //我的群成员信息拓展字段
    public static final class MyTeamMemberExt {
        public static final String SHOULD_SHOW_NICK_NAME = "shouldShowNickName";
    }

}

56:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\broadcast\AuthBroadcastReceiver.java
package com.lqr.wechat.broadcast;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

import com.lqr.wechat.activity.LoginActivity;
import com.lqr.wechat.utils.UIUtils;

import static com.netease.nimlib.sdk.StatusCode.*;

/**
 * @创建者 CSDN_LQR
 * @描述 登录出错广播接收者
 */
public class AuthBroadcastReceiver extends BroadcastReceiver {

    public static String ACTION = AuthBroadcastReceiver.class.getName();

    @Override
    public void onReceive(Context context, Intent intent) {

        if (intent.getAction().equals(ACTION)) {

            int status = intent.getIntExtra("status", -1);
            if (status == FORBIDDEN.getValue()) {
                UIUtils.showToast("被服务器禁止登录");
            } else if (status == KICKOUT.getValue()) {
                UIUtils.showToast("被其他端的登录踢掉");
            } else if (status == KICK_BY_OTHER_CLIENT.getValue()) {
                UIUtils.showToast("被同时在线的其他端主动踢掉");
            } else if (status == PWD_ERROR.getValue()) {
                UIUtils.showToast("用户名或密码错误");
            }
            Intent i = new Intent(context, LoginActivity.class);
            i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(i);

        }

    }
}

57:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\broadcast\NetWorkChangeBroadcastReceiver.java
package com.lqr.wechat.broadcast;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

import com.lqr.wechat.AppConst;


/**
 * @创建者 CSDN_LQR
 * @描述 网络变更广播接收者
 */
public class NetWorkChangeBroadcastReceiver extends BroadcastReceiver {
    private NetWorkChangeListener mNetWorkChangeListener;

    public NetWorkChangeBroadcastReceiver(NetWorkChangeListener netWorkChangeListener) {
        super();
        this.mNetWorkChangeListener = netWorkChangeListener;
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(AppConst.NETWORK_CHANGE_RECEIVED_ACTION)) {
            ConnectivityManager connectivityManager =
                    (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            if (connectivityManager != null) {
                NetworkInfo[] networkInfos = connectivityManager.getAllNetworkInfo();
                for (int i = 0; i < networkInfos.length; i++) {
                    NetworkInfo.State state = networkInfos[i].getState();
                    //发现可以联网就不再判断
                    if (NetworkInfo.State.CONNECTED == state) {
                        mNetWorkChangeListener.onReceived();
                        return;
                    }
                }
            }
        }
    }

    /**
     * 接口回调
     */
    public interface NetWorkChangeListener {
        void onReceived();
    }

}

58:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\broadcast\SMSBroadcastReceiver.java
package com.lqr.wechat.broadcast;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.telephony.SmsMessage;

import com.lqr.wechat.AppConst;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @创建者 CSDN_LQR
 * @描述 短信广播接收者
 */
public class SMSBroadcastReceiver extends BroadcastReceiver {
    private static MessageListener mMessageListener;

    public SMSBroadcastReceiver(MessageListener messageListener) {
        super();
        mMessageListener = messageListener;
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(AppConst.SMS_RECEIVED_ACTION)) {
            Object[] pdus = (Object[]) intent.getExtras().get("pdus");
            for (Object pdu : pdus) {
                SmsMessage smsMessage = SmsMessage.createFromPdu((byte[]) pdu);
                //短信内容
                String content = smsMessage.getDisplayMessageBody();

                //过滤短信
                int a = content.indexOf("华谕咕饥");
                if (a > 0) {
                    //提取六位数字字符串
                    Pattern p = Pattern.compile("\\d{6}");
                    Matcher m = p.matcher(content);
                    m.find();
                    String code = m.group();
                    if (code != null && !code.equals("")) {
                        mMessageListener.onReceived(code);
                        //中断广播
                        abortBroadcast();
                    }
                }
            }
        }

    }

    //回调接口
    public interface MessageListener {
        void onReceived(String message);
    }

}

59:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\factory\ListViewFactory.java
package com.lqr.wechat.factory;

import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.widget.ListView;

import com.lqr.wechat.utils.UIUtils;


/**
 * @创建者 CSDN_LQR
 * @描述 ListView工厂（已经配置好了样式）
 */
public class ListViewFactory {

    public static ListView createListView() {
        ListView listView = new ListView(UIUtils.getContext());

        // 简单的设置
        listView.setCacheColorHint(Color.TRANSPARENT);
        listView.setFastScrollEnabled(true);

        //去掉listview的item点击时的蓝色背景
        listView.setSelector(new ColorDrawable(Color.TRANSPARENT));
        return listView;
    }
}

60:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\factory\PopupWindowFactory.java
package com.lqr.wechat.factory;

import android.annotation.TargetApi;
import android.app.Activity;
import android.graphics.drawable.BitmapDrawable;
import android.os.Build;
import android.support.annotation.NonNull;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.PopupWindow;

/**
 * @创建者 林洽锐
 * @创建时间 2016/8/19 0019
 * @描述 popupwindow工厂
 */
public class PopupWindowFactory {

    /**
     * 得到在屏幕中间的popupwindow并显示（宽高都是包裹视图）
     *
     * @param contentView popupwindow要显示的视图
     * @param parentView  参考视图
     * @return
     */
    public static PopupWindow getPopupWindowInCenter(View contentView, View parentView) {
        //        int width = ViewGroup.LayoutParams.MATCH_PARENT;
        int width = ViewGroup.LayoutParams.WRAP_CONTENT;
        int height = ViewGroup.LayoutParams.WRAP_CONTENT;

        return getPopupWindowInCenter(contentView, width, height, parentView);
    }

    /**
     * 得到在屏幕中间的popupwindow并显示
     *
     * @param contentView popupwindow要显示的视图
     * @param width       popupwindow的宽度
     * @param height      popupwindow的高度
     * @param parentView  参考视图
     * @return
     */
    public static PopupWindow getPopupWindowInCenter(View contentView, int width, int height, View parentView) {
        //Gravity.CENTER:在屏幕居中，无偏移
        return getPopupWindowAtLocation(contentView, width, height, parentView, Gravity.CENTER, 0, 0);
    }

    /**
     * 得到指定在某个视图内位置的popupwindow并显示
     *
     * @param contentView popupwindow要显示的视图
     * @param width       popupwindow的宽度
     * @param height      popupwindow的高度
     * @param parentView  参考视图
     * @param gravityType 在参考视图中的相对位置
     * @param xoff        x轴偏移量
     * @param yoff        y轴偏移量
     * @return
     */
    public static PopupWindow getPopupWindowAtLocation(View contentView, int width, int height, View parentView, int gravityType, int xoff, int yoff) {
        PopupWindow popupWindow = getPopupWindow(contentView, width, height);

        //在parentView中偏移xoff和yoff
        popupWindow.showAtLocation(parentView,
                gravityType, xoff, yoff);

        return popupWindow;
    }

    public static PopupWindow getPopupWindowAtLocation(View contentView, View parentView, int gravityType, int xoff, int yoff) {
        return getPopupWindowAtLocation(contentView, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, parentView, gravityType, xoff, yoff);
    }


    /**
     * 得到一个自动识别在目标控件上方或下方的pupupwindow并显示
     *
     * @param contentView popupwindow要显示的视图
     * @param width       popupwindow的宽度
     * @param activity    能得到getWindowManager()的上下文
     * @return
     */
    public static PopupWindow getPopupWindowAsDropDownParentAuto(View contentView, int width, int height, View anchorView, Activity activity) {

        //        View itemView = (View) contentView.getParent();// 得到contentView的父控件
        PopupWindow popupWindow = getPopupWindow(contentView, width, height);

        // 控制它放置的位置
        if (isShowBottom(activity, anchorView)) {// 显示popupwindow在itemView的下方，偏移量都为0
            popupWindow.showAsDropDown(anchorView, 0, 0);
        } else {// 显示popupwindow在itemView的上方，偏移量y都为-2*itemView.getHeight()
            popupWindow.showAsDropDown(anchorView, 0,
                    -2 * anchorView.getHeight());
        }

        return popupWindow;
    }


    /**
     * 得到在指定某个视图外的popupwindow并显示
     *
     * @param contentView popupwindow要显示的视图
     * @param width       popupwindow的宽度
     * @param height      popupwindow的高度
     * @param anchorView  参考视图
     * @param xoff        x轴偏移量
     * @param yoff        y轴偏移量
     * @return
     */
    public static PopupWindow getPopupWindowAsDropDown(View contentView, int width, int height, View anchorView, int xoff, int yoff) {
        PopupWindow popupWindow = getPopupWindow(contentView, width, height);
        popupWindow.showAsDropDown(anchorView, xoff, yoff);
        return popupWindow;
    }

    /**
     * 得到在指定某个视图外的popupwindow并显示(该方法只支持4.4以上)
     *
     * @param contentView popupwindow要显示的视图
     * @param width       popupwindow的宽度
     * @param height      popupwindow的高度
     * @param anchorView  参考视图
     * @param gravityType 在参考视图外的相对位置
     * @param xoff        x轴偏移量
     * @param yoff        y轴偏移量
     * @return
     */
    @TargetApi(Build.VERSION_CODES.KITKAT)
    public static PopupWindow getPopupWindowAsDropDown(View contentView, int width, int height, View anchorView, int gravityType, int xoff, int yoff) {
        PopupWindow popupWindow = getPopupWindow(contentView, width, height);
        popupWindow.showAsDropDown(anchorView, xoff, yoff, gravityType);
        return popupWindow;
    }


    /**
     * 判断popupWindow是否显示在条目的下方
     *
     * @param itemView
     * @return
     */
    private static boolean isShowBottom(Activity context, View itemView) {
        // 得到屏幕的高度
        // int heightPixels =
        // getResources().getDisplayMetrics().heightPixels;//方式1
        int screenHeight = context.getWindowManager().getDefaultDisplay().getHeight();// 方式2

        int[] location = new int[2];
        // location[0]-->x
        // location[1]-->y
        itemView.getLocationInWindow(location);
        // 得到itemView在屏幕中Y轴的值
        int itemViewY = location[1];

        // 得到itemView距离屏幕底部的距离
        int distance = screenHeight - itemViewY - itemView.getHeight();

        if (distance < itemView.getHeight()) {// 条目下方放不下popupWindow
            return false;
        } else {// 条目下方放得下popupWindow
            return true;
        }
    }

    /**
     * 最核心的pupupwindow创建方法
     *
     * @param contentView popupwindow要显示的视图
     * @param width       popupwindow的宽度
     * @param height      popupwindow的高度
     * @return
     */
    @NonNull
    private static PopupWindow getPopupWindow(View contentView, int width, int height) {
        PopupWindow popupWindow = new PopupWindow(contentView, width, height, true);
        popupWindow.setOutsideTouchable(false);
        openOutsideTouchable(popupWindow);
        return popupWindow;
    }

    /**
     * 点击popupwindow范围以外的地方时隐藏
     *
     * @param popupWindow
     */
    public static void openOutsideTouchable(PopupWindow popupWindow) {
        popupWindow.setBackgroundDrawable(new BitmapDrawable());
        popupWindow.setOutsideTouchable(true);
    }

    /**
     * 使window变暗
     */
    public static void makeWindowDark(Activity activity) {
        makeWindowDark(activity, 0.7f);
    }

    public static void makeWindowDark(Activity activity, float alpha) {
        WindowManager.LayoutParams lp = activity.getWindow().getAttributes();
        lp.alpha = alpha;
        activity.getWindow().setAttributes(lp);
    }

    /**
     * 使window变亮
     */
    public static void makeWindowLight(Activity activity) {
        WindowManager.LayoutParams lp = activity.getWindow().getAttributes();
        lp.alpha = 1f;
        activity.getWindow().setAttributes(lp);
    }


}

61:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\factory\ThreadPoolFactory.java
package com.lqr.wechat.factory;


import com.lqr.wechat.manager.ThreadPoolProxy;

/**
 * @创建者 CSDN_LQR
 * @描述 线程池工厂
 */
public class ThreadPoolFactory {

    static ThreadPoolProxy mNormalPool;
    static ThreadPoolProxy mDownLoadPool;

    /**
     * 得到一个普通的线程池
     *
     * @return
     */
    public static ThreadPoolProxy getNormalPool() {
        if (mNormalPool == null) {
            synchronized (ThreadPoolFactory.class) {
                if (mNormalPool == null) {
                    mNormalPool = new ThreadPoolProxy(5, 5, 3000);
                }
            }
        }
        return mNormalPool;
    }

    /**
     * 得到一个下载的线程池
     *
     * @return
     */
    public static ThreadPoolProxy getDownLoadPool() {
        if (mDownLoadPool == null) {
            synchronized (ThreadPoolFactory.class) {
                if (mDownLoadPool == null) {
                    mDownLoadPool = new ThreadPoolProxy(3, 3, 3000);
                }
            }
        }
        return mDownLoadPool;
    }
}

62:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\BaseFragment.java
package com.lqr.wechat.fragment;

import android.app.Dialog;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.lqr.wechat.R;
import com.lqr.wechat.view.CustomDialog;

import me.drakeet.materialdialog.MaterialDialog;


/**
 * @创建者 CSDN_LQR
 * @描述 Fragment的基类
 */
public abstract class BaseFragment extends Fragment {

    private CustomDialog mDialogWaiting;
    private MaterialDialog mMaterialDialog;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init();
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return initView();
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        initData();
        initListener();
        super.onActivityCreated(savedInstanceState);
    }

    /**
     * 初始化fview，而且是必须实现，但是不知道具体实现，定义成抽象方法
     *
     * @return
     */
    public abstract View initView();

    public void init() {

    }

    public void initData() {

    }

    public void initListener() {

    }

    /**
     * 显示等待提示框
     */
    public Dialog showWaitingDialog(String tip) {
        hideWaitingDialog();
        View view = View.inflate(getActivity(), R.layout.dialog_waiting, null);
        if (!TextUtils.isEmpty(tip))
            ((TextView) view.findViewById(R.id.tvTip)).setText(tip);
        mDialogWaiting = new CustomDialog(getActivity(), view, R.style.dialog);
        mDialogWaiting.show();
        return mDialogWaiting;
    }

    /**
     * 隐藏等待提示框
     */
    public void hideWaitingDialog() {
        if (mDialogWaiting != null) {
            mDialogWaiting.dismiss();
            mDialogWaiting = null;
        }
    }

    /**
     * 显示MaterialDialog
     */
    public MaterialDialog showMaterialDialog(String tip, String message, String positiveText, String negativeText, View.OnClickListener positiveButtonClickListener, View.OnClickListener negativeButtonClickListener) {
        hideMaterialDialog();
        mMaterialDialog = new MaterialDialog(getActivity());
        if (!TextUtils.isEmpty(tip)) {
            mMaterialDialog.setTitle(tip);
        }
        if (!TextUtils.isEmpty(message)) {
            mMaterialDialog.setMessage(message);
        }
        if (!TextUtils.isEmpty(positiveText)) {
            mMaterialDialog.setPositiveButton(positiveText, positiveButtonClickListener);
        }
        if (!TextUtils.isEmpty(negativeText)) {
            mMaterialDialog.setNegativeButton(negativeText, negativeButtonClickListener);
        }
        mMaterialDialog.show();
        return mMaterialDialog;
    }

    /**
     * 隐藏MaterialDialog
     */
    public void hideMaterialDialog() {
        if (mMaterialDialog != null) {
            mMaterialDialog.dismiss();
            mMaterialDialog = null;
        }
    }

}

63:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\ContactsFragment.java
package com.lqr.wechat.fragment;

import android.content.Intent;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.recyclerview.LQRRecyclerView;
import com.lqr.wechat.R;
import com.lqr.wechat.activity.AllTagActvitiy;
import com.lqr.wechat.activity.MainActivity;
import com.lqr.wechat.activity.NewFriendActivity;
import com.lqr.wechat.activity.TeamCheatListActivity;
import com.lqr.wechat.activity.UserInfoActivity;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.Contact;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimRecentContactSDK;
import com.lqr.wechat.nimsdk.NimSystemSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.SortUtils;
import com.lqr.wechat.utils.StringUtils;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.QuickIndexBar;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.friend.model.Friend;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.constant.SystemMessageType;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;

import static com.netease.nimlib.sdk.msg.constant.SystemMessageType.TeamInvite;

/**
 * @创建者 CSDN_LQR
 * @描述 通讯录
 */
public class ContactsFragment extends BaseFragment {

    private List<Contact> mContacts = new ArrayList<>();
    private LQRAdapterForRecyclerView<Contact> mAdapter;
    private int i;
    private List<Friend> mFriends = new ArrayList<>();

    @InjectView(R.id.rvContacts)
    LQRRecyclerView mRvContacts;
    @InjectView(R.id.quickIndexBar)
    QuickIndexBar mQuickIndexBar;
    @InjectView(R.id.tvLetter)
    TextView mTvLetter;

    //列表首尾布局
    View mHeaderView;
    TextView mFooterTv;

    //联系人列表最上条目
    LinearLayout mLlNewFriend;
    LinearLayout mLlGroupCheat;
    LinearLayout mLlTag;
    LinearLayout mLlOffical;
    private View mVNewFriendUnread;
    private View mVGroupCheatUnread;


    @Override
    public View initView() {
        View view = View.inflate(getActivity(), R.layout.fragment_contacts, null);
        ButterKnife.inject(this, view);
        initHeaderViewAndFooterView();
        return view;
    }

    @Override
    public void initData() {

        try {
            mFriends.clear();
            mContacts.clear();

            //得到好友列表
            List<Friend> friends = NimFriendSDK.getFriends();
            if (!StringUtils.isEmpty(friends)) {
                mFriends.addAll(friends);

                //得到本地没有信息的账号
                List<String> accountList = new ArrayList<>();
                for (int i = 0; i < mFriends.size(); i++) {
                    String account = mFriends.get(i).getAccount();
                    if (NimUserInfoSDK.getUser(account) == null) {
                        accountList.add(account);
                    }
                }

                //从服务器上获取用户信息
                if (!StringUtils.isEmpty(accountList)) {
                    NimUserInfoSDK.getUserInfosFormServer(accountList, new RequestCallback<List<NimUserInfo>>() {
                        @Override
                        public void onSuccess(List<NimUserInfo> param) {
                            setDataAndUpdateView();
                        }

                        @Override
                        public void onFailed(int code) {
                            UIUtils.showToast("获取联系人信息失败" + code);
                        }

                        @Override
                        public void onException(Throwable exception) {
                            exception.printStackTrace();
                        }
                    });
                } else {
                    setDataAndUpdateView();
                }
            } else {
                setDataAndUpdateView();
            }
        } catch (Exception e) {
            e.printStackTrace();
            initData();
        }
    }

    @Override
    public void initListener() {
        mQuickIndexBar.setListener(new QuickIndexBar.OnLetterUpdateListener() {
            @Override
            public void onLetterUpdate(String letter) {
                //显示字母提示
                showLetter(letter);

                //滑动对对应字母条目处
                if ("↑".equalsIgnoreCase(letter)) {
                    mRvContacts.moveToPosition(0);
                } else if ("☆".equalsIgnoreCase(letter)) {
                    mRvContacts.moveToPosition(0);
                } else {
                    //找出第一个对应字母的位置后，滑动到指定位置
                    for (i = 0; i < mContacts.size(); i++) {
                        Contact contact = mContacts.get(i);
                        String c = contact.getPinyin().charAt(0) + "";
                        if (c.equalsIgnoreCase(letter)) {
                            mRvContacts.moveToPosition(i);
                            break;
                        }
                    }
                }
            }
        });

        mLlNewFriend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().startActivityForResult(new Intent(getActivity(), NewFriendActivity.class), MainActivity.REQ_CLEAR_UNREAD);
            }
        });

        mLlGroupCheat.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().startActivity(new Intent(getActivity(), TeamCheatListActivity.class));
            }
        });

        mLlTag.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().startActivity(new Intent(getActivity(), AllTagActvitiy.class));
            }
        });
        mLlOffical.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                UIUtils.showToast("公众号");
            }
        });

    }

    @Override
    public void onResume() {
        super.onResume();
        updateHeaderViewUnreadCount();
//        ((MainActivity) getActivity()).updateContactCount();
    }

    private void initHeaderViewAndFooterView() {
        mHeaderView = View.inflate(getActivity(), R.layout.header_contacts_rv, null);

        mLlNewFriend = (LinearLayout) mHeaderView.findViewById(R.id.llNewFriend);
        mLlGroupCheat = (LinearLayout) mHeaderView.findViewById(R.id.llGroupCheat);
        mLlTag = (LinearLayout) mHeaderView.findViewById(R.id.llTag);
        mLlOffical = (LinearLayout) mHeaderView.findViewById(R.id.llOffical);

        mVNewFriendUnread = mHeaderView.findViewById(R.id.vNewFriendUnread);
        mVGroupCheatUnread = mHeaderView.findViewById(R.id.vGroupCheatUnread);

        mFooterTv = new TextView(getContext());
        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, UIUtils.dip2Px(50));
        mFooterTv.setLayoutParams(params);
        mFooterTv.setGravity(Gravity.CENTER);
    }

    /**
     * 更新列表头部中未读消息提示
     */
    public void updateHeaderViewUnreadCount() {
        List<SystemMessageType> types = new ArrayList<>(1);
        types.add(SystemMessageType.AddFriend);
        int unreadCountAddFriend = NimSystemSDK.querySystemMessageUnreadCountByType(types);
        mVNewFriendUnread.setVisibility(unreadCountAddFriend > 0 ? View.VISIBLE : View.GONE);

        types.clear();
        types.add(TeamInvite);
        int unreadCountTeamInvite = NimSystemSDK.querySystemMessageUnreadCountByType(types);
        mVGroupCheatUnread.setVisibility(unreadCountTeamInvite > 0 ? View.VISIBLE : View.GONE);
    }

    private void setDataAndUpdateView() {
        if (mFriends != null) {
            for (int i = 0; i < mFriends.size(); i++) {
                Friend friend = mFriends.get(i);
                NimUserInfo userInfo = NimUserInfoSDK.getUser(friend.getAccount());
                mContacts.add(new Contact(friend, userInfo));
            }

            //将自己也加入到联系人中
//            mContacts.add(new Contact(null, NimUserInfoSDK.getUser(UserCache.getAccount())));
            //整理排序
            SortUtils.sortContacts(mContacts);

            if (mFooterTv != null) {
                mFooterTv.setVisibility(View.VISIBLE);
                mFooterTv.setText(mContacts.size() + "位联系人");
            }
        } else {
            mFooterTv.setVisibility(View.GONE);
        }
        setAdapter();
    }


    private void setAdapter() {
        mAdapter = new LQRAdapterForRecyclerView<Contact>(getActivity(), R.layout.item_contact_cv, mContacts) {
            @Override
            public void convert(LQRViewHolderForRecyclerView helper, final Contact item, int position) {
                helper.setText(R.id.tvName, TextUtils.isEmpty(item.getAlias()) ? item.getName() : item.getAlias());
                if (!TextUtils.isEmpty(item.getAvatar())) {
                    ImageLoaderManager.LoadNetImage(item.getAvatar(), (ImageView) helper.getView(R.id.ivHeader));
                } else {
                    helper.setImageResource(R.id.ivHeader, R.mipmap.default_header);
                }

                String str = "";
                //得到当前字母
                String currentLetter = item.getPinyin().charAt(0) + "";

                if (position == 0) {
                    str = currentLetter;
                } else {
                    //得到上一个字母
                    String preLetter = mContacts.get(position - 1).getPinyin().charAt(0) + "";
                    //如果和上一个字母的首字母不同则显示字母栏
                    if (!preLetter.equalsIgnoreCase(currentLetter)) {
                        str = currentLetter;
                    }

                    int nextIndex = position + 1;
                    if (nextIndex < mContacts.size() - 1) {
                        //得到下一个字母
                        String nextLetter = mContacts.get(nextIndex).getPinyin().charAt(0) + "";
                        //如果和下一个字母的首字母不同则隐藏下划线
                        if (!nextLetter.equalsIgnoreCase(currentLetter)) {
                            helper.setViewVisibility(R.id.vLine, View.INVISIBLE);
                        } else {
                            helper.setViewVisibility(R.id.vLine, View.VISIBLE);
                        }
                    } else {
                        helper.setViewVisibility(R.id.vLine, View.INVISIBLE);
                    }
                }
                if (position == mContacts.size() - 1) {
                    helper.setViewVisibility(R.id.vLine, View.GONE);
                }


                //根据str是否为空决定字母栏是否显示
                if (TextUtils.isEmpty(str)) {
                    helper.setViewVisibility(R.id.tvIndex, View.GONE);
                } else {
                    helper.setViewVisibility(R.id.tvIndex, View.VISIBLE);
                    helper.setText(R.id.tvIndex, currentLetter);
                }

                //条目点击跳转好友信息查看界面
                helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent(getActivity(), UserInfoActivity.class);
                        intent.putExtra("account", item.getAccount());
                        startActivity(intent);
                        //清空该好友的消息未读数
                        NimRecentContactSDK.clearUnreadCount(item.getAccount(), SessionTypeEnum.P2P);
                    }
                });

            }
        };
        //加入头部
        mAdapter.addHeaderView(mHeaderView);
        //加入脚部
        mAdapter.addFooterView(mFooterTv);
        //设置适配器
        if (mRvContacts != null)
            mRvContacts.setAdapter(mAdapter.getHeaderAndFooterAdapter());
    }

    /**
     * 显示所触摸到的字母
     *
     * @param letter
     */
    protected void showLetter(String letter) {
        mTvLetter.setVisibility(View.VISIBLE);// 设置为可见
        mTvLetter.setText(letter);

        UIUtils.getMainThreadHandler().removeCallbacksAndMessages(null);
        UIUtils.postTaskDelay(new Runnable() {
            @Override
            public void run() {
                mTvLetter.setVisibility(View.GONE);
            }
        }, 500);
    }

    /**
     * 是否显示快速导航条
     *
     * @param show
     */
    public void showQuickIndexBar(boolean show) {
        mQuickIndexBar.setVisibility(show ? View.VISIBLE : View.GONE);
        mQuickIndexBar.invalidate();
    }
}

64:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\DiscoveryFragment.java
package com.lqr.wechat.fragment;

import android.content.Intent;
import android.view.View;

import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.activity.NearbyPerpleActivity;
import com.lqr.wechat.activity.ScanActivity;
import com.lqr.wechat.activity.WebViewActivity;

import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * @创建者 CSDN_LQR
 * @描述 发现
 */
public class DiscoveryFragment extends BaseFragment {

    private Intent mIntent;

    @OnClick({R.id.oivScan, R.id.oivNearby, R.id.oivShop, R.id.oivGame})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.oivScan:
                startActivity(new Intent(getActivity(), ScanActivity.class));
                break;
            case R.id.oivNearby:
                startActivity(new Intent(getActivity(), NearbyPerpleActivity.class));
                break;
            case R.id.oivShop:
                mIntent = new Intent(getActivity(), WebViewActivity.class);
                mIntent.putExtra("url", AppConst.Url.SHOP);
                mIntent.putExtra("title", "京东购物");
                startActivity(mIntent);
                break;
            case R.id.oivGame:
                mIntent = new Intent(getActivity(), WebViewActivity.class);
                mIntent.putExtra("url", AppConst.Url.GAME);
                mIntent.putExtra("title", "微信游戏");
                startActivity(mIntent);
                break;
        }
    }

    @Override
    public View initView() {
        View view = View.inflate(getActivity(), R.layout.fragment_discovery, null);
        ButterKnife.inject(this, view);
        return view;
    }
}

65:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\Func1Fragment.java
package com.lqr.wechat.fragment;

import android.content.Intent;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.lqr.imagepicker.ui.ImageGridActivity;
import com.lqr.wechat.R;
import com.lqr.wechat.activity.RedPacketActivity;
import com.lqr.wechat.activity.SessionActivity;
import com.lqr.wechat.activity.TransferActivity;
import com.lqr.wechat.view.CustomDialog;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;

import static com.lqr.wechat.R.id.tvOne;
import static com.lqr.wechat.R.id.tvTwo;
import static com.lqr.wechat.activity.SessionActivity.IMAGE_PICKER;

/**
 * @创建者 CSDN_LQR
 * @描述 聊天界面功能页面1
 */
public class Func1Fragment extends BaseFragment {

    private View mContentView;
    private CustomDialog mDialog;
    private TextView mTvOne;
    private TextView mTvTwo;

    @InjectView(R.id.llPic)
    LinearLayout mLlPic;
    @InjectView(R.id.llRecord)
    LinearLayout mLlRecord;
    @InjectView(R.id.llRedPacket)
    LinearLayout mLlRedPacket;
    @InjectView(R.id.llTransfer)
    LinearLayout mLlTransfer;

    @InjectView(R.id.llCollection)
    LinearLayout mLlCollection;
    @InjectView(R.id.llLocation)
    LinearLayout mLlLocation;
    @InjectView(R.id.llVideo)
    LinearLayout mLlVideo;
    @InjectView(R.id.llBusinessCard)
    LinearLayout mLlBusinessCard;

    Intent mIntent;

    @OnClick({R.id.llPic, R.id.llRecord, R.id.llRedPacket, R.id.llTransfer, R.id.llLocation, R.id.llVideo})
    public void click(View view) {
        switch (view.getId()) {
            case R.id.llPic:
                mIntent = new Intent(getActivity(), ImageGridActivity.class);
                startActivityForResult(mIntent, IMAGE_PICKER);
                break;
            case R.id.llRecord:
                ((SessionActivity)getActivity()).showPlayVideo();
                break;
            case R.id.llRedPacket:
                mIntent = new Intent(getActivity(), RedPacketActivity.class);
                startActivity(mIntent);
                break;
            case R.id.llTransfer:
                mIntent = new Intent(getActivity(), TransferActivity.class);
                startActivity(mIntent);
                break;
            case R.id.llLocation:
                mContentView = View.inflate(getActivity(), R.layout.dialog_menu_two_session, null);
                mDialog = new CustomDialog(getActivity(), mContentView, R.style.dialog);
                mDialog.show();
                mTvOne = (TextView) mContentView.findViewById(tvOne);
                mTvTwo = (TextView) mContentView.findViewById(tvTwo);
                mTvOne.setText("发送位置");
                mTvTwo.setText("共享实时位置");
                mTvOne.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        mDialog.dismiss();
                    }
                });
                mTvTwo.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        mDialog.dismiss();
                    }
                });

                break;
            case R.id.llVideo:
                mContentView = View.inflate(getActivity(), R.layout.dialog_menu_two_session, null);
                mDialog = new CustomDialog(getActivity(), mContentView, R.style.dialog);
                mDialog.show();
                mTvOne = (TextView) mContentView.findViewById(tvOne);
                mTvTwo = (TextView) mContentView.findViewById(tvTwo);
                mTvOne.setText("视频聊天");
                mTvTwo.setText("语音聊天");
                mTvOne.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        mDialog.dismiss();
                    }
                });
                mTvTwo.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        mDialog.dismiss();
                    }
                });
                break;

        }
    }

    @Override
    public View initView() {
        View view = View.inflate(getActivity(), R.layout.fragment_func_page1, null);
        ButterKnife.inject(this, view);
        return view;
    }

}

66:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\Func2Fragment.java
package com.lqr.wechat.fragment;

import android.view.View;
import android.widget.LinearLayout;

import com.lqr.wechat.R;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 聊天界面功能页面2
 */
public class Func2Fragment extends BaseFragment {

    @InjectView(R.id.llVoice)
    LinearLayout mLlVoice;

    @Override
    public View initView() {
        View view = View.inflate(getActivity(), R.layout.fragment_func_page2, null);
        ButterKnife.inject(this, view);
        return view;
    }
}

67:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\MeFragment.java
package com.lqr.wechat.fragment;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.text.TextUtils;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.lqr.wechat.AppConst;
import com.lqr.wechat.R;
import com.lqr.wechat.activity.CardPaketActivity;
import com.lqr.wechat.activity.MyInfoActivity;
import com.lqr.wechat.activity.SettingActivity;
import com.lqr.wechat.factory.ThreadPoolFactory;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.UserCache;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.UIUtils;
import com.lqr.wechat.view.CustomDialog;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.uinfo.constant.GenderEnum;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import cn.bingoogolapple.qrcode.zxing.QRCodeEncoder;

/**
 * @创建者 CSDN_LQR
 * @描述 我
 */
public class MeFragment extends BaseFragment {

    private NimUserInfo mNimUserInfo;
    private View mQRCodeCardView;
    private CustomDialog mQRCodeCardDialog;
    private ImageView mIvHeaderQRCodeCard;
    private TextView mTvNameQRCodeCard;
    private ImageView mIvGenderQRCodeCard;
    private ImageView mIvCardQRCodeCard;

    @InjectView(R.id.ivHeader)
    ImageView mIvHeader;
    @InjectView(R.id.tvName)
    TextView mTvName;
    @InjectView(R.id.tvAccount)
    TextView mTvAccount;


    @OnClick({R.id.llMyInfo, R.id.ivQRCordCard, R.id.oivCardPaket, R.id.oivSetting})
    public void click(View view) {
        Intent intent;
        switch (view.getId()) {
            case R.id.llMyInfo:
                intent = new Intent(getActivity(), MyInfoActivity.class);
                startActivity(intent);
                break;
            case R.id.ivQRCordCard:
                if (mQRCodeCardView == null) {
                    mQRCodeCardView = View.inflate(getActivity(), R.layout.include_qrcode_card, null);
                    mQRCodeCardView.setBackgroundResource(R.drawable.shape_corner_rect_solid_white);
                    mIvHeaderQRCodeCard = (ImageView) mQRCodeCardView.findViewById(R.id.ivHeader);
                    mTvNameQRCodeCard = (TextView) mQRCodeCardView.findViewById(R.id.tvName);
                    mIvGenderQRCodeCard = (ImageView) mQRCodeCardView.findViewById(R.id.ivGender);
                    mIvCardQRCodeCard = (ImageView) mQRCodeCardView.findViewById(R.id.ivCard);
                    mQRCodeCardDialog = new CustomDialog(getActivity(), 300, 400, mQRCodeCardView, R.style.dialog);
                }

                String avatar = mNimUserInfo.getAvatar();
                if (!TextUtils.isEmpty(avatar))
                    ImageLoaderManager.LoadNetImage(avatar, mIvHeaderQRCodeCard);
                else
                    mIvHeaderQRCodeCard.setImageResource(R.mipmap.default_header);
                mTvNameQRCodeCard.setText(mNimUserInfo.getName());
                if (mNimUserInfo.getGenderEnum() == GenderEnum.FEMALE) {
                    mIvGenderQRCodeCard.setImageResource(R.mipmap.ic_gender_female);
                } else if (mNimUserInfo.getGenderEnum() == GenderEnum.MALE) {
                    mIvGenderQRCodeCard.setImageResource(R.mipmap.ic_gender_male);
                } else {
                    mIvGenderQRCodeCard.setVisibility(View.GONE);
                }
                Bitmap bitmap = ((BitmapDrawable) mIvHeader.getDrawable()).getBitmap();
                showQRCordCard(bitmap);
                mQRCodeCardDialog.show();
                break;
            case R.id.oivCardPaket:
                intent = new Intent(getActivity(), CardPaketActivity.class);
                startActivity(intent);
                break;
            case R.id.oivSetting:
                intent = new Intent(getActivity(), SettingActivity.class);
                startActivity(intent);
                break;
        }
    }

    @Override
    public View initView() {
        View view = View.inflate(getActivity(), R.layout.fragment_me, null);
        ButterKnife.inject(this, view);
        return view;
    }

    @Override
    public void initData() {
        mNimUserInfo = NimUserInfoSDK.getUser(UserCache.getAccount());
        if (mNimUserInfo == null) {
            getUserInfoFromRemote();
        } else {
            //头像
            if (!TextUtils.isEmpty(mNimUserInfo.getAvatar()) && mIvHeader != null) {
                ImageLoaderManager.LoadNetImage(mNimUserInfo.getAvatar(), mIvHeader);
            }
            //用户名、账号
            if (mTvName != null)
                mTvName.setText(mNimUserInfo.getName());
            if (mTvAccount != null)
                mTvAccount.setText(mNimUserInfo.getAccount());
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mQRCodeCardDialog != null)
            mQRCodeCardDialog.dismiss();
    }

    private void getUserInfoFromRemote() {
        List<String> accountList = new ArrayList<>();
        accountList.add(UserCache.getAccount());
        NimUserInfoSDK.getUserInfosFormServer(accountList, new RequestCallback<List<NimUserInfo>>() {
            @Override
            public void onSuccess(List<NimUserInfo> param) {
                initData();
            }

            @Override
            public void onFailed(int code) {
                UIUtils.showToast("获取用户信息失败" + code);
            }

            @Override
            public void onException(Throwable exception) {
                exception.printStackTrace();
            }
        });
    }

    private void showQRCordCard(final Bitmap bitmap) {
        ThreadPoolFactory.getNormalPool().execute(new Runnable() {
            @Override
            public void run() {
//                final Bitmap codeWithLogo5 = QRCodeEncoder.syncEncodeQRCode(AppConst.QRCodeCommend.ACCOUNT + mNimUserInfo.getAccount(), UIUtils.dip2Px(200), UIUtils.getColor(R.color.transparent), UIUtils.getColor(R.color.black0), bitmap);
                final Bitmap codeWithLogo5 = QRCodeEncoder.syncEncodeQRCode(AppConst.QRCodeCommend.ACCOUNT + mNimUserInfo.getAccount(), UIUtils.dip2Px(200));
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mIvCardQRCodeCard.setImageBitmap(codeWithLogo5);
                    }
                });
            }
        });
    }
}

68:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\fragment\MessageFragment.java
package com.lqr.wechat.fragment;

import android.content.Context;
import android.content.Intent;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.text.style.ImageSpan;
import android.view.View;
import android.widget.ImageView;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.adapter.LQRViewHolderForRecyclerView;
import com.lqr.emoji.MoonUtil;
import com.lqr.ninegridimageview.LQRNineGridImageView;
import com.lqr.ninegridimageview.LQRNineGridImageViewAdapter;
import com.lqr.wechat.R;
import com.lqr.wechat.activity.MainActivity;
import com.lqr.wechat.activity.SessionActivity;
import com.lqr.wechat.factory.ThreadPoolFactory;
import com.lqr.wechat.imageloader.ImageLoaderManager;
import com.lqr.wechat.model.Contact;
import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimRecentContactSDK;
import com.lqr.wechat.nimsdk.NimTeamSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.TimeUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.ResponseCode;
import com.netease.nimlib.sdk.friend.model.Friend;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.RecentContact;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;

/**
 * @创建者 CSDN_LQR
 * @描述 微信
 */
public class MessageFragment extends BaseFragment {

    private List<RecentContact> mRecentContactList = new ArrayList<>();//最近联系人列表
    private Observer<List<RecentContact>> mMessageObserver;

    private LQRAdapterForRecyclerView<RecentContact> mAdapter;
    private View mHeaderView;
    private LQRNineGridImageViewAdapter<NimUserInfo> mNineGridAdapter;

    @InjectView(R.id.cvMessage)
    RecyclerView mCvMessage;
    MainActivity activity;

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        activity = (MainActivity) context;
    }

    @Override
    public void onDetach() {
        super.onDetach();
    }

    @Override
    public void init() {
        //监听最近联系人
        observeRecentContact();
        //初始化总未读数
        updateTotalUnReadCount();
    }

    @Override
    public View initView() {
        View view = View.inflate(getActivity(), R.layout.fragment_message, null);
        ButterKnife.inject(this, view);

//        mHeaderView = View.inflate(getActivity(), R.layout.header_message_rv, null);
//        mHeaderView.setVisibility(View.GONE);

        mNineGridAdapter = new LQRNineGridImageViewAdapter<NimUserInfo>() {
            @Override
            protected void onDisplayImage(Context context, ImageView imageView, NimUserInfo userInfo) {
                if (!TextUtils.isEmpty(userInfo.getAvatar())) {
                    ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), imageView);
                } else {
                    imageView.setImageResource(R.mipmap.default_header);
                }
            }
        };

        return view;
    }

    @Override
    public void initData() {
        getLocalRecentData();
    }

//    @Override
//    public void onResume() {
//        super.onResume();
//        setAdapter();
//    }

    private void setAdapter() {
//        if (mAdapter == null) {
            mAdapter = new LQRAdapterForRecyclerView<RecentContact>(getActivity(), R.layout.item_message_rv, mRecentContactList) {
                @Override
                public void convert(final LQRViewHolderForRecyclerView helper, final RecentContact item, int position) {
                    final ImageView ivHeader = helper.getView(R.id.ivHeader);//单聊头像
                    final LQRNineGridImageView ngivHeader = helper.getView(R.id.ngiv);//群聊头像
                    if (item.getSessionType() == SessionTypeEnum.P2P) {
                        ivHeader.setVisibility(View.VISIBLE);
                        ngivHeader.setVisibility(View.GONE);
                        //设置条目的常规信息
                        Friend friend = NimFriendSDK.getFriendByAccount(item.getContactId());
                        NimUserInfo userInfo = NimUserInfoSDK.getUser(item.getContactId());
                        if (userInfo == null) {
                            return;
                        }
                        Contact contact = new Contact(friend, userInfo);

                        //设置单聊的头像
                        if (userInfo != null && !TextUtils.isEmpty(userInfo.getAvatar())) {
                            ImageLoaderManager.LoadNetImage(userInfo.getAvatar(), ivHeader);
                        } else {
                            (ivHeader).setImageResource(R.mipmap.default_header);
                        }

                        helper.setText(R.id.tvName, contact.getDisplayName());
                    } else {
                        ivHeader.setVisibility(View.GONE);
                        ngivHeader.setVisibility(View.VISIBLE);
                        ThreadPoolFactory.getNormalPool().execute(new Runnable() {
                            @Override
                            public void run() {
                                final Team team = NimTeamSDK.queryTeamBlock(item.getContactId());
                                if (team == null)
                                    return;
                                UIUtils.postTaskSafely(new Runnable() {
                                    @Override
                                    public void run() {
                                        //如果我在群中，则显示群名，若不在，则除去该消息
                                        if (team.isMyTeam()) {
                                            if (team != null)
                                                helper.setText(R.id.tvName, TextUtils.isEmpty(team.getName()) ? "群聊(" + team.getMemberCount() + ")" : team.getName());
                                        } else {
                                            NimRecentContactSDK.deleteRecentContact(item);
                                            mAdapter.removeItem(item);
                                        }

                                        //设置群聊的头像
                                        NimTeamSDK.queryMemberList(team.getId(), new RequestCallback<List<TeamMember>>() {
                                            @Override
                                            public void onSuccess(List<TeamMember> memberList) {
                                                if (memberList != null && memberList.size() > 0) {
                                                    List<String> accounts = new ArrayList<>();
                                                    int count = memberList.size() > 9 ? 9 : memberList.size();
                                                    for (int i = 0; i < count; i++) {
                                                        accounts.add(memberList.get(i).getAccount());
                                                    }
                                                    NimUserInfoSDK.getUserInfosFormServer(accounts, new RequestCallback<List<NimUserInfo>>() {
                                                        @Override
                                                        public void onSuccess(List<NimUserInfo> result) {
                                                            ngivHeader.setAdapter(mNineGridAdapter);
                                                            ngivHeader.setImagesData(result);
                                                        }

                                                        @Override
                                                        public void onFailed(int code) {

                                                        }

                                                        @Override
                                                        public void onException(Throwable exception) {

                                                        }
                                                    });
                                                }
                                            }

                                            @Override
                                            public void onFailed(int code) {

                                            }

                                            @Override
                                            public void onException(Throwable exception) {

                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }

                    helper.setText(R.id.tvMsg, item.getContent())
                            .setText(R.id.tvTime, TimeUtils.getMsgFormatTime(item.getTime()));
//                    MoonUtil.identifyFaceExpression(getActivity(), helper.getView(R.id.tvMsg), item.getContent(), ImageSpan.ALIGN_BOTTOM);
                    MoonUtil.identifyFaceExpressionAndTags(getActivity(), helper.getView(R.id.tvMsg), item.getContent(), ImageSpan.ALIGN_BOTTOM, 0.45f);

                    //判断是否有未读消息
                    helper.setViewVisibility(R.id.tvUnread, item.getUnreadCount() > 0 ? View.VISIBLE : View.GONE).setText(R.id.tvUnread, String.valueOf(item.getUnreadCount()));

                    //条目点击跳转至聊天界面
                    helper.getView(R.id.root).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent intent = new Intent(getActivity(), SessionActivity.class);
                            intent.putExtra(SessionActivity.SESSION_ACCOUNT, item.getContactId());
                            intent.putExtra(SessionActivity.SESSION_TYPE, item.getSessionType());
                            startActivity(intent);
                            //清空当前联系人的未读数
                            NimRecentContactSDK.clearUnreadCount(item.getContactId(), item.getSessionType());
                        }
                    });
                }
            };
//            mAdapter.addHeaderView(mHeaderView);
//            mCvMessage.setAdapter(mAdapter.getHeaderAndFooterAdapter());
            mCvMessage.setAdapter(mAdapter);
//        } else {
//            mAdapter.notifyDataSetChanged();
//        }
    }

    /**
     * 加载本地联系人信息
     */
    private void getLocalRecentData() {
        //获取最近联系人
        NimRecentContactSDK.queryRecentContacts(new RequestCallbackWrapper<List<RecentContact>>() {
            @Override
            public void onResult(int code, List<RecentContact> result, Throwable exception) {
                if (code != ResponseCode.RES_SUCCESS || exception != null)
                    return;

                //如果我已经不是最近聊天中的群聊的成员，则不显示这个最近群聊项
                for (int i = 0; i < result.size(); i++) {
                    RecentContact rc = result.get(i);
                    if (rc.getSessionType() == SessionTypeEnum.Team) {
                        if (!NimTeamSDK.queryTeamBlock(rc.getContactId()).isMyTeam()) {
                            result.remove(i);
                            NimRecentContactSDK.deleteRecentContact(rc);
                            i--;
                        }
                    }
                }

                mRecentContactList.clear();
                mRecentContactList.addAll(result);
                setAdapter();

                updateRecentContactInfoFromServer();

            }
        });
    }

    /**
     * 更新最近联系人的本地信息
     */
    private void updateRecentContactInfoFromServer() {
        if (mRecentContactList != null && mRecentContactList.size() > 0) {
            List<String> accounts = new ArrayList<>();
            for (RecentContact rc : mRecentContactList) {
                accounts.add(rc.getFromAccount());
            }
            if (accounts != null && accounts.size() > 0) {
                NimUserInfoSDK.getUserInfosFormServer(accounts, new RequestCallback<List<NimUserInfo>>() {
                    @Override
                    public void onSuccess(List<NimUserInfo> param) {
                        setAdapter();
                    }

                    @Override
                    public void onFailed(int code) {

                    }

                    @Override
                    public void onException(Throwable exception) {

                    }
                });
            }
        }
    }

    /**
     * 监听最近联系人
     */
    private void observeRecentContact() {
        mMessageObserver = new Observer<List<RecentContact>>() {
            @Override
            public void onEvent(List<RecentContact> recentContacts) {

                //遍历最近更新的联系人，如果在数据集合中有的话，去掉数据集合中原来的最近联系人，再最新的最近联系人添加到数据集合中
                if (recentContacts != null && recentContacts.size() > 0) {
                    if (mAdapter != null) {
                        int index;
                        for (RecentContact r : recentContacts) {
                            index = -1;
                            for (int i = 0; i < mAdapter.getData().size(); i++) {
                                if (r.getContactId().equals(mAdapter.getData().get(i).getContactId())
                                        && r.getSessionType() == (mAdapter.getData().get(i).getSessionType())) {
                                    index = i;
                                    break;
                                }
                            }
                            if (index >= 0) {
                                mAdapter.removeItem(index);
                            }
                            mAdapter.addFirstItem(r);
                        }
                        updateTotalUnReadCount();
                    }
                }
            }
        };

        NimRecentContactSDK.observeRecentContact(mMessageObserver, true);
    }

    /**
     * 更新最近联系人中消息未读总数
     */
    private void updateTotalUnReadCount() {
        int totalUnreadCount = NimRecentContactSDK.getTotalUnreadCount();
        if (activity.mTvMessageCount != null)
            if (totalUnreadCount > 0) {
                activity.mTvMessageCount.setVisibility(View.VISIBLE);
                activity.mTvMessageCount.setText(String.valueOf(totalUnreadCount > 99 ? 99 : totalUnreadCount));
            } else {
                activity.mTvMessageCount.setVisibility(View.GONE);
            }
    }
}

69:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\imageloader\ImageLoaderManager.java
package com.lqr.wechat.imageloader;

import android.net.Uri;
import android.widget.ImageView;

import com.lqr.wechat.App;

/**
 * @创建者 CSDN_LQR
 * @描述 图片加载管理(对universalimage工具的包装)
 */
public class ImageLoaderManager {

    public static void LoadNetImage(String imgUrl, ImageView imageView) {
        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(imgUrl, imageView, App.options);
    }

    public static void LoadLocalImage(String path, ImageView imageView) {
        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(Uri.parse("file://" + path).toString(), imageView, App.options);
    }


//    public static void LoadNetImage(String imgUrl, ImageView imageView) {
//        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(imgUrl, imageView);
//    }
//
//    public static void LoadNetImage(String imgUrl, ImageView imageView, DisplayImageOptions o) {
//        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(imgUrl, imageView, o);
//    }
//
//    public static void LoadLocalImage(String path, ImageView imageView) {
//        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(Uri.parse("file://" + path).toString(), imageView);
//    }
//
//    public static void LoadLocalImage(String path, ImageView imageView, DisplayImageOptions o) {
//        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(Uri.parse("file://" + path).toString(), imageView, o);
//    }
}

70:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\imageloader\UILImageLoader.java
package com.lqr.wechat.imageloader;

import android.app.Activity;
import android.net.Uri;
import android.widget.ImageView;

import com.lqr.imagepicker.loader.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageSize;

/**
 * @创建者 CSDN_LQR
 * @描述 仿微信图片选择控件需要用到的图片加载类
 */
public class UILImageLoader implements ImageLoader {

//    @Override
//    public void displayImage(Activity activity, String path, ImageView imageView, int width, int height) {
//        ImageLoaderManager.LoadNetImage(Uri.fromFile(new File(path)).toString(), imageView, App.options);
//    }

    @Override
    public void displayImage(Activity activity, String path, ImageView imageView, int width, int height) {
        ImageSize size = new ImageSize(width, height);
//        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(Uri.fromFile(new File(path)).toString(), imageView, size);
        com.nostra13.universalimageloader.core.ImageLoader.getInstance().displayImage(Uri.parse("file://"+path).toString(), imageView, size);
    }

    @Override
    public void clearMemoryCache() {
    }
}

71:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\manager\ThreadPoolProxy.java
package com.lqr.wechat.manager;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * @创建者 CSDN_LQR
 * @描述 创建线程池，执行任务，提交任务
 */
public class ThreadPoolProxy {
    ThreadPoolExecutor mExecutor;// 只需创建一次
    int mCorePoolSize;
    int mMaximumPoolSize;
    long mKeepAliveTime;

    public ThreadPoolProxy(int corePoolSize, int maximumPoolSize,
                           long keepAliveTime) {
        super();
        mCorePoolSize = corePoolSize;
        mMaximumPoolSize = maximumPoolSize;
        mKeepAliveTime = keepAliveTime;
    }

    private ThreadPoolExecutor initThreadPoolExecutor() {// 双重检查加锁
        if (mExecutor == null) {
            synchronized (ThreadPoolProxy.class) {
                if (mExecutor == null) {
                    TimeUnit unit = TimeUnit.MILLISECONDS;// 毫秒
                    BlockingQueue<Runnable> workQueue = new LinkedBlockingDeque<Runnable>();// 无界队列
                    ThreadFactory threadFactory = Executors
                            .defaultThreadFactory();
                    RejectedExecutionHandler handler = new ThreadPoolExecutor.AbortPolicy();// 任务数量超过时，丢弃任务，抛出异常

                    mExecutor = new ThreadPoolExecutor(//
                            mCorePoolSize, // 核心线程数
                            mMaximumPoolSize,// 最大线程数
                            mKeepAliveTime, // 保持时间
                            unit, // 保持时间对应的单位
                            workQueue,// 缓存队列/阻塞队列
                            threadFactory,// 线程工厂
                            handler// 异常捕获器
                    );
                }
            }

        }
        return mExecutor;
    }

    /**
     * 执行任务
     *
     * @param task
     */
    public void execute(Runnable task) {
        initThreadPoolExecutor();
        mExecutor.execute(task);
    }

    /**
     * 提交任务
     *
     * @param task
     */
    public Future<?> submit(Runnable task) {
        initThreadPoolExecutor();
        return mExecutor.submit(task);
    }

    /**
     * 移除任务
     *
     * @param task
     */
    public void removeTask(Runnable task) {
        initThreadPoolExecutor();
        mExecutor.remove(task);
    }
}

72:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\model\Contact.java
package com.lqr.wechat.model;

import android.text.TextUtils;

import com.lqr.wechat.nimsdk.NimFriendSDK;
import com.lqr.wechat.nimsdk.NimUserInfoSDK;
import com.lqr.wechat.utils.PinyinUtils;
import com.netease.nimlib.sdk.friend.model.Friend;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.io.Serializable;

/**
 * @创建者 CSDN_LQR
 * @描述 联系人（好友）信息
 */
public class Contact implements Comparable<Contact>, Serializable {

    private String mAccount;//账号
    private String mDisplayName;//要显示的名字（没有备注的话就显示昵称）
    private String mName;//昵称
    private String mAlias;//备注
    private String mPinyin;//昵称/备注的全拼
    private Friend mFriend;//你的好友信息
    private NimUserInfo mUserInfo;//好友自己的信息
    private String mAvatar;//头像地址
//    private List<String> mAccounts;//要查询用户信息的用户账号

    public Contact(Friend friend, NimUserInfo userInfo) {
        mFriend = friend;
        mUserInfo = userInfo;
        fit();
    }

    public Contact(String account) {
        super();
        mFriend = NimFriendSDK.getFriendByAccount(account);
        mUserInfo = NimUserInfoSDK.getUser(account);
        fit();
    }

    public Contact() {
        super();
    }

    private void fit() {
        this.mAccount = mUserInfo.getAccount();
        this.mName = mUserInfo.getName();
        if (mFriend != null)
            this.mAlias = mFriend.getAlias();
        this.mAvatar = mUserInfo.getAvatar();
        this.mDisplayName = TextUtils.isEmpty(mAlias) ? mName : mAlias;
        this.mPinyin = PinyinUtils.getPinyin(mDisplayName);
    }

    public String getAccount() {
        return mAccount;
    }

    public void setAccount(String account) {
        mAccount = account;
    }

    public String getAlias() {
        return mAlias;
    }

    public void setAlias(String alias) {
        this.mAlias = alias;
    }

    public String getPinyin() {
        return mPinyin;
    }

    public void setPinyin(String pinyin) {
        this.mPinyin = pinyin;
    }

    public Friend getFriend() {
        return mFriend;
    }

    public void setFriend(Friend friend) {
        mFriend = friend;
    }

    public NimUserInfo getUserInfo() {
        return mUserInfo;
    }

    public void setUserInfo(NimUserInfo userInfo) {
        mUserInfo = userInfo;
    }

    public String getAvatar() {
        return mAvatar;
    }

    public void setAvatar(String avatar) {
        mAvatar = avatar;
    }

    public String getName() {
        return mName;
    }

    public void setName(String name) {
        mName = name;
    }

    public String getDisplayName() {
        return mDisplayName;
    }

    public void setDisplayName(String displayName) {
        mDisplayName = displayName;
    }

    @Override
    public int compareTo(Contact o) {
        return this.mPinyin.compareTo(o.getPinyin());
    }
}

73:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\model\NewFriend.java
package com.lqr.wechat.model;

import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

/**
 * @创建者 CSDN_LQR
 * @描述 新好友
 */
public class NewFriend {
    private NimUserInfo mUserInfo;
    private String mMsg;

    public NewFriend(NimUserInfo userInfo, String msg) {
        mUserInfo = userInfo;
        mMsg = msg;
    }

    public NimUserInfo getUserInfo() {
        return mUserInfo;
    }

    public void setUserInfo(NimUserInfo userInfo) {
        mUserInfo = userInfo;
    }

    public String getMsg() {
        return mMsg;
    }

    public void setMsg(String msg) {
        mMsg = msg;
    }
}

74:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\model\ResultData.java
package com.lqr.wechat.model;

/**
 * @创建者 CSDN_LQR
 * @描述 通用的数据格式类
 */
public class ResultData<T> {

    private T data;

    private int code = 200;

    private String msg;

    private Boolean success = true;

    public Boolean getSuccess() {
        return success;
    }

    public void setSuccess(Boolean success) {
        this.success = success;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        if (code != 200) {
            success = false;
        }
        this.code = code;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

}

75:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\model\UserCache.java
package com.lqr.wechat.model;

import android.content.Context;

import com.lqr.wechat.nimsdk.NimAccountSDK;
import com.netease.nimlib.sdk.StatusBarNotificationConfig;

/**
 * @创建者 CSDN_LQR
 * @描述 用户信息缓存
 */
public class UserCache {

    private static Context context;
    private static String account;

    private static StatusBarNotificationConfig notificationConfig;

    public static void clear() {
        account = null;
        NimAccountSDK.removeUserInfo();
    }

    public static String getAccount() {
        return account;
    }

    public static void setAccount(String account) {
        UserCache.account = account;
    }

    public static void setNotificationConfig(StatusBarNotificationConfig notificationConfig) {
        UserCache.notificationConfig = notificationConfig;
    }

    public static StatusBarNotificationConfig getNotificationConfig() {
        return notificationConfig;
    }

    public static Context getContext() {
        return context;
    }

    public static void setContext(Context context) {
        UserCache.context = context.getApplicationContext();
    }
}

76:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\audio\AudioMessagePlayable.java
package com.lqr.wechat.nimsdk.audio;

import com.netease.nimlib.sdk.msg.attachment.AudioAttachment;
import com.netease.nimlib.sdk.msg.model.IMMessage;

public class AudioMessagePlayable implements Playable {

	private IMMessage message;

	public IMMessage getMessage() {
		return message;
	}

	public AudioMessagePlayable(IMMessage playableMessage) {
		this.message = playableMessage;
	}

	@Override
	public long getDuration() {
		return ((AudioAttachment) message.getAttachment()).getDuration();
	}

	@Override
	public String getPath() {
		return ((AudioAttachment) message.getAttachment()).getPath();
	}

	@Override
	public boolean isAudioEqual(Playable audio) {
		if (AudioMessagePlayable.class.isInstance(audio)) {
			return message.isTheSame(((AudioMessagePlayable) audio).getMessage());
		} else {
			return false;
		}
	}
}

77:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\audio\BaseAudioControl.java
package com.lqr.wechat.nimsdk.audio;

import android.content.Context;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Handler;
import android.text.TextUtils;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.LogUtils;
import com.netease.nimlib.sdk.media.player.AudioPlayer;
import com.netease.nimlib.sdk.media.player.OnPlayListener;

abstract public class BaseAudioControl<T> {

    interface AudioControllerState {
        int stop = 0;
        int ready = 1;
        int playing = 2;
    }

    private int state;
    protected boolean isEarPhoneModeEnable = true; // 是否是听筒模式

    public interface AudioControlListener {
        //AudioControl准备就绪，已经postDelayed playRunnable，不等同于AudioPlayer已经开始播放
        public void onAudioControllerReady(Playable playable);

        /**
         * 结束播放
         */
        public void onEndPlay(Playable playable);

        /**
         * 显示播放过程中的进度条
         *
         * @param curPosition 当前进度，如果传-1则自动获取进度
         */
        public void updatePlayingProgress(Playable playable, long curPosition);
    }

    protected AudioControlListener audioControlListener;

    protected Context mContext;
    protected AudioPlayer currentAudioPlayer;
    protected Playable currentPlayable;

    protected boolean needSeek = false;
    protected long seekPosition;

    private MediaPlayer mSuffixPlayer = null;
    private boolean mSuffix = false;
    protected Handler mHandler = new Handler();

    private BasePlayerListener basePlayerListener = null;

    protected void setOnPlayListener(Playable playingPlayable, AudioControlListener audioControlListener) {
        this.audioControlListener = audioControlListener;

        basePlayerListener = new BasePlayerListener(currentAudioPlayer, playingPlayable);
        currentAudioPlayer.setOnPlayListener(basePlayerListener);
        basePlayerListener.setAudioControlListener(audioControlListener);
    }

    public void setEarPhoneModeEnable(boolean isEarPhoneModeEnable) {
        this.isEarPhoneModeEnable = isEarPhoneModeEnable;
        if (isEarPhoneModeEnable) {
            updateAudioStreamType(AudioManager.STREAM_VOICE_CALL);
        } else {
            updateAudioStreamType(AudioManager.STREAM_MUSIC);
        }
    }

    @SuppressWarnings("unchecked")
    public void changeAudioControlListener(AudioControlListener audioControlListener) {
        this.audioControlListener = audioControlListener;

        if (isPlayingAudio()) {
            OnPlayListener onPlayListener = currentAudioPlayer.getOnPlayListener();
            if (onPlayListener != null) {
                ((BasePlayerListener) onPlayListener).setAudioControlListener(audioControlListener);
            }
        }
    }

    public AudioControlListener getAudioControlListener() {
        return audioControlListener;
    }

    public BaseAudioControl(Context context, boolean suffix) {
        this.mContext = context;
        this.mSuffix = suffix;
    }

    protected void playSuffix() {
        if (mSuffix) {
            mSuffixPlayer = MediaPlayer.create(mContext, R.raw.audio_end_tip);
            mSuffixPlayer.setLooping(false);
            mSuffixPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
            mSuffixPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                @Override
                public void onCompletion(MediaPlayer mp) {
                    mSuffixPlayer.release();
                    mSuffixPlayer = null;
                }
            });
            mSuffixPlayer.start();
        }
    }

    protected boolean startAudio(
            Playable playable,
            AudioControlListener audioControlListener,
            int audioStreamType,
            boolean resetOrigAudioStreamType,
            long delayMillis) {
        String filePath = playable.getPath();
        if (TextUtils.isEmpty(filePath)) {
            return false;
        }

        //正在播放，停止播放
        if (isPlayingAudio()) {
            stopAudio();
            //如果相等，就是同一个对象了
            if (currentPlayable.isAudioEqual(playable)) {
                return false;
            }
        }

        state = AudioControllerState.stop;

        currentPlayable = playable;
        currentAudioPlayer = new AudioPlayer(mContext);
        currentAudioPlayer.setDataSource(filePath);

        setOnPlayListener(currentPlayable, audioControlListener);

        if (resetOrigAudioStreamType) {
            this.origAudioStreamType = audioStreamType;
        }
        this.currentAudioStreamType = audioStreamType;

        mHandler.postDelayed(playRunnable, delayMillis);

        state = AudioControllerState.ready;
        if (audioControlListener != null) {
            audioControlListener.onAudioControllerReady(currentPlayable);
        }

        return true;
    }

    Runnable playRunnable = new Runnable() {

        @Override
        public void run() {
            if (currentAudioPlayer == null) {
                LogUtils.sf("playRunnable run when currentAudioPlayer == null");
                return;
            }

            currentAudioPlayer.start(currentAudioStreamType);
        }
    };

    private int origAudioStreamType;
    private int currentAudioStreamType;

    public int getCurrentAudioStreamType() {
        return currentAudioStreamType;
    }

    protected int getUserSettingAudioStreamType() {
        // 听筒模式/扬声器模式
        if (isEarPhoneModeEnable) {
            return AudioManager.STREAM_VOICE_CALL;
        } else {
            return AudioManager.STREAM_MUSIC;
        }
    }

    protected void resetAudioController(Playable playable) {
        currentAudioPlayer.setOnPlayListener(null);
        currentAudioPlayer = null;

        state = AudioControllerState.stop;
    }

    //playing or ready
    public boolean isPlayingAudio() {
        if (currentAudioPlayer != null) {
            return state == AudioControllerState.playing
                    || state == AudioControllerState.ready;
        } else {
            return false;
        }
    }

    //stop or cancel
    public void stopAudio() {
        if (state == AudioControllerState.playing) {
            //playing->stop
            currentAudioPlayer.stop();
        } else if (state == AudioControllerState.ready) {
            //ready->cancel
            mHandler.removeCallbacks(playRunnable);
            resetAudioController(currentPlayable);

            if (audioControlListener != null) {
                audioControlListener.onEndPlay(currentPlayable);
            }
        }
    }

    public boolean updateAudioStreamType(int audioStreamType) {
        if (!isPlayingAudio()) {
            return false;
        }

        if (audioStreamType == getCurrentAudioStreamType()) {
            return false;
        }

        changeAudioStreamType(audioStreamType);
        return true;
    }

    public boolean restoreAudioStreamType() {
        if (!isPlayingAudio()) {
            return false;
        }

        if (origAudioStreamType == getCurrentAudioStreamType()) {
            return false;
        }

        changeAudioStreamType(origAudioStreamType);
        return true;
    }

    private void changeAudioStreamType(int audioStreamType) {
        if (currentAudioPlayer.isPlaying()) {
            seekPosition = currentAudioPlayer.getCurrentPosition();
            needSeek = true;
            currentAudioStreamType = audioStreamType;
            currentAudioPlayer.start(audioStreamType);
        } else {
            currentAudioStreamType = origAudioStreamType;
        }
    }

    public class BasePlayerListener implements OnPlayListener {
        protected AudioPlayer listenerPlayingAudioPlayer;
        protected Playable listenerPlayingPlayable;
        protected AudioControlListener audioControlListener;

        public BasePlayerListener(AudioPlayer playingAudioPlayer, Playable playingPlayable) {
            listenerPlayingAudioPlayer = playingAudioPlayer;
            listenerPlayingPlayable = playingPlayable;
        }

        public void setAudioControlListener(AudioControlListener audioControlListener) {
            this.audioControlListener = audioControlListener;
        }

        protected boolean checkAudioPlayerValid() {
            if (currentAudioPlayer != listenerPlayingAudioPlayer) {
                return false;
            }

            return true;
        }

        @Override
        public void onPrepared() {
            if (!checkAudioPlayerValid()) {
                return;
            }

            state = AudioControllerState.playing;
            if (needSeek) {
                needSeek = false;
                listenerPlayingAudioPlayer.seekTo((int) seekPosition);
            }
        }

        @Override
        public void onPlaying(long curPosition) {
            if (!checkAudioPlayerValid()) {
                return;
            }

            if (audioControlListener != null) {
                audioControlListener.updatePlayingProgress(listenerPlayingPlayable, curPosition);
            }
        }

        @Override
        public void onInterrupt() {
            if (!checkAudioPlayerValid()) {
                return;
            }

            resetAudioController(listenerPlayingPlayable);
            if (audioControlListener != null) {
                audioControlListener.onEndPlay(currentPlayable);
            }

        }

        @Override
        public void onError(String error) {
            if (!checkAudioPlayerValid()) {
                return;
            }

            resetAudioController(listenerPlayingPlayable);
            if (audioControlListener != null) {
                audioControlListener.onEndPlay(currentPlayable);
            }
        }

        @Override
        public void onCompletion() {
            if (!checkAudioPlayerValid()) {
                return;
            }

            resetAudioController(listenerPlayingPlayable);
            if (audioControlListener != null) {
                audioControlListener.onEndPlay(currentPlayable);
            }

            playSuffix();
        }
    }

    ;

    public void startPlayAudio(
            T t,
            AudioControlListener audioControlListener) {
        startPlayAudio(t, audioControlListener, getUserSettingAudioStreamType());
    }

    public void startPlayAudio(
            T t,
            AudioControlListener audioControlListener,
            int audioStreamType) {
        startPlayAudioDelay(0, t, audioControlListener, audioStreamType);
    }

    public void startPlayAudioDelay(long delayMillis, T t, AudioControlListener audioControlListener) {
        startPlayAudioDelay(delayMillis, t, audioControlListener, getUserSettingAudioStreamType());
    }

    public abstract void startPlayAudioDelay(long delayMillis, T t, AudioControlListener audioControlListener, int audioStreamType);

    public abstract T getPlayingAudio();
}

78:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\audio\MessageAudioControl.java
package com.lqr.wechat.nimsdk.audio;

import android.content.Context;
import android.widget.Toast;

import com.lqr.adapter.LQRAdapterForRecyclerView;
import com.lqr.wechat.nimsdk.utils.StorageUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.msg.MsgService;
import com.netease.nimlib.sdk.msg.attachment.AudioAttachment;
import com.netease.nimlib.sdk.msg.constant.AttachStatusEnum;
import com.netease.nimlib.sdk.msg.constant.MsgDirectionEnum;
import com.netease.nimlib.sdk.msg.constant.MsgStatusEnum;
import com.netease.nimlib.sdk.msg.constant.MsgTypeEnum;
import com.netease.nimlib.sdk.msg.model.IMMessage;

import java.util.List;

public class MessageAudioControl extends BaseAudioControl<IMMessage> {
    private static MessageAudioControl mMessageAudioControl = null;

    private boolean mIsNeedPlayNext = false;

    private LQRAdapterForRecyclerView mAdapter = null;

    private IMMessage mItem = null;

    private MessageAudioControl(Context context) {
        super(context, true);
    }

    public static MessageAudioControl getInstance(Context context) {
        if (mMessageAudioControl == null) {
            synchronized (MessageAudioControl.class) {
                if (mMessageAudioControl == null) {
                    mMessageAudioControl = new MessageAudioControl(UIUtils.getContext());
                }
            }
        }

        return mMessageAudioControl;
    }

    @Override
    protected void setOnPlayListener(Playable playingPlayable, AudioControlListener audioControlListener) {
        this.audioControlListener = audioControlListener;

        BasePlayerListener basePlayerListener = new BasePlayerListener(currentAudioPlayer, playingPlayable) {

            @Override
            public void onInterrupt() {
                if (!checkAudioPlayerValid()) {
                    return;
                }

                super.onInterrupt();
                cancelPlayNext();
            }

            @Override
            public void onError(String error) {
                if (!checkAudioPlayerValid()) {
                    return;
                }

                super.onError(error);
                cancelPlayNext();
            }

            @Override
            public void onCompletion() {
                if (!checkAudioPlayerValid()) {
                    return;
                }

                resetAudioController(listenerPlayingPlayable);

                boolean isLoop = false;
                if (mIsNeedPlayNext) {
                    if (mAdapter != null && mItem != null) {
                        isLoop = playNextAudio(mAdapter, mItem);
                    }
                }

                if (!isLoop) {
                    if (audioControlListener != null) {
                        audioControlListener.onEndPlay(currentPlayable);
                    }

                    playSuffix();
                }
            }
        };

        basePlayerListener.setAudioControlListener(audioControlListener);
        currentAudioPlayer.setOnPlayListener(basePlayerListener);
    }

    @Override
    public IMMessage getPlayingAudio() {
        if (isPlayingAudio() && AudioMessagePlayable.class.isInstance(currentPlayable)) {
            return ((AudioMessagePlayable) currentPlayable).getMessage();
        } else {
            return null;
        }
    }

    @Override
    public void startPlayAudioDelay(
            long delayMillis,
            IMMessage message,
            AudioControlListener audioControlListener, int audioStreamType) {
        startPlayAudio(message, audioControlListener, audioStreamType, true, delayMillis);
    }

    //连续播放时不需要resetOrigAudioStreamType
    private void startPlayAudio(
            IMMessage message,
            AudioControlListener audioControlListener,
            int audioStreamType,
            boolean resetOrigAudioStreamType,
            long delayMillis) {
        if (StorageUtils.isExternalStorageExist()) {

            if (startAudio(new AudioMessagePlayable(message), audioControlListener, audioStreamType, resetOrigAudioStreamType, delayMillis)) {
                // 将未读标识去掉,更新数据库
                if (isUnreadAudioMessage(message)) {
                    message.setStatus(MsgStatusEnum.read);
                    NIMClient.getService(MsgService.class).updateIMMessageStatus(message);
                }
            }
        } else {
            Toast.makeText(mContext, "请插入SD卡", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean playNextAudio(LQRAdapterForRecyclerView tAdapter, IMMessage messageItem) {
        List<?> list = tAdapter.getData();
        int index = 0;
        int nextIndex = -1;
        //找到当前已经播放的
        for (int i = 0; i < list.size(); ++i) {
            IMMessage item = (IMMessage) list.get(i);
            if (item.equals(messageItem)) {
                index = i;
                break;
            }
        }
        //找到下一个将要播放的
        for (int i = index; i < list.size(); ++i) {
            IMMessage item = (IMMessage) list.get(i);
            IMMessage message = item;
            if (isUnreadAudioMessage(message)) {
                nextIndex = i;
                break;
            }
        }

        if (nextIndex == -1) {
            cancelPlayNext();
            return false;
        }
        IMMessage message = (IMMessage) list.get(nextIndex);
        AudioAttachment attach = (AudioAttachment) message.getAttachment();
        if (mMessageAudioControl != null && attach != null) {
            if (message.getAttachStatus() != AttachStatusEnum.transferred) {
                cancelPlayNext();
                return false;
            }
            if (message.getStatus() != MsgStatusEnum.read) {
                message.setStatus(MsgStatusEnum.read);
                NIMClient.getService(MsgService.class).updateIMMessageStatus(message);
            }
            //不是直接通过点击ViewHolder开始的播放，不设置AudioControlListener
            //notifyDataSetChanged会触发ViewHolder刷新，对应的ViewHolder会把AudioControlListener设置上去
            //连续播放 1.继续使用playingAudioStreamType 2.不需要resetOrigAudioStreamType
            mMessageAudioControl.startPlayAudio(message, null, getCurrentAudioStreamType(), false, 0);
            mItem = (IMMessage) list.get(nextIndex);
            tAdapter.notifyDataSetChanged();
            return true;
        }
        return false;
    }

    private void cancelPlayNext() {
        setPlayNext(false, null, null);
    }

    public void setPlayNext(boolean isPlayNext, LQRAdapterForRecyclerView adapter, IMMessage item) {
        mIsNeedPlayNext = isPlayNext;
        mAdapter = adapter;
        mItem = item;
    }

    public void stopAudio() {
        super.stopAudio();
    }

    public boolean isUnreadAudioMessage(IMMessage message) {
        if ((message.getMsgType() == MsgTypeEnum.audio)
                && message.getDirect() == MsgDirectionEnum.In
                && message.getAttachStatus() == AttachStatusEnum.transferred
                && message.getStatus() != MsgStatusEnum.read) {
            return true;
        } else {
            return false;
        }
    }
}

79:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\audio\Playable.java
package com.lqr.wechat.nimsdk.audio;

public interface Playable {
	long getDuration();
	String getPath();
	boolean isAudioEqual(Playable audio);
}

80:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\custom\CustomAttachment.java
package com.lqr.wechat.nimsdk.custom;

import com.alibaba.fastjson.JSONObject;
import com.netease.nimlib.sdk.msg.attachment.MsgAttachment;

/**
 * @创建者 CSDN_LQR
 * @描述 定义一个自定义消息附件的基类，负责解析你的自定义消息的公用字段，比如类型等等。
 */
public abstract class CustomAttachment implements MsgAttachment {

    // 自定义消息附件的类型，根据该字段区分不同的自定义消息
    protected int type;

    CustomAttachment(int type) {
        this.type = type;
    }

    // 解析附件内容。
    public void fromJson(JSONObject data) {
        if (data != null) {
            parseData(data);
        }
    }

    // 实现 MsgAttachment 的接口，封装公用字段，然后调用子类的封装函数。
    @Override
    public String toJson(boolean send) {
        return CustomAttachParser.packData(type, packData());
    }

    // 子类的解析和封装接口。
    protected abstract void parseData(JSONObject data);

    protected abstract JSONObject packData();
}

81:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\custom\CustomAttachmentType.java
package com.lqr.wechat.nimsdk.custom;

/**
 * @创建者 CSDN_LQR
 * @描述 自定消息类型
 */
public interface CustomAttachmentType {
    // 多端统一
    int Guess = 1;//猜拳
    int SnapChat = 2;
    int Sticker = 3;
    int RTS = 4;
}

82:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\custom\CustomAttachParser.java
package com.lqr.wechat.nimsdk.custom;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.netease.nimlib.sdk.msg.attachment.MsgAttachment;
import com.netease.nimlib.sdk.msg.attachment.MsgAttachmentParser;

/**
 * @创建者 CSDN_LQR
 * @描述 自定义附件解析器（需要在Application中注册）
 */
public class CustomAttachParser implements MsgAttachmentParser {

    private static final String KEY_TYPE = "type";
    private static final String KEY_DATA = "data";

    @Override
    public MsgAttachment parse(String json) {
        CustomAttachment attachment = null;
        try {
            JSONObject object = JSON.parseObject(json);
            int type = object.getInteger(KEY_TYPE);
            JSONObject data = object.getJSONObject(KEY_DATA);
            switch (type) {
                case CustomAttachmentType.Sticker:
                    attachment = new StickerAttachment();
                    break;
//                case CustomAttachmentType.Guess:
//                    attachment = new GuessAttachment();
//                    break;
//                case CustomAttachmentType.SnapChat:
//                    return new SnapChatAttachment(data);
//                case CustomAttachmentType.RTS:
//                    attachment = new RTSAttachment();
//                    break;
                default:
                    attachment = new DefaultCustomAttachment();
                    break;
            }

            if (attachment != null) {
                attachment.fromJson(data);
            }
        } catch (Exception e) {

        }

        return attachment;
    }

    public static String packData(int type, JSONObject data) {
        JSONObject object = new JSONObject();
        object.put(KEY_TYPE, type);
        if (data != null) {
            object.put(KEY_DATA, data);
        }

        return object.toJSONString();
    }
}

83:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\custom\DefaultCustomAttachment.java
package com.lqr.wechat.nimsdk.custom;

import com.alibaba.fastjson.JSONObject;

/**
 * Created by zhoujianghua on 2015/4/10.
 */
public class DefaultCustomAttachment extends CustomAttachment {

    private String content;

    public DefaultCustomAttachment() {
        super(0);
    }

    @Override
    protected void parseData(JSONObject data) {
        content = data.toJSONString();
    }

    @Override
    protected JSONObject packData() {
        JSONObject data = null;
        try {
            data = JSONObject.parseObject(content);
        } catch (Exception e) {

        }
        return data;
    }

    public String getContent() {
        return content;
    }
}

84:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\custom\StickerAttachment.java
package com.lqr.wechat.nimsdk.custom;

import com.alibaba.fastjson.JSONObject;
import com.lqr.wechat.utils.FileUtils;

/**
 * @创建者 CSDN_LQR
 * @描述 自定义贴图类消息
 */
public class StickerAttachment extends CustomAttachment {

    private final String KEY_CATALOG = "catalog";
    private final String KEY_CHARTLET = "chartlet";

    private String catalog;
    private String chartlet;

    public StickerAttachment() {
        super(CustomAttachmentType.Sticker);
    }

    public StickerAttachment(String catalog, String emotion) {
        this();
        this.catalog = catalog;
        this.chartlet = FileUtils.getFileNameNoEx(emotion);
    }

    @Override
    protected void parseData(JSONObject data) {
        this.catalog = data.getString(KEY_CATALOG);
        this.chartlet = data.getString(KEY_CHARTLET);
    }

    @Override
    protected JSONObject packData() {
        JSONObject data = new JSONObject();
        data.put(KEY_CATALOG, catalog);
        data.put(KEY_CHARTLET, chartlet);
        return data;
    }

    public String getCatalog() {
        return catalog;
    }

    public String getChartlet() {
        return chartlet;
    }
}

85:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\helper\SendImageHelper.java
package com.lqr.wechat.nimsdk.helper;

import android.content.Context;
import android.os.AsyncTask;
import android.text.TextUtils;

import com.lqr.imagepicker.bean.ImageItem;
import com.lqr.wechat.nimsdk.utils.AttachmentStore;
import com.lqr.wechat.nimsdk.utils.ImageUtil;
import com.lqr.wechat.nimsdk.utils.StorageType;
import com.lqr.wechat.nimsdk.utils.StorageUtils;
import com.lqr.wechat.utils.FileUtils;
import com.lqr.wechat.utils.MD5Utils;
import com.lqr.wechat.utils.UIUtils;

import java.io.File;

/**
 * @创建者 CSDN_LQR
 * @描述 网易云信发送图片工具类
 */
public class SendImageHelper {

    public interface Callback {
        void sendImage(File file, boolean isOrig);
    }

    public static class SendImageTask extends AsyncTask<Void, Void, File> {

        private Context mContext;
        private boolean mIsOrig;
        private ImageItem mImageItem;
        private Callback mCallback;

        public SendImageTask(Context context, boolean isOrig, ImageItem imageItem, Callback callback) {
            mContext = context;
            mIsOrig = isOrig;
            mImageItem = imageItem;
            mCallback = callback;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected File doInBackground(Void... params) {
            String path = mImageItem.path;
            if (TextUtils.isEmpty(path)) {
                return null;
            }

            if (mIsOrig) {
                // 把原图按md5存放
                String origMD5 = MD5Utils.decode32(path);
                String extension = FileUtils.getExtensionName(path);
                String origMD5Path = StorageUtils.getWritePath(origMD5 + "."
                        + extension, StorageType.TYPE_IMAGE);
                AttachmentStore.copy(path, origMD5Path);
                // 生成缩略图
                File imageFile = new File(origMD5Path);
                ImageUtil.makeThumbnail(mContext, imageFile);

                return new File(origMD5Path);
            } else {
                File imageFile = new File(path);
                String mimeType = FileUtils.getExtensionName(path);
                imageFile = ImageUtil.getScaledImageFileWithMD5(imageFile, mimeType);
                if (imageFile == null) {
                    UIUtils.postTaskSafely(new Runnable() {
                        @Override
                        public void run() {
                            UIUtils.showToast("获取图片出错");
                        }
                    });
                    return null;
                } else {
                    ImageUtil.makeThumbnail(mContext, imageFile);
                }
                return imageFile;
            }
        }

        @Override
        protected void onPostExecute(File file) {
            super.onPostExecute(file);

            if (file != null) {
                if (mCallback != null) {
                    mCallback.sendImage(file, mIsOrig);
                }
            }
        }
    }

}

86:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimAccountSDK.java
package com.lqr.wechat.nimsdk;

import com.lqr.wechat.AppConst;
import com.lqr.wechat.utils.SPUtils;
import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.AbortableFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.StatusCode;
import com.netease.nimlib.sdk.auth.AuthService;
import com.netease.nimlib.sdk.auth.AuthServiceObserver;
import com.netease.nimlib.sdk.auth.LoginInfo;
import com.netease.nimlib.sdk.auth.constant.LoginSyncStatus;

/**
 * @创建者 CSDN_LQR
 * @描述 账号相关SDK
 */
public class NimAccountSDK {

    private static String account;
    private static String token;

    /**
     * 登录，并返回AbortableFuture
     */
    public static AbortableFuture<LoginInfo> login(String username, String token, RequestCallback<LoginInfo> callback) {
        //配置登录信息，并开始登录
        LoginInfo info = new LoginInfo(username, token);
        AbortableFuture<LoginInfo> loginRequest = NIMClient.getService(AuthService.class).login(info);
        loginRequest.setCallback(callback);
        return loginRequest;
    }

    /**
     * 登出
     */
    public static void logout() {
        NIMClient.getService(AuthService.class).logout();
    }

    /**
     * 在线状态监听
     */
    public static void onlineStatusListen(Observer<StatusCode> observer, boolean register) {
        NIMClient.getService(AuthServiceObserver.class).observeOnlineStatus(
                observer, register);
    }

    /**
     * 同步数据监听
     * <p>
     * 登录成功后，SDK 会立即同步数据（用户资料、用户关系、群资料、离线消息、漫游消息等），同步开始和同步完成都会发出通知
     *
     * @param register
     */
    public static void syncDataListen(Observer<LoginSyncStatus> observer, boolean register) {
        NIMClient.getService(AuthServiceObserver.class).observeLoginSyncDataStatus(observer, register);
    }

    public static String getUserAccount() {
        account = SPUtils.getInstance(UIUtils.getContext()).getString(AppConst.Account.KEY_USER_ACCOUNT, "");
        return account;
    }

    public static String getUserToken() {
        token = SPUtils.getInstance(UIUtils.getContext()).getString(AppConst.Account.KEY_USER_TOKEN, "");
        return token;
    }

    public static void saveUserAccount(String account) {
        NimAccountSDK.account = account;
        SPUtils.getInstance(UIUtils.getContext()).putString(AppConst.Account.KEY_USER_ACCOUNT, account);
    }

    public static void saveUserToken(String token) {
        NimAccountSDK.token = token;
        SPUtils.getInstance(UIUtils.getContext()).putString(AppConst.Account.KEY_USER_TOKEN, token);
    }

    public static void removeUserInfo() {
        SPUtils.getInstance(UIUtils.getContext()).remove(AppConst.Account.KEY_USER_ACCOUNT);
        SPUtils.getInstance(UIUtils.getContext()).remove(AppConst.Account.KEY_USER_TOKEN);
    }
}

87:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimBlackListSDK.java
package com.lqr.wechat.nimsdk;

import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.friend.FriendService;
import com.netease.nimlib.sdk.friend.FriendServiceObserve;
import com.netease.nimlib.sdk.friend.model.BlackListChangedNotify;

import java.util.List;

/**
 * @创建者 CSDN_LQR
 * @描述 黑名单相关SDK
 */
public class NimBlackListSDK {

    /**
     * 加入黑名单
     */
    public static void addToBlackList(String account, RequestCallback<Void> callback) {
        NIMClient.getService(FriendService.class).addToBlackList(account)
                .setCallback(callback);
    }

    /**
     * 移出黑名单
     */
    public static void removeFromBlackList(String account, RequestCallback<Void> callback) {
        NIMClient.getService(FriendService.class).removeFromBlackList(account)
                .setCallback(callback);
    }

    /**
     * 获取黑名单列表
     */
    public static List<String> getBlackList() {
        return NIMClient.getService(FriendService.class).getBlackList();
    }

    /**
     * 判断用户是否被拉进黑名单
     */
    public static boolean isInBlackList(String account) {
        boolean black = NIMClient.getService(FriendService.class).isInBlackList(account);
        return black;
    }

    /**
     * 注册/注销黑名单变化监听
     */
    public static void observeBlackListChangedNotify(Observer<BlackListChangedNotify> blackListChangedNotifyObserver, boolean register) {
        NIMClient.getService(FriendServiceObserve.class)
                .observeBlackListChangedNotify(blackListChangedNotifyObserver, register);
    }

}

88:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimFriendSDK.java
package com.lqr.wechat.nimsdk;

import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.friend.FriendService;
import com.netease.nimlib.sdk.friend.FriendServiceObserve;
import com.netease.nimlib.sdk.friend.constant.FriendFieldEnum;
import com.netease.nimlib.sdk.friend.constant.VerifyType;
import com.netease.nimlib.sdk.friend.model.AddFriendData;
import com.netease.nimlib.sdk.friend.model.Friend;
import com.netease.nimlib.sdk.friend.model.FriendChangedNotify;

import java.util.List;
import java.util.Map;

/**
 * @创建者 CSDN_LQR
 * @描述 网易云信好友相关SDK
 */
public class NimFriendSDK {


    /**
     * 添加好友
     * <p>
     * 目前添加好友有两种验证类型（见 VerifyType）：直接添加为好友和发起好友验证请求。添加好友时需要构造 AddFriendData，
     * 需要填入包括对方帐号，好友验证类型及附言（可选）
     */
    public static void addFriend(String account, String msg, RequestCallback<Void> callback) {
        final VerifyType verifyType = VerifyType.VERIFY_REQUEST; // 发起好友验证请求
        NIMClient.getService(FriendService.class).addFriend(new AddFriendData(account, verifyType, msg))
                .setCallback(callback);
    }

    /**
     * 通过/拒绝对方好友请求
     * <p>
     * 收到好友的验证请求的系统通知后，可以通过或者拒绝，对方会收到一条系统通知，通知的事件类型为 AddFriendNotify.Event.RECV_AGREE_ADD_FRIEND 或者 AddFriendNotify.Event.RECV_REJECT_ADD_FRIEND
     */
    public static void ackAddFriendRequest(String account, boolean agree) {
        NIMClient.getService(FriendService.class).ackAddFriendRequest(account, true); // 通过对方的好友请求
    }

    /**
     * 获取好友账号列表
     * <p>
     * 该方法是同步方法，返回我的好友帐号集合，可以根据帐号来获取对应的用户资料来构建自己的通讯录,见构建通讯录
     */
    public static List<String> getFriendAccounts() {
        List<String> friendAccounts = NIMClient.getService(FriendService.class).getFriendAccounts();
        return friendAccounts;
    }

    /**
     * 获取好友信息列表
     */
    public static List<Friend> getFriends() {
        List<Friend> friends = NIMClient.getService(FriendService.class).getFriends();
        return friends;
    }

    /**
     * 删除好友
     * <p>
     * 删除好友后，将自动解除双方的好友关系，双方的好友列表中均不存在对方。删除好友后，双方依然可以聊天。
     */
    public static void deleteFriend(String account, RequestCallback<Void> callback) {
        NIMClient.getService(FriendService.class).deleteFriend(account)
                .setCallback(callback);
    }

    /**
     * 根据用户账号获取好友
     */
    public static Friend getFriendByAccount(String account) {
        Friend friend = NIMClient.getService(FriendService.class).getFriendByAccount(account);
        return friend;
    }

    /**
     * 判断用户是否为我的好友
     */
    public static boolean isMyFriend(String account) {
        boolean isMyFriend = NIMClient.getService(FriendService.class).isMyFriend(account);
        return isMyFriend;
    }

    /**
     * 更新好友关系
     * 目前支持更新好友的备注名和好友关系扩展字段，见 FriendFieldEnum。
     */
    public static void updateFriendFields(String account, Map<FriendFieldEnum, Object> map, RequestCallback<Void> callback) {
        NIMClient.getService(FriendService.class).updateFriendFields(account, map)
                .setCallback(callback);
    }

    /**
     * 监听好友关系的变化
     * <p>
     * 第三方 APP 应在 APP 启动后监听好友关系的变化，当主动添加好友成功、被添加为好友、主动删除好友成功、被对方解好友关系、好友关系更新、登录同步好友关系数据时都会收到通知：
     */
    public static void observeFriendChangedNotify(Observer<FriendChangedNotify> friendChangedNotifyObserver, boolean register) {
        NIMClient.getService(FriendServiceObserve.class).observeFriendChangedNotify(friendChangedNotifyObserver, register);
    }


}

89:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimHistorySDK.java
package com.lqr.wechat.nimsdk;

import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.msg.MsgService;
import com.netease.nimlib.sdk.msg.constant.MsgTypeEnum;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.IMMessage;
import com.netease.nimlib.sdk.msg.model.QueryDirectionEnum;

import java.util.List;

import static com.netease.nimlib.sdk.NIMClient.getService;

/**
 * @创建者 CSDN_LQR
 * @描述 历史记录相关
 */
public class NimHistorySDK {

    /**
     * SDK 提供了一个根据锚点查询本地消息历史记录的接口，根据提供的方向 (direct)，查询比 anchor 更老 (QUERY_OLD) 或更新 (QUERY_NEW) 的最靠近anchor 的 limit 条数据。调用者可使用 asc 参数指定结果排序规则，结果使用 time 作为排序字段。
     * 当进行首次查询时，锚点可以用使用 MessageBuilder#createEmptyMessage 接口生成。查询结果不包含锚点。
     *
     * @param anchor    IMMessage 查询锚点
     * @param direction QueryDirectionEnum 查询方向
     * @param limit     int 查询结果的条数限制
     * @param asc       boolean 查询结果的排序规则，如果为 true，结果按照时间升级排列，如果为 false，按照时间降序排列
     * @return 调用跟踪，可设置回调函数，接收查询结果
     */
    public static InvocationFuture<List<IMMessage>> queryMessageListEx(IMMessage anchor, QueryDirectionEnum direction, int limit, boolean asc) {
        return getService(MsgService.class).queryMessageListEx(anchor, direction, limit, asc);
    }

    /**
     * 根据起始、截止时间点以及查询方向从本地消息数据库中查询消息历史。<br>
     * 根据提供的方向 (direction)，以 anchor 为起始点，往前或往后查询由 anchor 到 toTime 之间靠近 anchor 的 limit 条消息。<br>
     * 查询范围由 toTime 和 limit 共同决定，以先到为准。如果到 toTime 之间消息大于 limit 条，返回 limit 条记录，如果小于 limit 条，返回实际条数。<br>
     * 查询结果排序规则：direction 为 QUERY_OLD 时 按时间降序排列，direction 为 QUERY_NEW 时按照时间升序排列。<br>
     * 注意：查询结果不包含锚点。
     *
     * @param anchor    查询锚点
     * @param toTime    查询截止时间，若方向为 QUERY_OLD，toTime 应小于 anchor.getTime()。方向为 QUERY_NEW，toTime 应大于 anchor.getTime() <br>
     * @param direction 查询方向
     * @param limit     查询结果的条数限制
     * @return 调用跟踪，可设置回调函数，接收查询结果
     */
    public static InvocationFuture<List<IMMessage>> queryMessageListExTime(IMMessage anchor, long toTime, QueryDirectionEnum direction, int limit) {
        return getService(MsgService.class).queryMessageListExTime(anchor, toTime, direction, limit);
    }

    /**
     * 通过uuid批量获取IMMessage(异步版本)
     */
    public static InvocationFuture<List<IMMessage>> queryMessageListByUuidAsync(List<String> uuids) {
        return getService(MsgService.class).queryMessageListByUuid(uuids);
    }

    /**
     * 通过uuid批量获取IMMessage(同步版本)
     */
    public static List<IMMessage> queryMessageListByUuidSync(List<String> uuids) {
        return getService(MsgService.class).queryMessageListByUuidBlock(uuids);
    }

    /**
     * 通过消息类型从本地消息数据库中查询消息历史。查询范围由 msgTypeEnum 参数和 anchor 的 sessionId 决定。该接口查询方向为从后往前。以锚点 anchor 作为起始点（不包含锚点），往前查询最多 limit 条消息。
     *
     * @param msgTypeEnum MsgTypeEnum 消息类型
     * @param anchor      IMMessage        搜索的消息锚点
     * @param limit       int               搜索结果的条数限制
     * @return
     */
    public static InvocationFuture<List<IMMessage>> queryMessageListByType(MsgTypeEnum msgTypeEnum, IMMessage anchor, int limit) {
        return NIMClient.getService(MsgService.class).queryMessageListByType(msgTypeEnum, anchor, limit);
    }

    /**
     * 按照关键字搜索聊天记录
     *
     * @param keyword      String 文本消息的搜索关键字
     * @param fromAccounts List<String> 消息说话者帐号列表，如果消息说话在该列表中，
     *                     那么无需匹配 keyword，对应的消息记录会直接加入搜索结果中。
     * @param anchor       IMMessage 搜索的消息锚点
     * @param limit        int 搜索结果的条数限制
     * @return 调用跟踪，可设置回调函数，接收查询结果
     */
    public static void searchMessageHistory(String keyword, List<String> fromAccounts, IMMessage anchor, int limit, RequestCallbackWrapper<List<IMMessage>> callback) {
        NIMClient.getService(MsgService.class).searchMessageHistory(keyword, fromAccounts, anchor, limit)
                .setCallback(callback);
    }

    /**
     * 根据时间点搜索消息历史
     *
     * @param keyword      文本消息的搜索关键字
     * @param fromAccounts 消息说话者帐号列表，如果消息说话在该列表中，那么无需匹配keyword，对应的消息记录会直接加入搜索结果集中。
     * @param time         查询范围时间点，比time小（从后往前查）
     * @param limit        搜索结果的条数限制
     * @return InvocationFuture
     */
    public static void searchAllMessageHistory(String keyword, List<String> fromAccounts, long time, int limit, RequestCallbackWrapper<List<IMMessage>> callback) {
        NIMClient.getService(MsgService.class).searchAllMessageHistory(keyword, fromAccounts, time, limit)
                .setCallback(callback);
    }

    /**
     * 删除单条消息
     */
    public static void deleteChattingHistory(IMMessage message) {
        NIMClient.getService(MsgService.class).deleteChattingHistory(message);
    }

    /**
     * 删除与某个聊天对象的全部消息记录
     */
    public static void clearChattingHistory(String account, SessionTypeEnum sessionType) {
        NIMClient.getService(MsgService.class).clearChattingHistory(account, sessionType);
    }

    /**
     * 从服务器拉取消息历史记录。
     *
     * @param anchor    IMMessage 起始时间点的消息，不能为 null。
     * @param toTime    long 结束时间点单位毫秒
     * @param limit     int 本次查询的消息条数上限(最多 100 条)
     * @param direction QueryDirectionEnum 查询方向，
     *                  QUERY_OLD 按结束时间点逆序查询，逆序排列；
     *                  QUERY_NEW 按起始时间点正序起查，正序排列
     * @param persist   boolean 通过该接口获取的漫游消息记录，要不要保存到本地消息数据库。
     * @return InvocationFuture
     */
    public static InvocationFuture<List<IMMessage>> pullMessageHistoryEx(IMMessage anchor, long toTime, int limit, QueryDirectionEnum direction, boolean persist) {
        return NIMClient.getService(MsgService.class).pullMessageHistoryEx(anchor, toTime, limit, direction, persist);
    }

    /**
     * 从服务器拉取消息历史记录。该接口查询方向为从后往前。以锚点 anchor 作为起始点（不包含锚点），
     * 往前查询最多 limit 条消息。
     *
     * @param anchor  IMMessage 查询锚点。
     * @param limit   int 本次查询的消息条数上限(最多 100 条)
     * @param persist boolean 通过该接口获取的漫游消息记录，要不要保存到本地消息数据库。
     * @return InvocationFuture
     */
    public static InvocationFuture<List<IMMessage>> pullMessageHistory(IMMessage anchor, int limit, boolean persist) {
        return NIMClient.getService(MsgService.class).pullMessageHistory(anchor, limit, persist);
    }

}

90:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimMessageSDK.java
package com.lqr.wechat.nimsdk;

import android.media.MediaPlayer;
import android.net.Uri;
import android.text.TextUtils;
import android.widget.Toast;

import com.lqr.wechat.utils.UIUtils;
import com.netease.nimlib.sdk.AbortableFuture;
import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.msg.MessageBuilder;
import com.netease.nimlib.sdk.msg.MsgService;
import com.netease.nimlib.sdk.msg.MsgServiceObserve;
import com.netease.nimlib.sdk.msg.attachment.FileAttachment;
import com.netease.nimlib.sdk.msg.attachment.MsgAttachment;
import com.netease.nimlib.sdk.msg.constant.AttachStatusEnum;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.IMMessage;

import java.io.File;
import java.util.List;
import java.util.Map;

/**
 * @创建者 CSDN_LQR
 * @描述 网易云信消息相关SDK
 */
public class NimMessageSDK {

    /**
     * 创建文本消息
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param content     文本内容
     * @return
     */
    public static IMMessage createTextMessage(String sessionId, SessionTypeEnum sessionType, String content) {
        return MessageBuilder.createTextMessage(
                sessionId,
                sessionType,
                content
        );
    }

    /**
     * 创建地理位置消息
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param latitude    纬度
     * @param longitude   经度
     * @param address     地址信息描述
     * @return
     */
    public static IMMessage createLocationMessage(String sessionId, SessionTypeEnum sessionType, double latitude, double longitude, String address) {
        return MessageBuilder.createLocationMessage(
                sessionId,
                sessionType,
                latitude,
                longitude,
                address
        );
    }

    /**
     * 创建图片消息
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param file        图片文件对象
     * @param displayName 文件显示名字，如果第三方 APP 不关注，可以为 null
     * @return
     */
    public static IMMessage createImageMessage(String sessionId, SessionTypeEnum sessionType, File file, String displayName) {
        return MessageBuilder.createImageMessage(
                sessionId,
                sessionType,
                file,
                displayName
        );
    }

    /**
     * 创建音频消息
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param file        音频文件
     * @param duration    音频持续时间，单位是ms
     * @return
     */
    public static IMMessage createAudioMessage(String sessionId, SessionTypeEnum sessionType, File file, long duration) {
        return MessageBuilder.createAudioMessage(
                sessionId,
                sessionType,
                file,
                duration
        );
    }

    /**
     * 创建音频消息(不知道行不行)
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param file        音频文件
     * @return
     */
    public static IMMessage createAudioMessage(String sessionId, SessionTypeEnum sessionType, File file) {
        MediaPlayer mediaPlayer = getVideoMediaPlayer(file);
        long duration = mediaPlayer == null ? 0 : mediaPlayer.getDuration();
        return createAudioMessage(sessionId, sessionType, file, duration);
    }

    /**
     * 创建视频消息
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param file        视频文件
     * @param displayName 视频显示名，可为空
     * @return
     */
    public static IMMessage createVideoMessage(String sessionId, SessionTypeEnum sessionType, File file, String displayName) {
        MediaPlayer mediaPlayer = getVideoMediaPlayer(file);
        long duration = mediaPlayer == null ? 0 : mediaPlayer.getDuration();
        int height = mediaPlayer == null ? 0 : mediaPlayer.getVideoHeight();
        int width = mediaPlayer == null ? 0 : mediaPlayer.getVideoWidth();
        return MessageBuilder.createVideoMessage(
                sessionId,
                sessionType,
                file,
                duration, // 视频持续时间
                width, // 视频宽度
                height, // 视频高度
                displayName
        );
    }

    /**
     * // 创建提醒消息（主要用于会话内的通知提醒，例如进入会话时出现的欢迎消息，
     * // 或是会话过程中命中敏感词后的提示消息等场景，也可以用自定义消息实现，但相对于Tip消息实现比较复杂）
     * // 注意：提醒消息不支持setAttachment（如果要使用Attachment请使用自定义消息）。
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param content     提示内容，可以为空
     * @return
     */
    public static IMMessage createTipMessage(String sessionId, SessionTypeEnum sessionType, String content) {
        IMMessage message = MessageBuilder.createTipMessage(
                sessionId,
                sessionType
        );
        if (!TextUtils.isEmpty(content))
            message.setContent(content);
        return message;
    }

    /**
     * 创建自定义消息
     *
     * @param sessionId   聊天对象的 ID，如果是单聊，为用户帐号，如果是群聊，为群组 ID
     * @param sessionType 聊天类型，单聊或群组
     * @param content     文本内容
     * @param attachment  附件
     * @return
     */
    public static IMMessage createCustomMessage(String sessionId, SessionTypeEnum sessionType, String content, MsgAttachment attachment) {
        return MessageBuilder.createCustomMessage(sessionId, sessionType, content, attachment);
    }

    /**
     * 设置服务器扩展字段
     *
     * @param message 消息对象
     * @param data    扩展字段
     * @return
     */
    public static IMMessage setRemoteExtension(IMMessage message, Map data) {
        message.setRemoteExtension(data);
        return message;
    }

    /**
     * 设置本地扩展字段
     *
     * @param message 消息对象
     * @param data    扩展字段
     * @return
     */
    public static IMMessage setLocalExtension(IMMessage message, Map data) {
        message.setLocalExtension(data);
        return message;
    }

    /**
     * 自定义推送属性
     *
     * @param message 消息对象
     * @param data    推送属性
     * @return
     */
    public static IMMessage setPushPayload(IMMessage message, Map data) {
        message.setPushPayload(data);
        return message;
    }

    /**
     * 设置推送内容
     *
     * @param message     消息对象
     * @param pushContent 推送内容
     * @return
     */
    public static IMMessage setPushContent(IMMessage message, String pushContent) {
        message.setPushContent(pushContent);
        return message;
    }

    /**
     * 发送消息
     *
     * @param message 消息对象
     * @param resend  如果是发送失败后重发，标记为true，否则填false
     */
    private static void sendMessage(IMMessage message, boolean resend) {
        NIMClient.getService(MsgService.class).sendMessage(message, resend);
    }

    /**
     * 发送消息
     *
     * @param message
     */
    public static void sendMessage(IMMessage message) {
        sendMessage(message, false);
    }

    /**
     * 重发消息
     *
     * @param message
     */
    public static void reSendMessage(IMMessage message) {
        sendMessage(message, true);
    }

    /**
     * 转发消息，网易云信支持消息转发功能，不支持通知消息和音视频消息的转发，其他消息类型均支持。
     *
     * @param forwardMessage  想转发的消息
     * @param sessionId       转发目标的聊天对象id
     * @param sessionTypeEnum 转发目标的会话类型
     */
    public static void forwardMessage(IMMessage forwardMessage, String sessionId, SessionTypeEnum sessionTypeEnum) {
        // 创建待转发消息
        IMMessage message = MessageBuilder.createForwardMessage(forwardMessage, sessionId, sessionTypeEnum);
        if (message == null) {
            Toast.makeText(UIUtils.getContext(), "该类型不支持转发", Toast.LENGTH_SHORT).show();
            return;
        }
        sendMessage(message, false);
    }

    /**
     * 保存消息到本地
     * 1. 如果第三方APP想保存消息到本地，可以调用 MsgService#saveMessageToLocal ，该接口保存消息到本地数据库，但不发送到服务器端。该接口将消息保存到数据库后，如果需要通知到UI，可将参数 notify 设置为 true ，此时会触发 #observeReceiveMessage 通知。
     * 2. 此接口在 1.8.0 版本及以上支持设置是否计入未读数（默认计入未读数），若需要不计入未读数，传入的 IMMessage 中的 CustomMessageConfig 的 enableUnreadCount 需要设置为 false 。
     *
     * @param message
     * @param nofity  是否要提醒
     */
    public static void saveMessageToLocal(IMMessage message, boolean nofity) {
        NIMClient.getService(MsgService.class).saveMessageToLocal(message, nofity);
    }

    /**
     * 注册/注销消息状态变化观察者
     * <p>
     * 如果是观察接收状态，一般如下步骤：
     * // 1、根据sessionId判断是否是自己的消息
     * // 2、更改内存中消息的状态
     * // 3、刷新界面
     *
     * @param observer 监听回调（回调中的参数为有状态发生改变的消息对象，其 msgStatus 和 attachStatus 均为最新状态。发送消息和接收消息的状态监听均可以通过此接口完成。）
     * @param register true为注册，false为注销
     */
    public static void observeMsgStatus(Observer<IMMessage> observer, boolean register) {
        NIMClient.getService(MsgServiceObserve.class).observeMsgStatus(observer, register);
    }

    /**
     * 如果发送的多媒体文件消息，还需要监听文件的上传进度。
     *
     * @param observer 监听回调（回调中的参数为附件的传输进度，可根据 progress 中的 uuid 查找具体的消息对象，更新 UI。上传附件和下载附件的进度监听均可以通过此接口完成。)
     */
    public static void observeAttachProgress(Observer observer, boolean register) {
        NIMClient.getService(MsgServiceObserve.class).observeAttachmentProgress(observer, register);
    }

    /**
     * 接收消息
     * 通过添加消息接收观察者，在有新消息到达时，第三方 APP 就可以接收到通知
     * <p>
     * 该代码的典型场景为消息对话界面，在界面 onCreate 里注册消息接收观察者，在 onDestroy 中注销观察者。在收到消息时，判断是否是当前聊天对象的消息，如果是，加入到列表中显示
     *
     * @param incomingMessageObserver 消息接收观察者
     */
    public static void observeReceiveMessage(Observer<List<IMMessage>> incomingMessageObserver, boolean register) {
        NIMClient.getService(MsgServiceObserve.class)
                .observeReceiveMessage(incomingMessageObserver, register);
    }

    /**
     * 判断附件是否已经下载过
     * <p>
     * 下载之前判断一下是否已经下载。若重复下载，会报错误码414。
     * 错误码414可能是重复下载，或者下载参数错误
     *
     * @param message
     * @return
     */
    public static boolean isOriginImageHasDownloaded(final IMMessage message) {
        if (message.getAttachStatus() == AttachStatusEnum.transferred) {
            if (message.getAttachment() instanceof FileAttachment) {
                if (!TextUtils.isEmpty(((FileAttachment) message.getAttachment()).getPath())) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * 正常情况收到消息后附件会自动下载。如果下载失败，可调用该接口重新下载
     *
     * @param message 附件所在的消息体
     * @param thumb   下载缩略图还是原文件。为true时，仅下载缩略图。<br>
     *                该参数仅对图片和视频类消息有效
     * @return AbortableFuture 调用跟踪。可设置回调函数，可中止下载操作
     */
    public static AbortableFuture downloadAttachment(IMMessage message, boolean thumb) {
        return NIMClient.getService(MsgService.class).downloadAttachment(message, true);
    }

    /**
     * 清空消息数据库的所有消息记录。 <br>
     * 可选择是否要同时清空最近联系人列表数据库。<br>
     * 若最近联系人列表也被清空，会触发{@link MsgServiceObserve#observeRecentContactDeleted(Observer, boolean)}通知
     *
     * @param clearRecent 若为true，将同时清空最近联系人列表数据
     */
    public static void clearMsgDatabase(boolean clearRecent) {
        NIMClient.getService(MsgService.class).clearMsgDatabase(clearRecent);
    }

    /**
     * 消息撤回
     *
     * @param message 待撤回的消息
     * @return InvocationFuture 可设置回调函数，监听发送结果。
     */
    public static InvocationFuture<Void> revokeMessage(IMMessage message, RequestCallback<Void> callback) {
        InvocationFuture<Void> voidInvocationFuture = NIMClient.getService(MsgService.class)
                .revokeMessage(message);
        voidInvocationFuture.setCallback(callback);
        return voidInvocationFuture;
    }

    /**
     * 判断是否是当前会话的消息
     *
     * @param message     要判断的消息
     * @param sessionId   会话ID
     * @param sessionType 当前会话类型（单聊、群聊）  @return
     */
    public static boolean isCurrentSessionMessage(IMMessage message, String sessionId, SessionTypeEnum sessionType) {
        return message.getSessionType() == sessionType
                && message.getSessionId() != null
                && message.getSessionId().equals(sessionId);
    }

    /**
     * 获取视频mediaPlayer
     *
     * @param file 视频文件
     * @return mediaPlayer
     */
    private static MediaPlayer getVideoMediaPlayer(File file) {
        try {
            return MediaPlayer.create(UIUtils.getContext(), Uri.parse("file://" + file.getAbsolutePath()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


}

91:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimRecentContactSDK.java
package com.lqr.wechat.nimsdk;

import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.msg.MsgService;
import com.netease.nimlib.sdk.msg.MsgServiceObserve;
import com.netease.nimlib.sdk.msg.constant.SessionTypeEnum;
import com.netease.nimlib.sdk.msg.model.RecentContact;

import java.util.List;

/**
 * @创建者 CSDN_LQR
 * @描述 最近联系人相关SDK
 * <p>
 * 最近会话 RecentContact ，也可称作会话列表或者最近联系人列表，
 * 它记录了与用户最近有过会话的联系人信息，包括联系人帐号、联系人类型、最近一条消息的时间、消息状态、消息内容、未读条数等信息。
 * RecentContact 中还提供了一个扩展标签 tag（用于做联系人置顶、最近会话列表排序等扩展用途）和一个扩展字段 extension （是一个Map，可用于做群@等扩展用途），并支持动态的更新这两个字段。
 * 最近会话列表由 SDK 维护并提供查询、监听变化的接口，只要与某个用户或者群组有产生聊天（自己发送消息或者收到消息）， SDK 会自动更新最近会话列表并通知上层，开发者无需手动更新。
 * 某些场景下，开发者可能需要手动向最近会话列表中插入一条会话项（即插入一个最近联系人），
 * 例如：在创建完高级群时，需要在最近会话列表中显示该群的会话项。由创建高级群完成时并不会收到任何消息， SDK 并不会立即更新最近会话，此时要满足需求，可以在创建群成功的回调中，插入一条本地消息， 即调用 MsgService#saveMessageToLocal。
 */
public class NimRecentContactSDK {

    /**
     * 获取最近会话列表
     *
     * @param callback 回调监听（回调中的参数即为最近联系人列表）
     */
    public static void queryRecentContacts(RequestCallbackWrapper<List<RecentContact>> callback) {
        NIMClient.getService(MsgService.class).queryRecentContacts()
                .setCallback(callback);
    }

    /**
     * 注册/注销观察者
     *
     * @param messageObserver 观察者对象
     * @param register        注册/注销
     */
    public static void observeRecentContact(Observer<List<RecentContact>> messageObserver, boolean register) {
        //  注册/注销观察者
        NIMClient.getService(MsgServiceObserve.class)
                .observeRecentContact(messageObserver, register);
    }

    /**
     * 获取会话未读数总数
     *
     * @return
     */
    public static int getTotalUnreadCount() {
        int unreadNum = NIMClient.getService(MsgService.class).getTotalUnreadCount();
        return unreadNum;
    }

    /**
     * 将指定最近联系人的未读数清零(标记已读)。<br>
     * 调用该接口后，会触发{@link MsgServiceObserve#observeRecentContact(Observer, boolean)} 通知
     *
     * @param account     聊天对象帐号
     * @param sessionType 会话类型
     */
    public static void clearUnreadCount(String account, SessionTypeEnum sessionType) {
        NIMClient.getService(MsgService.class).clearUnreadCount(account, sessionType);
    }

    /**
     * 设置当前会话
     * <p>
     * 如果用户在开始聊天时，开发者调用了 setChattingAccount 接口，SDK会自动管理消息的未读数。当收到新消息时，自动将未读数清零
     *
     * @param sessionId
     * @param sessionType
     */
    public static void setChattingAccount(String sessionId, SessionTypeEnum sessionType) {
        NIMClient.getService(MsgService.class).setChattingAccount(sessionId, sessionType);
    }

    /**
     * 移除最近会话列表中的项
     *
     * @param recent
     */
    public static void deleteRecentContact(RecentContact recent) {
        NIMClient.getService(MsgService.class).deleteRecentContact(recent);
    }

    /**
     * 移除最近会话列表中的项，并会触发 MsgServiceObserve#observeRecentContactDeleted 通知
     *
     * @param account
     * @param sessionType
     */
    public static void deleteRecentContactAndNotify(String account, SessionTypeEnum sessionType) {
        NIMClient.getService(MsgService.class).deleteRecentContact2(account, sessionType);
    }

    /**
     * 删除指定最近联系人的漫游消息。
     * 不删除本地消息，但如果在其他端登录，当前时间点该会话已经产生的消息不漫游。
     *
     * @param contactId       最近联系人的ID（好友帐号，群ID等）
     * @param sessionTypeEnum 会话类型
     * @return InvocationFuture 可设置回调函数，监听删除结果。
     */
    public static InvocationFuture<Void> deleteRoamingRecentContact(String contactId, SessionTypeEnum sessionTypeEnum, RequestCallback<Void> callback) {
        InvocationFuture<Void> voidInvocationFuture = NIMClient.getService(MsgService.class)
                .deleteRoamingRecentContact(contactId, sessionTypeEnum);
        voidInvocationFuture.setCallback(callback);
        return voidInvocationFuture;
    }
}

92:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimSystemSDK.java
package com.lqr.wechat.nimsdk;

import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.msg.SystemMessageObserver;
import com.netease.nimlib.sdk.msg.SystemMessageService;
import com.netease.nimlib.sdk.msg.constant.SystemMessageType;
import com.netease.nimlib.sdk.msg.model.SystemMessage;

import java.util.List;

/**
 * @创建者 CSDN_LQR
 * @描述 系统相关SDK
 */
public class NimSystemSDK {


    /**
     * 监听系统通知
     */
    public static void observeReceiveSystemMsg(Observer<SystemMessage> systemMessageObserver, boolean register) {
        NIMClient.getService(SystemMessageObserver.class).observeReceiveSystemMsg(systemMessageObserver, register);
    }

    /**
     * 查询系统通知列表
     */
    public static List<SystemMessage> querySystemMessagesBlock(int offset, int limit) {
        return NIMClient.getService(SystemMessageService.class)
                .querySystemMessagesBlock(offset, limit);// 参数offset为当前已经查了offset条，limit为要继续查询limit条。
    }

    /**
     * 根据类型查询系统通知列表
     */
    public static InvocationFuture<List<SystemMessage>> querySystemMessageByType(List<SystemMessageType> types, int offset, int limit) {
        return NIMClient.getService(SystemMessageService.class).querySystemMessageByType(types, offset, limit);
    }

    /**
     * 删除一条系统通知
     */
    public static void deleteSystemMessage(SystemMessage message) {
        NIMClient.getService(SystemMessageService.class)
                .deleteSystemMessage(message.getMessageId());
    }

    /**
     * 删除所有系统通知
     */
    public static void clearSystemMessages() {
        NIMClient.getService(SystemMessageService.class).clearSystemMessages();
    }

    /**
     * 删除指定类型的系统通知
     * <p>
     * 如：只删除“添加好友”类型的系统通知
     */
    public static void clearSystemMessagesByType(List<SystemMessageType> types) {
        NIMClient.getService(SystemMessageService.class).clearSystemMessagesByType(types);
    }

    /**
     * 查询系统通知未读数总和
     */
    public int querySystemMessageUnreadCountBlock() {
        int unread = NIMClient.getService(SystemMessageService.class)
                .querySystemMessageUnreadCountBlock();
        return unread;
    }

    /**
     * 查询指定类型的系统通知未读数总和
     * <p>
     * 如：查询“添加好友”类型的系统通知未读数总和
     */
    public static int querySystemMessageUnreadCountByType(List<SystemMessageType> types) {
        int unread = NIMClient.getService(SystemMessageService.class)
                .querySystemMessageUnreadCountByType(types);
        return unread;
    }

    /**
     * 设置单条系统通知为已读
     */
    public static void setSystemMessageRead(long messageId) {
        NIMClient.getService(SystemMessageService.class).setSystemMessageRead(messageId);
    }

    /**
     * 将所有系统通知设为已读
     * <p>
     * 如：进入过系统通知列表后，可调用此函数将未读数值为0
     */
    public static void resetSystemMessageUnreadCount() {
        NIMClient.getService(SystemMessageService.class).resetSystemMessageUnreadCount();
    }

    /**
     * 将指定类型的系统通知设为已读接口
     * <p>
     * 如：将“添加好友”类型的系统通知设为已读
     */
    public static void resetSystemMessageUnreadCount(List<SystemMessageType> types) {
        NIMClient.getService(SystemMessageService.class).resetSystemMessageUnreadCountByType(types);
    }
}

93:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimTeamSDK.java
package com.lqr.wechat.nimsdk;

import android.text.TextUtils;

import com.lqr.wechat.AppConst;
import com.lqr.wechat.model.UserCache;
import com.netease.nimlib.sdk.InvocationFuture;
import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.friend.model.Friend;
import com.netease.nimlib.sdk.msg.model.SystemMessage;
import com.netease.nimlib.sdk.team.TeamService;
import com.netease.nimlib.sdk.team.TeamServiceObserver;
import com.netease.nimlib.sdk.team.constant.TeamAllMuteModeEnum;
import com.netease.nimlib.sdk.team.constant.TeamFieldEnum;
import com.netease.nimlib.sdk.team.constant.TeamTypeEnum;
import com.netease.nimlib.sdk.team.constant.VerifyTypeEnum;
import com.netease.nimlib.sdk.team.model.MemberChangeAttachment;
import com.netease.nimlib.sdk.team.model.MuteMemberAttachment;
import com.netease.nimlib.sdk.team.model.Team;
import com.netease.nimlib.sdk.team.model.TeamMember;
import com.netease.nimlib.sdk.team.model.UpdateTeamAttachment;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @创建者 CSDN_LQR
 * @描述 群相关SDK
 * <p>
 * 1、普通群
 * <p>
 * 开发手册中所提及的普通群都等同于 Demo 中的讨论组。普通群没有权限操作，适用于快速创建多人会话的场景。每个普通群只有一个管理员。管理员可以对普通群进行增减员操作，普通成员只能对普通群进行增员操作。在添加新成员的时候，并不需要经过对方同意。
 * <p>
 * 2、高级群
 * <p>
 * 高级群在权限上有更多的限制，权限分为群主、管理员、以及群成员。2.4.0之前版本在添加成员的时候需要对方接受邀请；2.4.0版本之后，可以设定被邀请模式（是否需要对方同意）。高级群可以覆盖所有普通群的能力，建议开发者创建时选用高级群。
 */
public class NimTeamSDK {

    /**
     * 关闭群聊消息提醒
     * <p>
     * 群聊消息提醒可以单独打开或关闭，关闭提醒之后，用户仍然会收到这个群的消息。
     * 如果开发者使用的是云信内建的消息提醒，用户收到新消息后不会再用通知栏提醒，如果用户使用的 iOS 客户端，则他将收不到该群聊消息的 APNS 推送。
     * 如果开发者自行实现状态栏提醒，可通过 Team 的 mute 接口获取提醒配置，并决定是不是要显示通知。
     * 群聊消息提醒设置可以漫游。 开发者可通过调用一下接口打开或关闭群聊消息提醒：
     */
    public static void muteTeam(String teamId, boolean mute) {
        NIMClient.getService(TeamService.class).muteTeam(teamId, mute);
    }

    /**
     * 获取所有我加入的群(异步)
     * <p>
     * 这里获取的是所有我加入的群列表（退群、被移除群后，将不在返回列表中）
     */
    public static void queryTeamList(RequestCallbackWrapper<List<Team>> callback) {
        NIMClient.getService(TeamService.class).queryTeamList()
                .setCallback(callback);
    }

    /**
     * 获取所有我加入的群(同步)
     * <p>
     */
    public static List<Team> queryTeamListBlock() {
        List<Team> teams = NIMClient.getService(TeamService.class).queryTeamListBlock();
        return teams;
    }

    /**
     * 按照类型获取自己加入的群列表
     */
    public static void queryTeamListByType(TeamTypeEnum type, RequestCallback<List<Team>> callback) {
        NIMClient.getService(TeamService.class).queryTeamListByType(type)
                .setCallback(callback);
    }

    /**
     * 根据群ID查询群资料(异步)
     * <p>
     * 如果本地没有群组资料，则去服务器查询。如果自己不在这个群中，该接口返回的可能是过期资料，如需最新的，请调用 searchTeam 接口去服务器查询。
     */
    public static void queryTeam(String teamId, RequestCallbackWrapper<Team> callback) {
        NIMClient.getService(TeamService.class).queryTeam(teamId).setCallback(callback);
    }

    /**
     * 根据群ID查询群资料(同步)
     * <p>
     * 如果本地没有群组资料，则去服务器查询。如果自己不在这个群中，该接口返回的可能是过期资料，如需最新的，请调用 searchTeam 接口去服务器查询。
     */
    public static Team queryTeamBlock(String teamId) {
        Team team = NIMClient.getService(TeamService.class).queryTeamBlock(teamId);
        return team;
    }

    /**
     * 创建群组
     * <p>
     * 网易云信群组分为两类：普通群和高级群，两种群组的消息功能都是相同的，区别在于管理功能。普通群所有人都可以拉人入群，除群主外，其他人都不能踢人；固定群则拥有完善的成员权限体系及管理功能。创建群的接口相同，传入不同的类型参数即可。
     * <p>
     * 注意：群扩展字段最大长度为1024字节，若超限，服务器将返回414。
     *
     * @param fields   创建时可以预设群组的一些相关属性，如果是普通群，仅群名有效。fields 中，key 为数据字段，value 对对应的值，该值类型必须和 field 中定义的 fieldType 一致
     * @param type     TeamTypeEnum.Advanced,TeamTypeEnum.Normal
     * @param accounts 要入群的账号
     * @param callback
     */
    public static void createTeam(HashMap<TeamFieldEnum, Serializable> fields, TeamTypeEnum type, List<String> accounts, RequestCallback<Team> callback) {
        NIMClient.getService(TeamService.class).createTeam(fields, type, "", accounts)
                .setCallback(callback);
    }

    /**
     * 加入群组
     */
    public static void applyJoinTeam(String teamId, String reason, RequestCallback<Team> callback) {
        NIMClient.getService(TeamService.class)
                .applyJoinTeam(teamId, reason)
                .setCallback(callback);
    }

    /**
     * 解散群组
     * <p>
     * 高级群的群主可以解散群
     */
    public static void dismissTeam(String teamId, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).dismissTeam(teamId)
                .setCallback(callback);
    }

    /**
     * 拉人入群
     * <p>
     * 普通群所有人都可以拉人入群，SDK 2.4.0之前版本高级群仅管理员和拥有者可以邀请人入群， SDK 2.4.0及以后版本高级群在创建时可以设置群邀请模式，支持仅管理员或者所有人均可拉人入群。
     * <p>
     * 普通群可直接将用户拉入群聊，拉人成功，直接返回onSuccess。
     * <p>
     * 高级群不能直接拉入，发出邀请成功会返回onFailed，并且返回码为810（这是一个特例，与其他接口成功直接返回 onSuccess 有所不同）。(详情请看官方文档)
     */
    public static void addMembers(String teamId, List<String> accounts, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).addMembers(teamId, accounts)
                .setCallback(callback);
    }

    /**
     * 踢人出群(单个)
     * <p>
     * 普通群仅拥有者可以踢人，高级群拥有者和管理员可以踢人，且管理员不能踢拥有者和其他管理员。
     * <p>
     * 踢人后，群内所有成员(包括被踢者)会收到一条消息类型为 notification 的 IMMessage，类型为 NotificationType#KickMember, 附件类型为 MemberChangeAttachment。
     * 可以通过MemberChangeAttachment#getExtension 获取服务器设置的扩展字段。
     */
    public static void removeMember(String teamId, String account, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).removeMember(teamId, account)
                .setCallback(callback);
    }

    /**
     * 踢人出群（多个）
     */
    public static InvocationFuture<Void> removeMembers(String teamId, List<String> members) {
        InvocationFuture<Void> invocationFuture = NIMClient.getService(TeamService.class).removeMembers(teamId, members);
        return invocationFuture;
    }

    /**
     * 主动退群
     * <p>
     * 普通群群主可以退群，若退群，该群没有群主。高级群除群主外，其他用户均可以主动退群：
     * <p>
     * 退群后，群内所有成员(包括退出者)会收到一条消息类型为 notification 的 IMMessage，附件类型为 MemberChangeAttachment。
     */
    public static void quitTeam(String teamId, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).quitTeam(teamId)
                .setCallback(callback);
    }

    /**
     * 转让群组
     * <p>
     * 高级群拥有者可以将群的拥有者权限转给群内的其他成员，转移后，被转让者变为新的拥有者，原拥有者变为普通成员。原拥有者还可以选择在转让的同时，直接退出该群。
     *
     * @param teamId   群ID
     * @param account  新任拥有者的用户帐号
     * @param quit     转移时是否要同时退出该群
     * @param callback
     */
    public static void transferTeam(String teamId, String account, boolean quit, RequestCallback<List<TeamMember>> callback) {
        NIMClient.getService(TeamService.class)
                .transferTeam(teamId, account, quit)
                .setCallback(callback);
    }

    /**
     * 接受邀请
     * <p>
     * 验证入群邀请
     * <p>
     * 收到入群邀请后，用户可在系统通知中看到该邀请，并选择接受或拒绝
     */
    public static void acceptInvite(SystemMessage message, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class)
                .acceptInvite(message.getTargetId(), message.getFromAccount())
                .setCallback(callback);
    }

    /**
     * 拒绝邀请,可带上拒绝理由
     * 邀请该用户的管理员会收到一条系统通知，类型为 SystemMessageType#DeclineTeamInvite
     * <p>
     * 验证入群邀请
     * <p>
     * 收到入群邀请后，用户可在系统通知中看到该邀请，并选择接受或拒绝
     */
    public static void declineInvite(SystemMessage message, RequestCallback<Void> callback, String reason) {
        NIMClient.getService(TeamService.class)
                .declineInvite(message.getTargetId(), message.getFromAccount(), reason)
                .setCallback(callback);
    }

    /**
     * 同意申请
     * 如果同意入群申请，群内所有成员(包括申请者)都会收到一条消息类型为 notification 的 IMMessage，附件类型为 MemberChangeAttachment。
     * <p>
     * 验证入群申请
     * <p>
     * 用户发出申请后，所有管理员都会收到一条系统通知，类型为 SystemMessageType#TeamApply。管理员可选择同意或拒绝
     */
    public static void passApply(SystemMessage message, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class)
                .passApply(message.getTargetId(), message.getFromAccount())
                .setCallback(callback);
    }

    /**
     * 拒绝申请，可填写理由
     * 如果拒绝申请，申请者会收到一条系统通知，类型为 SystemMessageType#RejectTeamApply。
     * <p>
     * 验证入群申请
     * <p>
     * 用户发出申请后，所有管理员都会收到一条系统通知，类型为 SystemMessageType#TeamApply。管理员可选择同意或拒绝
     */
    public static void rejectApply(SystemMessage message, String reason, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class)
                .rejectApply(message.getTargetId(), message.getFromAccount(), reason)
                .setCallback(callback);
    }

    /**
     * 每次仅修改群的一个属性，可修改的属性包括：群名，介绍，公告，验证类型等。
     */
    public static void updateTeamField(String teamId, TeamFieldEnum teamFieldEnum, Serializable value, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).updateTeam(teamId, teamFieldEnum, value)
                .setCallback(callback);
    }

    /**
     * 批量更新群组资料，可一次性更新多个字段的值
     */
    public static InvocationFuture<Void> updateTeamFields(String teamId, Map<TeamFieldEnum, Serializable> fields) {
        InvocationFuture<Void> voidInvocationFuture = NIMClient.getService(TeamService.class).updateTeamFields(teamId, fields);
        return voidInvocationFuture;
    }

    /**
     * 修改成员的群昵称
     * <p>
     * 普通群不支持修改成员的群昵称。
     * 对于高级群，群主和管理员修改群内其他成员的群昵称，仅群主和管理员拥有权限。
     * 群主可以修改所有人的群昵称。管理员只能修改普通群成员的群昵称。
     *
     * @param teamId  所在群组ID
     * @param account 要修改的群成员帐号
     * @param nick    新的群昵称
     * @return InvocationFuture 可以设置回调函数，监听操作结果
     */
    public static void updateMemberNick(String teamId, String account, String nick, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).updateMemberNick(teamId, account, nick).setCallback(callback);
    }

    /**
     * 修改自己的群昵称
     * <p>
     * 普通群不支持修改自己的群昵称。
     *
     * @param teamId 所在群组ID
     * @param nick   新的群昵称
     * @return InvocationFuture 可以设置回调函数，监听操作结果
     */
    public static void updateMyTeamNick(String teamId, String nick, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).updateMyTeamNick(teamId, nick).setCallback(callback);
    }

    /**
     * 修改自己的群成员扩展字段（自定义属性）
     * <p>
     * 修改后，群成员会收到群成员资料变更通知。
     *
     * @param teamId 所在群组ID
     * @param extMap 新的扩展字段（自定义属性）类型：Map<String,Object>
     * @return InvocationFuture 可以设置回调函数，监听操作结果
     */
    public static void updateMyMemberExtension(String teamId, Map<String, Object> extMap, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).updateMyMemberExtension(teamId, extMap).setCallback(callback);
    }

    /**
     * 注册/注销群组资料变动观察者
     */
    public static void observeTeamUpdate(Observer<List<Team>> teamUpdateObserver, boolean register) {
        NIMClient.getService(TeamServiceObserver.class).observeTeamUpdate(teamUpdateObserver, register);
    }

    /**
     * 注册/注销群组被移除的观察者。在退群，被踢，群被解散时会收到该通知。
     */
    public static void observeTeamRemove(Observer<Team> teamRemoveObserver, boolean register) {
        NIMClient.getService(TeamServiceObserver.class).observeTeamRemove(teamRemoveObserver, register);
    }

    /**
     * 注册/注销群成员资料变化观察者。群组添加新成员，成员资料变化会收到该通知。
     */
    public static void observeMemberUpdate(Observer<List<TeamMember>> memberUpdateObserver, boolean register) {
        NIMClient.getService(TeamServiceObserver.class).observeMemberUpdate(memberUpdateObserver, register);
    }

    /**
     * 注册/注销移除群成员的观察者
     */
    public static void observeMemberRemove(Observer<TeamMember> memberRemoveObserver, boolean register) {
        NIMClient.getService(TeamServiceObserver.class).observeMemberRemove(memberRemoveObserver, register);
    }

    /**
     * 拥有者添加管理员
     *
     * @param teamId   群 ID
     * @param accounts 待提升为管理员的用户帐号列表
     * @return InvocationFuture 可以设置回调函数,如果成功，参数为新增的群管理员列表
     */
    public static void addManagers(String teamId, List<String> accounts, RequestCallback<List<TeamMember>> callback) {
        NIMClient.getService(TeamService.class)
                .addManagers(teamId, accounts)
                .setCallback(callback);
    }

    /**
     * 拥有者撤销管理员权限 <br>
     *
     * @param teamId   群ID
     * @param accounts 待撤销的管理员的帐号列表
     * @return InvocationFuture 可以设置回调函数，如果成功，参数为被撤销的群成员列表(权限已被降为Normal)。
     */
    public static void removeManagers(String teamId, List<String> accounts, RequestCallback<List<TeamMember>> callback) {
        NIMClient.getService(TeamService.class)
                .removeManagers(teamId, accounts)
                .setCallback(callback);
    }

    /**
     * 禁言、解除禁言
     *
     * @param teamId  群组ID
     * @param account 被禁言、被解除禁言的账号
     * @param mute    true表示禁言，false表示解除禁言
     * @return InvocationFuture 可以设置回调函数，监听操作结果
     */
    public static void muteTeamMember(String teamId, String account, boolean mute, RequestCallback<Void> callback) {
        NIMClient.getService(TeamService.class).muteTeamMember(teamId, account, mute).setCallback(callback);
    }

    /**
     * 获取群组成员
     * <p>
     * 该操作有可能只是从本地数据库读取缓存数据，也有可能会从服务器同步新的数据，因此耗时可能会比较长。
     */
    public static void queryMemberList(String teamId, RequestCallback<List<TeamMember>> callback) {
        NIMClient.getService(TeamService.class).queryMemberList(teamId)
                .setCallback(callback);
    }

    /**
     * 根据群ID和账号查询群成员资料(异步)
     */
    public static void queryTeamMember(String teamId, String account, RequestCallbackWrapper<TeamMember> callback) {
        NIMClient.getService(TeamService.class).queryTeamMember(teamId, account)
                .setCallback(callback);
    }

    /**
     * 根据群ID和账号查询群成员资料(同步)
     */
    public static TeamMember queryTeamMemberBlock(String teamId, String account) {
        return NIMClient.getService(TeamService.class).queryTeamMemberBlock(teamId, account);
    }

    /**
     * 查询高级群资料
     */
    public static void searchTeam(String teamId, RequestCallback<Team> callback) {
        NIMClient.getService(TeamService.class).searchTeam(teamId)
                .setCallback(callback);
    }

    /**
     * 查询被禁言群成员列表
     * <p>
     * 调用该查询接口，只返回调用 TeamService#muteTeamMember 禁言的用户，不返回使用群全员禁言接口（服务器接口）禁言的用户。
     */
    public static List<TeamMember> queryMutedTeamMembers(String teamId) {
        List<TeamMember> members = NIMClient.getService(TeamService.class).queryMutedTeamMembers(teamId);
        return members;
    }

    /**
     * 得到除自己以外其他群成员名单
     */
    public static String buildMemberListString(List<String> members, String teamId, String fromAccount) {
        StringBuilder sb = new StringBuilder();
        for (String account : members) {
            if (!TextUtils.isEmpty(fromAccount) && fromAccount.equals(account)) {
                continue;
            }
            sb.append(getTeamMemberDisplayNameWithYou(teamId, account));
            sb.append(",");
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }

    /**
     * 获取显示名称。用户本人显示“你”
     */
    public static String getTeamMemberDisplayNameWithYou(String tid, String account) {
        //getTeamMemberDisplayNameYou
        if (account.equals(UserCache.getAccount())) {
            return "你";
        }

        return getTeamMemberDisplayNameWithoutMe(tid, account);
    }

    /**
     * 获取显示名称。用户本人也显示昵称
     * 高级群：首先返回群昵称。没有群昵称，则返回备注名。没有设置备注名，则返回用户昵称。
     * 讨论组：首先返回备注名。没有设置备注名，则返回用户昵称。
     */
    public static String getTeamMemberDisplayNameWithoutMe(String tid, String account) {
        String memberNick = getTeamNick(tid, account);
        if (!TextUtils.isEmpty(memberNick)) {
            return memberNick;
        }

        Friend friend = NimFriendSDK.getFriendByAccount(account);
        if (friend != null && !TextUtils.isEmpty(friend.getAlias())) {
            return friend.getAlias();
        }

        NimUserInfo userInfo = NimUserInfoSDK.getUser(account);
        if (userInfo != null && !TextUtils.isEmpty(userInfo.getName())) {
            return userInfo.getName();
        }

        return account;
    }

    public static String getTeamNick(String tid, String account) {
        Team team = NimTeamSDK.queryTeamBlock(tid);
        if (team != null && team.getType() == TeamTypeEnum.Advanced) {
            TeamMember member = NimTeamSDK.queryTeamMemberBlock(tid, account);
            if (member != null && !TextUtils.isEmpty(member.getTeamNick())) {
                return member.getTeamNick();
            }
        }
        return null;
    }

    /*================== 通知相关 start ==================*/
    public static String buildMuteTeamNotification(MuteMemberAttachment na, String teamId) {
        StringBuilder sb = new StringBuilder();

        sb.append(buildMemberListString(na.getTargets(), teamId, null));
        sb.append("被管理员");
        sb.append(na.isMute() ? "禁言" : "解除禁言");

        return sb.toString();
    }

    public static String buildAcceptInviteNotification(MemberChangeAttachment na, String teamId, String fromAccount) {
        StringBuilder sb = new StringBuilder();

        sb.append(getTeamMemberDisplayNameWithYou(teamId, fromAccount));
        sb.append(" 接受了 ").append(buildMemberListString(na.getTargets(), teamId, null)).append(" 的入群邀请");

        return sb.toString();
    }

    public static String buildRemoveTeamManagerNotification(MemberChangeAttachment na, String teamId) {
        StringBuilder sb = new StringBuilder();

        sb.append(buildMemberListString(na.getTargets(), teamId, null));
        sb.append(" 被撤销管理员身份");

        return sb.toString();
    }

    public static String buildAddTeamManagerNotification(MemberChangeAttachment na, String teamId) {
        StringBuilder sb = new StringBuilder();

        sb.append(buildMemberListString(na.getTargets(), teamId, null));
        sb.append(" 被任命为管理员");

        return sb.toString();
    }

    public static String buildTransferOwnerNotification(MemberChangeAttachment na, String teamId, String fromAccount) {
        StringBuilder sb = new StringBuilder();
        sb.append(getTeamMemberDisplayNameWithYou(teamId, fromAccount));
        sb.append(" 将群转移给 ");
        sb.append(buildMemberListString(na.getTargets(), teamId, null));

        return sb.toString();
    }

    public static String buildManagerPassTeamApplyNotification(MemberChangeAttachment na, String teamId) {
        StringBuilder sb = new StringBuilder();
        sb.append("管理员通过用户 ");
        sb.append(buildMemberListString(na.getTargets(), teamId, null));
        sb.append(" 的入群申请");

        return sb.toString();
    }

    public static String buildUpdateTeamNotification(UpdateTeamAttachment a, String tid, String account) {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<TeamFieldEnum, Object> field : a.getUpdatedFields().entrySet()) {
            if (field.getKey() == TeamFieldEnum.Name) {
                sb.append("名称被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.Introduce) {
                sb.append("群介绍被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.Announcement) {
                sb.append(getTeamMemberDisplayNameWithYou(tid, account) + " 修改了群公告");
            } else if (field.getKey() == TeamFieldEnum.VerifyType) {
                VerifyTypeEnum type = (VerifyTypeEnum) field.getValue();
                String authen = "群身份验证权限更新为";
                if (type == VerifyTypeEnum.Free) {
                    sb.append(authen + "允许任何人加入");
                } else if (type == VerifyTypeEnum.Apply) {
                    sb.append(authen + "需要身份验证");
                } else {
                    sb.append(authen + "不允许任何人申请加入");
                }
            } else if (field.getKey() == TeamFieldEnum.Extension) {
                sb.append("群扩展字段被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.Ext_Server) {
                sb.append("群扩展字段(服务器)被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.ICON) {
                sb.append("群头像已更新");
            } else if (field.getKey() == TeamFieldEnum.InviteMode) {
                sb.append("群邀请他人权限被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.TeamUpdateMode) {
                sb.append("群资料修改权限被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.BeInviteMode) {
                sb.append("群被邀请人身份验证权限被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.TeamExtensionUpdateMode) {
                sb.append("群扩展字段修改权限被更新为 " + field.getValue());
            } else if (field.getKey() == TeamFieldEnum.AllMute) {
                TeamAllMuteModeEnum teamAllMuteModeEnum = (TeamAllMuteModeEnum) field.getValue();
                if (teamAllMuteModeEnum == TeamAllMuteModeEnum.Cancel) {
                    sb.append("取消群全员禁言");
                } else {
                    sb.append("群全员禁言");
                }
            } else {
                sb.append("群" + field.getKey() + "被更新为 " + field.getValue());
            }
            sb.append("\r\n");
        }
        if (sb.length() < 2) {
            return "未知通知";
        }
        return sb.delete(sb.length() - 2, sb.length()).toString();
    }

    public static String buildDismissTeamNotification(String teamId, String fromAccount) {
        return getTeamMemberDisplayNameWithYou(teamId, fromAccount) + " 解散了群";
    }

    public static String buildLeaveTeamNotification(String teamId, String fromAccount) {
        String tip;
        Team team = NimTeamSDK.queryTeamBlock(teamId);
        if (team.getType() == TeamTypeEnum.Advanced || team.getType() == TeamTypeEnum.Normal) {
            tip = " 离开了群";
        } else {
            tip = " 离开了讨论组";
        }
        return getTeamMemberDisplayNameWithYou(teamId, fromAccount) + tip;
    }

    public static String buildKickMemberNotification(MemberChangeAttachment na, String teamId, String fromAccount) {
        StringBuilder sb = new StringBuilder();
        sb.append(buildMemberListString(na.getTargets(), teamId, null));
        Team team = NimTeamSDK.queryTeamBlock(teamId);
        if (team.getType() == TeamTypeEnum.Advanced || team.getType() == TeamTypeEnum.Normal) {
            sb.append(" 已被移出群");
        } else {
            sb.append(" 已被移出讨论组");
        }

        return sb.toString();
    }

    public static String buildInviteMemberNotification(MemberChangeAttachment na, String teamId, String fromAccount) {
        StringBuilder sb = new StringBuilder();
        String selfName = getTeamMemberDisplayNameWithYou(teamId, fromAccount);

        sb.append(selfName);
        sb.append(" 邀请 ");
        sb.append(buildMemberListString(na.getTargets(), teamId, fromAccount));
        Team team = NimTeamSDK.queryTeamBlock(teamId);
        if (team.getType() == TeamTypeEnum.Advanced || team.getType() == TeamTypeEnum.Normal) {
            sb.append(" 加入了群聊");
        } else {
            sb.append(" 加入讨论组");
        }
        return sb.toString();
    }
    /*================== 通知相关 end ==================*/


    /*================== 扩展字段解析 start ==================*/
    public static void setShouldShowNickName(String teamId, boolean shouldShowNickName, RequestCallback<Void> callback) {
        TeamMember member = queryTeamMemberBlock(teamId, UserCache.getAccount());
        if (member != null) {
            Map<String, Object> ext = member.getExtension();
            ext.put(AppConst.MyTeamMemberExt.SHOULD_SHOW_NICK_NAME, shouldShowNickName);
            NimTeamSDK.updateMyMemberExtension(teamId, ext, callback);
        }
    }

    public static boolean shouldShowNickName(String teamId) {
        TeamMember member = queryTeamMemberBlock(teamId, UserCache.getAccount());
        if (member == null)
            return false;
        Map<String, Object> ext = member.getExtension();
        Object o = ext.get(AppConst.MyTeamMemberExt.SHOULD_SHOW_NICK_NAME);
        if (o == null)
            return false;
        boolean shouldShowNickName = (boolean) o;
        return shouldShowNickName;
    }
    /*================== 扩展字段解析 end ==================*/
}



94:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\NimUserInfoSDK.java
package com.lqr.wechat.nimsdk;

import com.netease.nimlib.sdk.NIMClient;
import com.netease.nimlib.sdk.Observer;
import com.netease.nimlib.sdk.RequestCallback;
import com.netease.nimlib.sdk.RequestCallbackWrapper;
import com.netease.nimlib.sdk.friend.FriendService;
import com.netease.nimlib.sdk.nos.NosService;
import com.netease.nimlib.sdk.uinfo.UserService;
import com.netease.nimlib.sdk.uinfo.UserServiceObserve;
import com.netease.nimlib.sdk.uinfo.constant.UserInfoFieldEnum;
import com.netease.nimlib.sdk.uinfo.model.NimUserInfo;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @创建者 CSDN_LQR
 * @描述 网易云信用户信息相关sdk
 */
public class NimUserInfoSDK {

    /*================== 获取用户信息 ==================*/

    /**
     * 通过用户帐号集合，从本地数据库批量获取用户资料列表
     */
    public static List<NimUserInfo> getUsers(List<String> accounts) {
        List<NimUserInfo> users = NIMClient.getService(UserService.class).getUserInfoList(accounts);
        return users;
    }

    /**
     * 通过用户账号，从本地数据库获取用户资料
     */
    public static NimUserInfo getUser(String account) {
        NimUserInfo user = NIMClient.getService(UserService.class).getUserInfo(account);
        return user;
    }

    /**
     * 获取本地数据库中所有的用户资料，一般适合在登录后构建用户资料缓存时使用
     *
     * @param account
     */
    public static List<NimUserInfo> getUsers(String account) {
        List<NimUserInfo> users = NIMClient.getService(UserService.class).getAllUserInfo();
        return users;
    }

    /**
     * 构建通讯录
     * <p>
     * 如果使用网易云信用户关系、用户资料托管，构建通讯录，先获取我所有好友帐号，再根据帐号去获取对应的用户资料
     */
    public static List<NimUserInfo> getContacts() {
        List<String> accounts = NIMClient.getService(FriendService.class).getFriendAccounts(); // 获取所有好友帐号
        List<NimUserInfo> users = NIMClient.getService(UserService.class).getUserInfoList(accounts); // 获取所有好友用户资料
        return users;
    }

    /**
     * 获取服务器用户资料(常用于实时要求高的场景)
     * <p>
     * 从服务器获取用户资料，一般在本地用户资料不存在时调用，获取后 SDK 会负责更新本地数据库
     */
    public static void getUserInfosFormServer(List<String> accounts, RequestCallback<List<NimUserInfo>> callback) {
        NIMClient.getService(UserService.class).fetchUserInfo(accounts)
                .setCallback(callback);
    }

    /**
     * 获取单个用户的信息（可以用来做搜索用户）
     */
    public static void getUserInfoFromServer(String account, RequestCallback<List<NimUserInfo>> callback) {
        List<String> accounts = new ArrayList<>();
        accounts.add(account);
        getUserInfosFormServer(accounts, callback);
    }

    /*================== 更新用户信息 ==================*/

    /**
     * 上传文件到网易云信云存储
     */
    public static void uploadFile(File file, String mimeType, RequestCallbackWrapper<String> callback) {
        NIMClient.getService(NosService.class).upload(file, mimeType)
                .setCallback(callback);
    }

    /**
     * 更新用户本人资料
     * <p>
     * 传入参数 Map<UserInfoFieldEnum, Object> 更新用户本人资料，key 为字段，value 为对应的值。
     * 具体字段见 UserInfoFieldEnum，包括：昵称，性别，头像 URL，签名，手机，邮箱，生日以及扩展字段等。
     */
    public static void updateUserInfo(Map<UserInfoFieldEnum, Object> fields, RequestCallbackWrapper<Void> callback) {
        NIMClient.getService(UserService.class).updateUserInfo(fields)
                .setCallback(callback);
    }

    /**
     * 注册/注销观察者
     */
    public static void observeUserInfoUpdate(Observer<List<NimUserInfo>> userInfoUpdateObserver, boolean register) {
        NIMClient.getService(UserServiceObserve.class).observeUserInfoUpdate(userInfoUpdateObserver, register);
    }

}

95:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\AttachmentStore.java

package com.lqr.wechat.nimsdk.utils;

import android.graphics.Bitmap;
import android.text.TextUtils;

import com.lqr.wechat.utils.LogUtils;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

/**
 * 用于把附件保存到文件系统中
 */
public class AttachmentStore {
    public static long copy(String srcPath, String dstPath) {
    	if (TextUtils.isEmpty(srcPath) || TextUtils.isEmpty(dstPath)) {
    		return -1;
    	}

        File source = new File(srcPath);
        if (!source.exists()) {
            return -1;
        }

        if (srcPath.equals(dstPath)) {
            return source.length();
        }

        FileChannel fcin = null;
        FileChannel fcout = null;
    	try {
            fcin = new FileInputStream(source).getChannel();
            fcout = new FileOutputStream(create(dstPath)).getChannel();
            ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(4096);
            while (fcin.read(tmpBuffer) != -1) {
                tmpBuffer.flip();
                fcout.write(tmpBuffer);
                tmpBuffer.clear();
            }
			return source.length();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (fcin != null) {
                    fcin.close();
				}
				if (fcout != null) {
                    fcout.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
    	return -1;
    }
	
    public static long getFileLength(String srcPath) {
    	if (TextUtils.isEmpty(srcPath)) {
			return -1;
		}

    	File srcFile = new File(srcPath);
    	if (!srcFile.exists()) {
			return -1;
		}
    	
    	return srcFile.length();
	}

    public static long save(String path, String content) {
        return save(content.getBytes(), path);
    }

    /**
     * 把数据保存到文件系统中，并且返回其大小
     * 
     * @param data
     * @param filePath
     * @return 如果保存失败,则返回-1
     */
    public static long save(byte[] data, String filePath) {
    	if (TextUtils.isEmpty(filePath)) {
    		return -1;
    	}
    	
        File f = new File(filePath);
        if(f.getParentFile() == null) {
        	return -1;
        }
        
        if (!f.getParentFile().exists()) {// 如果不存在上级文件夹
            f.getParentFile().mkdirs();
        }
        try {
            f.createNewFile();
            FileOutputStream fout = new FileOutputStream(f);
            fout.write(data);
            fout.close();
        } catch (IOException e) {
        	e.printStackTrace();
            return -1;
        }
        return f.length();
    }
    
    public static boolean move(String srcFilePath, String dstFilePath) {
    	if (TextUtils.isEmpty(srcFilePath) || TextUtils.isEmpty(dstFilePath)) {
			return false;
		}

    	File srcFile = new File(srcFilePath);
    	if (!srcFile.exists() || !srcFile.isFile()) {
			return false;
		}
    	
        File dstFile = new File(dstFilePath);
        if(dstFile.getParentFile() == null) {
        	return false;
        }
        
        if (!dstFile.getParentFile().exists()) {// 如果不存在上级文件夹
        	dstFile.getParentFile().mkdirs();
        }
  
        return srcFile.renameTo(dstFile);
    }
    
    public static File create(String filePath) {
        if (TextUtils.isEmpty(filePath)) {
            return null;
        }

        File f = new File(filePath);
        if (!f.getParentFile().exists()) {// 如果不存在上级文件夹
            f.getParentFile().mkdirs();
        }
        try {
            f.createNewFile();
            return f;
        } catch (IOException e) {
        	if(f!=null && f.exists()){
        		f.delete();
        	}
            return null;
        }    
    }

    /**
     * @param is
     * @param filePath
     * @return 保存失败，返回-1
     */
    public static long save(InputStream is, String filePath) {
        File f = new File(filePath);
        if (!f.getParentFile().exists()) {// 如果不存在上级文件夹
            f.getParentFile().mkdirs();
        }
        FileOutputStream fos = null;
        try {
            f.createNewFile();
            fos = new FileOutputStream(f);
            int read = 0;
            byte[] bytes = new byte[8091];
            while ((read = is.read(bytes)) != -1) {
                fos.write(bytes, 0, read);
            }
            return f.length();
        } catch (IOException e) {
        	if(f!=null && f.exists()){
        		f.delete();
        	}
        	LogUtils.e("file", "save is to " + filePath + " failed: " + e.getMessage());
            return -1;
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 把文件从文件系统中读取出来
     * 
     * @param path
     * @return 如果无法读取,则返回null
     */
    public static byte[] load(String path) {
        try {
        	File f = new File(path);
        	int unread = (int) f.length();
        	int read = 0;
            byte[] buf = new byte[unread]; // 读取文件长度
            FileInputStream fin = new FileInputStream(f);
            do {
            	int count = fin.read(buf, read, unread);
            	read += count;
            	unread -= count;
			} while (unread != 0);
            fin.close();
            return buf;
        } catch (FileNotFoundException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
    }

    public static String loadAsString(String path) {
        if (isFileExist(path)) {
            byte[] content = load(path);
            return new String(content);
        } else {
            return null;
        }
    }

    /**
     * 删除指定路径文件
     * 
     * @param path
     */
    public static boolean delete(String path) {
        if(TextUtils.isEmpty(path)){
            return false;
        }
        File f = new File(path);
        if (f.exists()) {
            f = renameOnDelete(f);
            return f.delete();
        } else {
			return false;
		}
    }
    
    public static void deleteOnExit(String path) {
        if(TextUtils.isEmpty(path)){
            return;
        }
        File f = new File(path);
        if (f.exists()) {
            f.deleteOnExit();
        }
    }

    public static boolean deleteDir(String path) {
        return deleteDir(path, true);
    }

    private static boolean deleteDir(String path, boolean rename) {
        boolean success = true;
        File file = new File(path);
        if (file.exists()) {
            if (rename) {
                file = renameOnDelete(file);
            }

            File[] list = file.listFiles();
            if (list != null) {
                int len = list.length;
                for (int i = 0; i < len; ++i) {
                    if (list[i].isDirectory()) {
                        deleteDir(list[i].getPath(), false);
                    } else {
                        boolean ret = list[i].delete();
                        if (!ret) {
                            success = false;
                        }
                    }
                }
            }
        } else {
            success = false;
        }
        if (success) {
            file.delete();
        }
        return success;
    }

    // rename before delete to avoid lingering filesystem lock of android
    private static File renameOnDelete(File file) {
        String tmpPath = file.getParent() + "/" + System.currentTimeMillis() + "_tmp";
        File tmpFile = new File(tmpPath);
        if (file.renameTo(tmpFile)) {
            return tmpFile;
        } else {
            return file;
        }
    }
    
    public static boolean isFileExist(String path) {
		if (!TextUtils.isEmpty(path) && new File(path).exists()) {
			return true;
		}
		else {
			return false;
		}
	}

    public static boolean saveBitmap(Bitmap bitmap, String path, boolean recyle) {
        if (bitmap == null || TextUtils.isEmpty(path)) {
            return false;
        }

        BufferedOutputStream bos = null;
        try {
            FileOutputStream fos = new FileOutputStream(path);
            bos = new BufferedOutputStream(fos);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 80, bos);
            return true;

        } catch (FileNotFoundException e) {
            return false;
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException e) {
                }
            }
            if (recyle) {
                bitmap.recycle();
            }
        }
    }
}

96:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\BitmapDecoder.java
package com.lqr.wechat.nimsdk.utils;

import android.annotation.TargetApi;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.ThumbnailUtils;
import android.os.Build;
import android.provider.MediaStore;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public class BitmapDecoder {
    public static Bitmap decode(InputStream is) {
        BitmapFactory.Options options = new BitmapFactory.Options();

        // RGB_565
        options.inPreferredConfig = Bitmap.Config.RGB_565;

        /**
         * 在4.4上，如果之前is标记被移动过，会导致解码失败
         */
        try {
            if (is.markSupported()) {
                is.reset();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            return BitmapFactory.decodeStream(is, null, options);
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        }

        return null;
    }

    public static Bitmap decodeSampledForDisplay(String pathName) {
        return decodeSampledForDisplay(pathName, true);
    }

    public static Bitmap decodeSampledForDisplay(String pathName, boolean withTextureLimit) {
        float ratio = ImageUtil.MAX_IMAGE_RATIO;
        int[][] reqBounds = new int[][]{
                new int[]{ScreenUtil.screenWidth * 2, ScreenUtil.screenHeight},
                new int[]{ScreenUtil.screenWidth, ScreenUtil.screenHeight * 2},
                new int[]{(int) (ScreenUtil.screenWidth * 1.414), (int) (ScreenUtil.screenHeight * 1.414)},
        };

        // decode bound
        int[] bound = decodeBound(pathName);
        // pick request bound
        int[] reqBound = pickReqBoundWithRatio(bound, reqBounds, ratio);

        int width = bound[0];
        int height = bound[1];
        int reqWidth = reqBound[0];
        int reqHeight = reqBound[1];

        // calculate sample size
        int sampleSize = SampleSizeUtil.calculateSampleSize(width, height, reqWidth, reqHeight);

        if (withTextureLimit) {
            // adjust sample size
            sampleSize = SampleSizeUtil.adjustSampleSizeWithTexture(sampleSize, width, height);
        }

        int RETRY_LIMIT = 5;
        Bitmap bitmap = decodeSampled(pathName, sampleSize);
        while (bitmap == null && RETRY_LIMIT > 0) {
            sampleSize++;
            RETRY_LIMIT--;
            bitmap = decodeSampled(pathName, sampleSize);
        }

        return bitmap;
    }

    public static int[] decodeBound(String pathName) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(pathName, options);

        return new int[]{options.outWidth, options.outHeight};
    }

    public static int[] decodeBound(Resources res, int resId) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeResource(res, resId, options);

        return new int[]{options.outWidth, options.outHeight};
    }

    private static int[] pickReqBoundWithRatio(int[] bound, int[][] reqBounds, float ratio) {
        float hRatio = bound[1] == 0 ? 0 : (float) bound[0] / (float) bound[1];
        float vRatio = bound[0] == 0 ? 0 : (float) bound[1] / (float) bound[0];

        if (hRatio >= ratio) {
            return reqBounds[0];
        } else if (vRatio >= ratio) {
            return reqBounds[1];
        } else {
            return reqBounds[2];
        }
    }

    public static Bitmap decodeSampled(String pathName, int sampleSize) {
        BitmapFactory.Options options = new BitmapFactory.Options();

        // RGB_565
        options.inPreferredConfig = Bitmap.Config.RGB_565;
        // sample size
        options.inSampleSize = sampleSize;

        Bitmap bitmap = null;
        try {
            bitmap = BitmapFactory.decodeFile(pathName, options);
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
            return null;
        }

        return checkInBitmap(bitmap, options, pathName);
    }

    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
    private static Bitmap checkInBitmap(Bitmap bitmap,
                                        BitmapFactory.Options options, String path) {
        boolean honeycomb = Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;
        if (honeycomb && bitmap != options.inBitmap && options.inBitmap != null) {
            options.inBitmap.recycle();
            options.inBitmap = null;
        }

        if (bitmap == null) {
            try {
                bitmap = BitmapFactory.decodeFile(path, options);
            } catch (OutOfMemoryError e) {
                e.printStackTrace();
            }
        }
        return bitmap;
    }

    public static int[] decodeBound(File file) {
        InputStream is = null;
        try {
            is = new FileInputStream(file);
            int[] bound = decodeBound(is);
            return bound;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return new int[]{0, 0};
    }

    public static int[] decodeBound(InputStream is) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(is, null, options);

        return new int[]{options.outWidth, options.outHeight};
    }

    public static Bitmap decodeSampled(InputStream is, int reqWidth, int reqHeight) {
        BitmapFactory.Options options = new BitmapFactory.Options();

        // RGB_565
        options.inPreferredConfig = Bitmap.Config.RGB_565;
        // sample size
        options.inSampleSize = getSampleSize(is, reqWidth, reqHeight);

        try {
            return BitmapFactory.decodeStream(is, null, options);
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        }

        return null;
    }

    public static Bitmap decodeSampled(String pathName, int reqWidth, int reqHeight) {
        return decodeSampled(pathName, getSampleSize(pathName, reqWidth, reqHeight));
    }

    public static int getSampleSize(InputStream is, int reqWidth, int reqHeight) {
        // decode bound
        int[] bound = decodeBound(is);

        // calculate sample size
        int sampleSize = SampleSizeUtil.calculateSampleSize(bound[0], bound[1], reqWidth, reqHeight);

        return sampleSize;
    }

    public static int getSampleSize(String pathName, int reqWidth, int reqHeight) {
        // decode bound
        int[] bound = decodeBound(pathName);

        // calculate sample size
        int sampleSize = SampleSizeUtil.calculateSampleSize(bound[0], bound[1], reqWidth, reqHeight);

        return sampleSize;
    }

    /**
     * ******************************* decode resource ******************************************
     */

    public static Bitmap decodeSampled(Resources resources, int resId, int reqWidth, int reqHeight) {
        return decodeSampled(resources, resId, getSampleSize(resources, resId, reqWidth, reqHeight));
    }

    public static int getSampleSize(Resources resources, int resId, int reqWidth, int reqHeight) {
        // decode bound
        int[] bound = decodeBound(resources, resId);

        // calculate sample size
        int sampleSize = SampleSizeUtil.calculateSampleSize(bound[0], bound[1], reqWidth, reqHeight);

        return sampleSize;
    }


    public static Bitmap decodeSampled(Resources res, int resId, int sampleSize) {
        BitmapFactory.Options options = new BitmapFactory.Options();

        // RGB_565
        options.inPreferredConfig = Bitmap.Config.RGB_565;
        // sample size
        options.inSampleSize = sampleSize;

        try {
            return BitmapFactory.decodeResource(res, resId, options);
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        }

        return null;
    }

    public static boolean extractThumbnail(String videoPath, String thumbPath) {
        if (!AttachmentStore.isFileExist(thumbPath)) {
            Bitmap thumbnail = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Images.Thumbnails.MINI_KIND);
            if (thumbnail != null) {
                AttachmentStore.saveBitmap(thumbnail, thumbPath, true);
                return true;
            }
        }
        return false;
    }
}

97:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\ExternalStorage.java
package com.lqr.wechat.nimsdk.utils;

import android.content.Context;
import android.os.Environment;
import android.os.StatFs;
import android.text.TextUtils;

import java.io.File;
import java.io.IOException;

/** package */
class ExternalStorage {
	/**
	 * 外部存储根目录
	 */
    private String sdkStorageRoot = null;

	private static ExternalStorage instance;

	private ExternalStorage() {

	}

	synchronized public static ExternalStorage getInstance() {
		if (instance == null) {
			instance = new ExternalStorage();
		}
		return instance;
	}

    public void init(Context context, String sdkStorageRoot) {
        if (!TextUtils.isEmpty(sdkStorageRoot)) {
            File dir = new File(sdkStorageRoot);
            if (!dir.exists()) {
                dir.mkdirs();
            }
            if (dir.exists() && !dir.isFile()) {
                this.sdkStorageRoot = sdkStorageRoot;
                if (!sdkStorageRoot.endsWith("/")) {
                    this.sdkStorageRoot = sdkStorageRoot + "/";
                }
            }
        }

        if (TextUtils.isEmpty(this.sdkStorageRoot)) {
            loadStorageState(context);
        }

        createSubFolders();
    }

    private void loadStorageState(Context context) {
        String externalPath = Environment.getExternalStorageDirectory().getPath();
        this.sdkStorageRoot = externalPath + "/" + context.getPackageName() + "/";
    }

	private void createSubFolders() {
		boolean result = true;
		File root = new File(sdkStorageRoot);
		if (root.exists() && !root.isDirectory()) {
			root.delete();
		}
		for (StorageType storageType : StorageType.values()) {
			result &= makeDirectory(sdkStorageRoot + storageType.getStoragePath());
		}
		if (result) {
			createNoMediaFile(sdkStorageRoot);
		}
	}

	/**
	 * 创建目录
	 *
	 * @param path
	 * @return
	 */
	private boolean makeDirectory(String path) {
		File file = new File(path);
		boolean exist = file.exists();
		if (!exist) {
			exist = file.mkdirs();
		}
		return exist;
	}

	protected static String NO_MEDIA_FILE_NAME = ".nomedia";

	private void createNoMediaFile(String path) {
		File noMediaFile = new File(path + "/" + NO_MEDIA_FILE_NAME);
		try {
			if (!noMediaFile.exists()) {
				noMediaFile.createNewFile();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 文件全名转绝对路径（写）
	 *
	 * @param fileName
	 *            文件全名（文件名.扩展名）
	 * @return 返回绝对路径信息
	 */
	public String getWritePath(String fileName, StorageType fileType) {
		return pathForName(fileName, fileType, false, false);
	}

	private String pathForName(String fileName, StorageType type, boolean dir,
							   boolean check) {
		String directory = getDirectoryByDirType(type);
		StringBuilder path = new StringBuilder(directory);

		if (!dir) {
			path.append(fileName);
		}

		String pathString = path.toString();
		File file = new File(pathString);

		if (check) {
			if (file.exists()) {
				if ((dir && file.isDirectory())
						|| (!dir && !file.isDirectory())) {
					return pathString;
				}
			}

			return "";
		} else {
			return pathString;
		}
	}

	/**
	 * 返回指定类型的文件夹路径
	 *
	 * @param fileType
	 * @return
	 */
	public String getDirectoryByDirType(StorageType fileType) {
		return sdkStorageRoot + fileType.getStoragePath();
	}

	/**
	 * 根据输入的文件名和类型，找到该文件的全路径。
	 * @param fileName
     * @param fileType
	 * @return 如果存在该文件，返回路径，否则返回空
	 */
	public String getReadPath(String fileName, StorageType fileType) {
        if (TextUtils.isEmpty(fileName)) {
            return "";
        }

        return pathForName(fileName, fileType, false, true);
    }

    public boolean isSdkStorageReady() {
        String externalRoot = Environment.getExternalStorageDirectory().getAbsolutePath();
        if (this.sdkStorageRoot.startsWith(externalRoot)) {
            return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
        } else {
            return true;
        }
    }

	/**
	 * 获取外置存储卡剩余空间
	 * @return
	 */
    public long getAvailableExternalSize() {
		return getResidualSpace(sdkStorageRoot);
	}
    
    /**
     * 获取目录剩余空间
     * @param directoryPath
     * @return
     */
    private long getResidualSpace(String directoryPath) {
        try {
            StatFs sf = new StatFs(directoryPath);
            long blockSize = sf.getBlockSize();
            long availCount = sf.getAvailableBlocks();
            long availCountByte = availCount * blockSize;
            return availCountByte;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }
}

98:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\ImageUtil.java
package com.lqr.wechat.nimsdk.utils;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import android.text.TextUtils;

import com.lqr.wechat.R;
import com.lqr.wechat.utils.FileUtils;
import com.lqr.wechat.utils.LogUtils;
import com.lqr.wechat.utils.UIUtils;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class ImageUtil {
    public static class ImageSize {
        public int width = 0;
        public int height = 0;

        public ImageSize(int width, int height) {
            this.width = width;
            this.height = height;
        }
    }

    public final static float MAX_IMAGE_RATIO = 5f;

    public static Bitmap getDefaultBitmapWhenGetFail() {
        try {
            return getBitmapImmutableCopy(UIUtils.getResource(), R.mipmap.nim_image_download_failed);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static final Bitmap getBitmapImmutableCopy(Resources res, int id) {
        return getBitmap(res.getDrawable(id)).copy(Config.RGB_565, false);
    }

    public static final Bitmap getBitmap(Drawable dr) {
        if (dr == null) {
            return null;
        }

        if (dr instanceof BitmapDrawable) {
            return ((BitmapDrawable) dr).getBitmap();
        }

        return null;
    }

    public static Bitmap rotateBitmapInNeeded(String path, Bitmap srcBitmap) {
        if (TextUtils.isEmpty(path) || srcBitmap == null) {
            return null;
        }

        ExifInterface localExifInterface;
        try {
            localExifInterface = new ExifInterface(path);
            int rotateInt = localExifInterface.getAttributeInt(
                    ExifInterface.TAG_ORIENTATION,
                    ExifInterface.ORIENTATION_NORMAL);
            float rotate = getImageRotate(rotateInt);
            if (rotate != 0) {
                Matrix matrix = new Matrix();
                matrix.postRotate(rotate);
                Bitmap dstBitmap = Bitmap.createBitmap(srcBitmap, 0, 0,
                        srcBitmap.getWidth(), srcBitmap.getHeight(), matrix,
                        false);
                if (dstBitmap == null) {
                    return srcBitmap;
                } else {
                    if (srcBitmap != null && !srcBitmap.isRecycled()) {
                        srcBitmap.recycle();
                    }
                    return dstBitmap;
                }
            } else {
                return srcBitmap;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return srcBitmap;
        }
    }

    /**
     * 获得旋转角度
     *
     * @param rotate
     * @return
     */
    public static float getImageRotate(int rotate) {
        float f;
        if (rotate == 6) {
            f = 90.0F;
        } else if (rotate == 3) {
            f = 180.0F;
        } else if (rotate == 8) {
            f = 270.0F;
        } else {
            f = 0.0F;
        }

        return f;
    }

    public static int getImageMaxEdge() {
        return (int) (165.0 / 320.0 * ScreenUtil.screenWidth);
    }

    public static int getImageMinEdge() {
        return (int) (76.0 / 320.0 * ScreenUtil.screenWidth);
    }

    public static String makeThumbnail(Context context, File imageFile) {
        String thumbFilePath = StorageUtils.getWritePath(imageFile.getName(),
                StorageType.TYPE_THUMB_IMAGE);
        File thumbFile = AttachmentStore.create(thumbFilePath);
        if (thumbFile == null) {
            return null;
        }

        boolean result = scaleThumbnail(
                imageFile,
                thumbFile,
                getImageMaxEdge(),
                getImageMinEdge(),
                CompressFormat.JPEG,
                60);
        if (!result) {
            AttachmentStore.delete(thumbFilePath);
            return null;
        }

        return thumbFilePath;
    }

    public static Boolean scaleThumbnail(File srcFile, File dstFile, int dstMaxWH, int dstMinWH, CompressFormat compressFormat, int quality) {
        Boolean bRet = false;
        Bitmap srcBitmap = null;
        Bitmap dstBitmap = null;
        BufferedOutputStream bos = null;

        try {
            int[] bound = BitmapDecoder.decodeBound(srcFile);
            ImageSize size = getThumbnailDisplaySize(bound[0], bound[1], dstMaxWH, dstMinWH);
            srcBitmap = BitmapDecoder.decodeSampled(srcFile.getPath(), size.width, size.height);

            // 旋转
            ExifInterface localExifInterface = new ExifInterface(srcFile.getAbsolutePath());
            int rotateInt = localExifInterface.getAttributeInt(
                    ExifInterface.TAG_ORIENTATION,
                    ExifInterface.ORIENTATION_NORMAL);
            float rotate = getImageRotate(rotateInt);

            Matrix matrix = new Matrix();
            matrix.postRotate(rotate);

            float inSampleSize = 1;

            if (srcBitmap.getWidth() >= dstMinWH && srcBitmap.getHeight() <= dstMaxWH
                    && srcBitmap.getWidth() >= dstMinWH && srcBitmap.getHeight() <= dstMaxWH) {
                //如果第一轮拿到的srcBitmap尺寸都符合要求，不需要再做缩放
            } else {
                if (srcBitmap.getWidth() != size.width || srcBitmap.getHeight() != size.height) {
                    float widthScale = (float) size.width / (float) srcBitmap.getWidth();
                    float heightScale = (float) size.height / (float) srcBitmap.getHeight();

                    if (widthScale >= heightScale) {
                        size.width = srcBitmap.getWidth();
                        size.height /= widthScale;//必定小于srcBitmap.getHeight()
                        inSampleSize = widthScale;
                    } else {
                        size.width /= heightScale;//必定小于srcBitmap.getWidth()
                        size.height = srcBitmap.getHeight();
                        inSampleSize = heightScale;
                    }
                }
            }

            matrix.postScale(inSampleSize, inSampleSize);

            if (rotate == 0 && inSampleSize == 1) {
                dstBitmap = srcBitmap;
            } else {
                dstBitmap = Bitmap.createBitmap(srcBitmap, 0, 0, size.width, size.height, matrix, true);
            }

            bos = new BufferedOutputStream(new FileOutputStream(dstFile));
            dstBitmap.compress(compressFormat, quality, bos);
            bos.flush();
            bRet = true;
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            if (srcBitmap != null && !srcBitmap.isRecycled()) {
                srcBitmap.recycle();
                srcBitmap = null;
            }

            if (dstBitmap != null && !dstBitmap.isRecycled()) {
                dstBitmap.recycle();
                dstBitmap = null;
            }
        }
        return bRet;
    }

    public static ImageSize getThumbnailDisplaySize(float srcWidth, float srcHeight, float dstMaxWH, float dstMinWH) {
        if (srcWidth <= 0 || srcHeight <= 0) { // bounds check
            return new ImageSize((int) dstMinWH, (int) dstMinWH);
        }

        float shorter;
        float longer;
        boolean widthIsShorter;

        //store
        if (srcHeight < srcWidth) {
            shorter = srcHeight;
            longer = srcWidth;
            widthIsShorter = false;
        } else {
            shorter = srcWidth;
            longer = srcHeight;
            widthIsShorter = true;
        }

        if (shorter < dstMinWH) {
            float scale = dstMinWH / shorter;
            shorter = dstMinWH;
            if (longer * scale > dstMaxWH) {
                longer = dstMaxWH;
            } else {
                longer *= scale;
            }
        } else if (longer > dstMaxWH) {
            float scale = dstMaxWH / longer;
            longer = dstMaxWH;
            if (shorter * scale < dstMinWH) {
                shorter = dstMinWH;
            } else {
                shorter *= scale;
            }
        }

        //restore
        if (widthIsShorter) {
            srcWidth = shorter;
            srcHeight = longer;
        } else {
            srcWidth = longer;
            srcHeight = shorter;
        }

        return new ImageSize((int) srcWidth, (int) srcHeight);
    }

    public static File getScaledImageFileWithMD5(File imageFile, String mimeType) {
        String filePath = imageFile.getPath();

        if (!isInvalidPictureFile(mimeType)) {
            LogUtils.i("ImageUtil", "is invalid picture file");
            return null;
        }

        String tempFilePath = getTempFilePath(FileUtils.getExtensionName(filePath));
        File tempImageFile = AttachmentStore.create(tempFilePath);
        if (tempImageFile == null) {
            return null;
        }

        CompressFormat compressFormat = CompressFormat.JPEG;
        // 压缩数值由第三方开发者自行决定
        int maxWidth = 720;
        int quality = 60;

        if (ImageUtil.scaleImage(imageFile, tempImageFile, maxWidth, compressFormat, quality)) {
            return tempImageFile;
        } else {
            return null;
        }
    }

    private static String getTempFilePath(String extension) {
        return StorageUtils.getWritePath(
                UIUtils.getContext(),
                "temp_image_" + StringUtil.get36UUID() + "." + extension,
                StorageType.TYPE_TEMP);
    }

    public static Boolean scaleImage(File srcFile, File dstFile, int dstMaxWH, CompressFormat compressFormat, int quality) {
        Boolean success = false;

        try {
            int inSampleSize = SampleSizeUtil.calculateSampleSize(srcFile.getAbsolutePath(), dstMaxWH * dstMaxWH);
            Bitmap srcBitmap = BitmapDecoder.decodeSampled(srcFile.getPath(), inSampleSize);
            if (srcBitmap == null) {
                return success;
            }

            // 旋转
            ExifInterface localExifInterface = new ExifInterface(srcFile.getAbsolutePath());
            int rotateInt = localExifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
            float rotate = getImageRotate(rotateInt);

            Bitmap dstBitmap;
            float scale = (float) Math.sqrt(((float) dstMaxWH * (float) dstMaxWH) / ((float) srcBitmap.getWidth() * (float) srcBitmap.getHeight()));
            if (rotate == 0f && scale >= 1) {
                dstBitmap = srcBitmap;
            } else {
                try {
                    Matrix matrix = new Matrix();
                    if (rotate != 0) {
                        matrix.postRotate(rotate);
                    }
                    if (scale < 1) {
                        matrix.postScale(scale, scale);
                    }
                    dstBitmap = Bitmap.createBitmap(srcBitmap, 0, 0, srcBitmap.getWidth(), srcBitmap.getHeight(), matrix, true);
                } catch (OutOfMemoryError e) {
                    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dstFile));
                    srcBitmap.compress(compressFormat, quality, bos);
                    bos.flush();
                    bos.close();
                    success = true;

                    if (!srcBitmap.isRecycled())
                        srcBitmap.recycle();
                    srcBitmap = null;

                    return success;
                }
            }

            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dstFile));
            dstBitmap.compress(compressFormat, quality, bos);
            bos.flush();
            bos.close();
            success = true;

            if (!srcBitmap.isRecycled())
                srcBitmap.recycle();
            srcBitmap = null;

            if (!dstBitmap.isRecycled())
                dstBitmap.recycle();
            dstBitmap = null;
        } catch (Exception e) {
            e.printStackTrace();
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        }
        return success;
    }

    public static ImageSize getThumbnailDisplaySize(int maxSide, int minSide, String imagePath) {
        int[] bound = BitmapDecoder.decodeBound(imagePath);
        ImageSize imageSize = getThumbnailDisplaySize(bound[0], bound[1], maxSide, minSide);
        return imageSize;
    }

    public static int[] getBoundWithLength(int maxSide, Object imageObject, boolean resizeToDefault) {
        int width = -1;
        int height = -1;

        int[] bound;
        if (String.class.isInstance(imageObject)) {
            bound = BitmapDecoder.decodeBound((String) imageObject);
            width = bound[0];
            height = bound[1];
        } else if (Integer.class.isInstance(imageObject)) {
            bound = BitmapDecoder.decodeBound(UIUtils.getResource(), (Integer) imageObject);
            width = bound[0];
            height = bound[1];
        } else if (InputStream.class.isInstance(imageObject)) {
            bound = BitmapDecoder.decodeBound((InputStream) imageObject);
            width = bound[0];
            height = bound[1];
        }

        int defaultWidth = maxSide;
        int defaultHeight = maxSide;
        if (width <= 0 || height <= 0) {
            width = defaultWidth;
            height = defaultHeight;
        } else if (resizeToDefault) {
            if (width > height) {
                height = (int) (defaultWidth * ((float) height / (float) width));
                width = defaultWidth;
            } else {
                width = (int) (defaultHeight * ((float) width / (float) height));
                height = defaultHeight;
            }
        }

        return new int[]{width, height};
    }

    /**
     * 下载失败与获取失败时都统一显示默认下载失败图片
     *
     * @return
     */
    public static Bitmap getBitmapFromDrawableRes(int res) {
        try {
            return getBitmapImmutableCopy(UIUtils.getResource(), res);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static boolean isInvalidPictureFile(String mimeType) {
        String lowerCaseFilepath = mimeType.toLowerCase();
        return (lowerCaseFilepath.contains("jpg") || lowerCaseFilepath.contains("jpeg")
                || lowerCaseFilepath.toLowerCase().contains("png") || lowerCaseFilepath.toLowerCase().contains("bmp") || lowerCaseFilepath
                .toLowerCase().contains("gif"));
    }
}

99:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\SampleSizeUtil.java
package com.lqr.wechat.nimsdk.utils;

import android.opengl.GLES10;

public class SampleSizeUtil {
	
	public static int calculateSampleSize(String imagePath, int totalPixel) {
		int[] bound = BitmapDecoder.decodeBound(imagePath);
		return calculateSampleSize(bound[0], bound[1], totalPixel);
	}
	
	public static int calculateSampleSize(int width, int height, int totalPixel) {
    	int ratio = 1;

        if (width > 0 && height > 0) {
        	ratio = (int) Math.sqrt((float) (width * height) / totalPixel);
        	if (ratio < 1) {
        		ratio = 1;
        	}        
        }

        return ratio;    
	}
	
	/**
	 * Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options}
	 * object when decoding bitmaps using the decode* methods from
	 * {@link android.graphics.BitmapFactory}. This implementation calculates the closest
	 * inSampleSize that will result in the final decoded bitmap having a width
	 * and height equal to or larger than the requested width and height. This
	 * implementation does not ensure a power of 2 is returned for inSampleSize
	 * which can be faster when decoding but results in a larger bitmap which
	 * isn't as useful for caching purposes.
	 * 
	 * @param width
	 * @param height
	 * @param reqWidth
	 * @param reqHeight
	 * @return
	 */
	public static int calculateSampleSize(int width, int height, int reqWidth, int reqHeight) {
		// can't proceed
		if (width <= 0 || height <= 0) {
			return 1;
		}
		// can't proceed
		if (reqWidth <= 0 && reqHeight <= 0) {
			return 1;
		} else if (reqWidth <= 0) {
			reqWidth = (int) (width * reqHeight / (float)height + 0.5f) ;
		} else if (reqHeight <= 0) {
			reqHeight = (int) (height * reqWidth / (float)width + 0.5f);
		}
		
		int inSampleSize = 1;

		if (height > reqHeight || width > reqWidth) {
			// Calculate ratios of height and width to requested height and width
			final int heightRatio = Math.round((float) height / (float) reqHeight);
			final int widthRatio = Math.round((float) width / (float) reqWidth);
	
			// Choose the smallest ratio as inSampleSize value, this will
			// guarantee a final image
			// with both dimensions larger than or equal to the requested height and width.
			inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
			if (inSampleSize == 0) {
				inSampleSize = 1;
			}
			
			// This offers some additional logic in case the image has a strange
			// aspect ratio. For example, a panorama may have a much larger
			// width than height. In these cases the total pixels might still
			// end up being too large to fit comfortably in memory, so we should
			// be more aggressive with sample down the image (=larger
			// inSampleSize).
	
			final float totalPixels = width * height;
			
			// Anything more than 2x the requested pixels we'll sample down
			// further
			final float totalReqPixelsCap = reqWidth * reqHeight * 2;
	
			while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) {
				inSampleSize++;
			}			
		}
		
		return inSampleSize;
	}
	
	public static final int adjustSampleSizeWithTexture(int sampleSize, int width, int height) {
		int textureSize = getTextureSize();
		
		if ((textureSize > 0) && ((width > sampleSize) || (height > sampleSize))) {
			while ((width / (float)sampleSize) > textureSize || (height / (float)sampleSize) > textureSize) {
				sampleSize++;
			}
			
			// 2的指数对齐
			sampleSize = SampleSizeUtil.roundup2n(sampleSize);
		}

		return sampleSize;
	}
	
	private static int textureSize = 0;
	//存在第二次拿拿不到的情况，所以把拿到的数据用一个static变量保存下来
	public static final int getTextureSize() {
		if (textureSize > 0) {
			return textureSize;
		}
		
		int[] params = new int[1];
		GLES10.glGetIntegerv(GLES10.GL_MAX_TEXTURE_SIZE, params, 0);
		textureSize = params[0];
		
		return textureSize;		
	}
	
	// 将x向上对齐到2的幂指数
		private static final int roundup2n(int x) {
			if ((x & (x - 1)) == 0) {
				return x;
			}
			int pos = 0;
			while (x > 0) {
				x >>= 1;
				++pos;
			}
			return 1 << pos;
		}
}

100:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\ScreenUtil.java
package com.lqr.wechat.nimsdk.utils;

import android.content.Context;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.util.Log;

import com.lqr.wechat.utils.UIUtils;

import java.lang.reflect.Field;

public class ScreenUtil {
    private static final String TAG = "Demo.ScreenUtil";

    private static double RATIO = 0.85;

    public static int screenWidth;
    public static int screenHeight;
    public static int screenMin;// 宽高中，小的一边
    public static int screenMax;// 宽高中，较大的值

    public static float density;
    public static float scaleDensity;
    public static float xdpi;
    public static float ydpi;
    public static int densityDpi;

    public static int dialogWidth;
    public static int statusbarheight;
    public static int navbarheight;

    static {
        init(UIUtils.getContext());
    }

    public static int dip2px(float dipValue) {
        return (int) (dipValue * density + 0.5f);
    }

    public static int px2dip(float pxValue) {
        return (int) (pxValue / density + 0.5f);
    }

    public static int sp2px(float spValue) {
        return (int) (spValue * scaleDensity + 0.5f);
    }

    public static int getDialogWidth() {
        dialogWidth = (int) (screenMin * RATIO);
        return dialogWidth;
    }

    public static void init(Context context) {
        if (null == context) {
            return;
        }
        DisplayMetrics dm = context.getApplicationContext().getResources().getDisplayMetrics();
        screenWidth = dm.widthPixels;
        screenHeight = dm.heightPixels;
        screenMin = (screenWidth > screenHeight) ? screenHeight : screenWidth;
        density = dm.density;
        scaleDensity = dm.scaledDensity;
        xdpi = dm.xdpi;
        ydpi = dm.ydpi;
        densityDpi = dm.densityDpi;

        Log.d(TAG, "screenWidth=" + screenWidth + " screenHeight=" + screenHeight + " density=" + density);
    }

    public static int getDisplayWidth() {
        if (screenWidth == 0) {
            GetInfo(UIUtils.getContext());
        }
        return screenWidth;
    }

    public static int getDisplayHeight() {
        if (screenHeight == 0) {
            GetInfo(UIUtils.getContext());
        }
        return screenHeight;
    }

    public static void GetInfo(Context context) {
        if (null == context) {
            return;
        }
        DisplayMetrics dm = context.getApplicationContext().getResources().getDisplayMetrics();
        screenWidth = dm.widthPixels;
        screenHeight = dm.heightPixels;
        screenMin = (screenWidth > screenHeight) ? screenHeight : screenWidth;
        screenMax = (screenWidth < screenHeight) ? screenHeight : screenWidth;
        density = dm.density;
        scaleDensity = dm.scaledDensity;
        xdpi = dm.xdpi;
        ydpi = dm.ydpi;
        densityDpi = dm.densityDpi;
        statusbarheight = getStatusBarHeight(context);
        navbarheight = getNavBarHeight(context);
        Log.d(TAG, "screenWidth=" + screenWidth + " screenHeight=" + screenHeight + " density=" + density);
    }

    public static int getStatusBarHeight(Context context) {
        if (statusbarheight == 0) {
            try {
                Class<?> c = Class.forName("com.android.internal.R$dimen");
                Object o = c.newInstance();
                Field field = c.getField("status_bar_height");
                int x = (Integer) field.get(o);
                statusbarheight = context.getResources().getDimensionPixelSize(x);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (statusbarheight == 0) {
            statusbarheight = ScreenUtil.dip2px(25);
        }
        return statusbarheight;
    }

    public static int getNavBarHeight(Context context) {
        Resources resources = context.getResources();
        int resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android");
        if (resourceId > 0) {
            return resources.getDimensionPixelSize(resourceId);
        }
        return 0;
    }
}

101:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\StorageType.java
package com.lqr.wechat.nimsdk.utils;

public enum StorageType {
    TYPE_LOG(DirectoryName.LOG_DIRECTORY_NAME),
    TYPE_TEMP(DirectoryName.TEMP_DIRECTORY_NAME),
    TYPE_FILE(DirectoryName.FILE_DIRECTORY_NAME),
    TYPE_AUDIO(DirectoryName.AUDIO_DIRECTORY_NAME),
    TYPE_IMAGE(DirectoryName.IMAGE_DIRECTORY_NAME),
    TYPE_VIDEO(DirectoryName.VIDEO_DIRECTORY_NAME),
    TYPE_THUMB_IMAGE(DirectoryName.THUMB_DIRECTORY_NAME),
    TYPE_THUMB_VIDEO(DirectoryName.THUMB_DIRECTORY_NAME),
    ;
    private DirectoryName storageDirectoryName;
    private long storageMinSize;                
    
    public String getStoragePath() {
		return storageDirectoryName.getPath();
	}

	public long getStorageMinSize() {
		return storageMinSize;
	}

	StorageType(DirectoryName dirName) {
		this(dirName, StorageUtils.THRESHOLD_MIN_SPCAE);
	}
    
	StorageType(DirectoryName dirName, long storageMinSize) {
        this.storageDirectoryName = dirName;
        this.storageMinSize = storageMinSize;    
	}
	
    enum DirectoryName {     	
    	AUDIO_DIRECTORY_NAME("audio/"),
        DATA_DIRECTORY_NAME("data/"),
        FILE_DIRECTORY_NAME("file/"),
        LOG_DIRECTORY_NAME("log/"),
        TEMP_DIRECTORY_NAME("temp/"),
        IMAGE_DIRECTORY_NAME("image/"),
        THUMB_DIRECTORY_NAME("thumb/"),
        VIDEO_DIRECTORY_NAME("video/"),
        ;
        
        private String path;
        
    	public String getPath() {
			return path;
		}

        private DirectoryName(String path) {
			this.path = path;
		}        	
    }       
}

102:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\StorageUtils.java
package com.lqr.wechat.nimsdk.utils;

import android.content.Context;
import android.os.Build;
import android.os.Environment;
import android.text.TextUtils;

import java.io.File;

/**
 * @创建者 CSDN_LQR
 * @描述 存储区工具类(与ExternalStorage、StorageType一起使用)
 */
public class StorageUtils {
    public final static long K = 1024;
    public final static long M = 1024 * 1024;
    // 外置存储卡默认预警临界值
    private static final long THRESHOLD_WARNING_SPACE = 100 * M;
    // 保存文件时所需的最小空间的默认值
    public static final long THRESHOLD_MIN_SPCAE = 20 * M;

    public static void init(Context context, String rootPath) {
        ExternalStorage.getInstance().init(context, rootPath);
    }

    /**
     * 获取文件保存路径，没有toast提示
     *
     * @param fileName
     * @param fileType
     * @return 可用的保存路径或者null
     */
    public static String getWritePath(String fileName, StorageType fileType) {
        return getWritePath(null, fileName, fileType, false);
    }

    /**
     * 获取文件保存路径
     *
     * @param fileName 文件全名
     * @param tip      空间不足时是否给出默认的toast提示
     * @return 可用的保存路径或者null
     */
    private static String getWritePath(Context context, String fileName, StorageType fileType, boolean tip) {
        String path = ExternalStorage.getInstance().getWritePath(fileName, fileType);
        if (TextUtils.isEmpty(path)) {
            return null;
        }
        File dir = new File(path).getParentFile();
        if (dir != null && !dir.exists()) {
            dir.mkdirs();
        }
        return path;
    }

    /**
     * 判断能否使用外置存储
     */
    public static boolean isExternalStorageExist() {
        return ExternalStorage.getInstance().isSdkStorageReady();
    }


    /**
     * 判断外部存储是否存在，以及是否有足够空间保存指定类型的文件
     *
     * @param context
     * @param fileType
     * @param tip      是否需要toast提示
     * @return false: 无存储卡或无空间可写, true: 表示ok
     */
    public static boolean hasEnoughSpaceForWrite(Context context, StorageType fileType, boolean tip) {
        if (!ExternalStorage.getInstance().isSdkStorageReady()) {
            return false;
        }

        long residual = ExternalStorage.getInstance().getAvailableExternalSize();
        if (residual < fileType.getStorageMinSize()) {
            return false;
        } else if (residual < THRESHOLD_WARNING_SPACE) {
        }

        return true;
    }

    /**
     * 根据输入的文件名和类型，找到该文件的全路径。
     *
     * @param fileName
     * @param fileType
     * @return 如果存在该文件，返回路径，否则返回空
     */
    public static String getReadPath(String fileName, StorageType fileType) {
        return ExternalStorage.getInstance().getReadPath(fileName, fileType);
    }

    /**
     * 获取文件保存路径，空间不足时有toast提示
     *
     * @param context
     * @param fileName
     * @param fileType
     * @return 可用的保存路径或者null
     */
    public static String getWritePath(Context context, String fileName, StorageType fileType) {
        return getWritePath(context, fileName, fileType, true);
    }

    public static String getDirectoryByDirType(StorageType fileType) {
        return ExternalStorage.getInstance().getDirectoryByDirType(fileType);
    }

    public static String getSystemImagePath() {
        if (Build.VERSION.SDK_INT > 7) {
            String picturePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsolutePath();
            return picturePath + "/nim/";
        } else {
            String picturePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath();
            return picturePath + "/nim/";
        }
    }

    public static boolean isInvalidVideoFile(String filePath) {
        return filePath.toLowerCase().endsWith(".3gp")
                || filePath.toLowerCase().endsWith(".mp4");
    }

}

103:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\nimsdk\utils\StringUtil.java
package com.lqr.wechat.nimsdk.utils;

import android.text.TextUtils;

import com.lqr.wechat.utils.MD5Utils;

import java.util.Locale;
import java.util.UUID;

public class StringUtil {
	
	public static String getPercentString(float percent) {
		return String.format(Locale.US, "%d%%", (int) (percent * 100));
	}
	/**
	 * 删除字符串中的空白符
	 *
	 * @param content
	 * @return String
	 */
	public static String removeBlanks(String content) {
		if (content == null) {
			return null;
		}
		StringBuilder buff = new StringBuilder();
		buff.append(content);
		for (int i = buff.length() - 1; i >= 0; i--) {
			if (' ' == buff.charAt(i) || ('\n' == buff.charAt(i)) || ('\t' == buff.charAt(i))
					|| ('\r' == buff.charAt(i))) {
				buff.deleteCharAt(i);
			}
		}
		return buff.toString();
	}
	/**
	 * 获取32位uuid
	 *
	 * @return
	 */
	public static String get32UUID() {
		return UUID.randomUUID().toString().replaceAll("-", "");
	}
	
	public static boolean isEmpty(String input) {
		return TextUtils.isEmpty(input);
	}
	
	/**
	 * 生成唯一号
	 *
	 * @return
	 */
	public static String get36UUID() {
		UUID uuid = UUID.randomUUID();
		String uniqueId = uuid.toString();
		return uniqueId;
	}
	
	public static String makeMd5(String source) {
		return MD5Utils.decode32(source);
	}
	
    public static final String filterUCS4(String str) {
		if (TextUtils.isEmpty(str)) {
			return str;
		}

		if (str.codePointCount(0, str.length()) == str.length()) {
			return str;
		}

		StringBuilder sb = new StringBuilder();

		int index = 0;
		while (index < str.length()) {
			int codePoint = str.codePointAt(index);
			index += Character.charCount(codePoint);
			if (Character.isSupplementaryCodePoint(codePoint)) {
				continue;
			}

			sb.appendCodePoint(codePoint);
		}

		return sb.toString();
	}

    /**
     * counter ASCII character as one, otherwise two
     *
     * @param str
     * @return count
     */
    public static int counterChars(String str) {
        // return
        if (TextUtils.isEmpty(str)) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            int tmp = (int) str.charAt(i);
            if (tmp > 0 && tmp < 127) {
                count += 1;
            } else {
                count += 2;
            }
        }
        return count;
    }
}

104:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\pager\BasePager.java
package com.lqr.wechat.pager;

import android.app.Activity;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;

import com.lqr.wechat.R;
import com.zl.reik.dilatingdotsprogressbar.DilatingDotsProgressBar;

/**
 * @创建者 CSDN_LQR
 * @描述 基本页面（用于替换Fragment）
 */
public abstract class BasePager {

    //缓存标记
    public String cacheTag = this.getClass().getSimpleName();

    public Activity mActivity;
    public View mRootView;//布局对象
    public FrameLayout flContent;//内容
    public RelativeLayout mRlOrderNull;//空订单提示
    public RelativeLayout mRlProgress;//进度条
    public DilatingDotsProgressBar mProgress;

    public BasePager(Activity activity) {
        mActivity = activity;
        init();
        initListener();
    }

    private void init() {
        mRootView = View.inflate(mActivity, R.layout.base_pager, null);
        flContent = (FrameLayout) mRootView.findViewById(R.id.fl_content);
        mRlOrderNull = (RelativeLayout) mRootView.findViewById(R.id.rlOrderNull);
        mRlProgress = (RelativeLayout) mRootView.findViewById(R.id.rlProgress);
        mProgress = (DilatingDotsProgressBar) mRootView.findViewById(R.id.progress);
        mProgress.showNow();
        flContent.addView(initView());
    }

    /**
     * 初始化布局
     */
    public abstract View initView();

    /**
     * 初始化数据
     */
    public void initData() {

    }

    /**
     * 初始化事件
     */
    public void initListener() {

    }


}

105:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\utils\Bimp.java
package com.lqr.wechat.utils;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.Display;
import android.view.WindowManager;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * @创建者 CSDN_LQR
 * @描述 图像处理工具类
 */
public class Bimp {
    public static int max = 0;
    public static boolean act_bool = true;
    public static List<Bitmap> bmp = new ArrayList<Bitmap>();

    /**
     * 根据一个网络连接(String)获取bitmap图像
     *
     * @param imageUri
     * @return
     */
    public static Bitmap getNetBitmap(String imageUri) {
        // 显示网络上的图片
        Bitmap bitmap = null;
        try {
            URL myFileUrl = new URL(imageUri);
            HttpURLConnection conn = (HttpURLConnection) myFileUrl
                    .openConnection();
            conn.setDoInput(true);
            conn.connect();
            InputStream is = conn.getInputStream();
            bitmap = BitmapFactory.decodeStream(is);
            is.close();

        } catch (OutOfMemoryError e) {
            e.printStackTrace();
            bitmap = null;
        } catch (IOException e) {
            e.printStackTrace();
            bitmap = null;
        }
        return bitmap;
    }


    // 图片sd地址 上传服务器时把图片调用下面方法压缩后 保存到临时文件夹 图片压缩后小于100KB，失真度不明显
    public static List<String> drr = new ArrayList<String>();

    // TelephonyManager tm = (TelephonyManager) this
    // .getSystemService(Context.TELEPHONY_SERVICE);

    public static Bitmap revitionImageSize(String path) throws IOException {
        BufferedInputStream in = new BufferedInputStream(new FileInputStream(
                new File(path)));

        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        // Bitmap btBitmap=BitmapFactory.decodeFile(path);
        // System.out.println("原尺寸高度："+btBitmap.getHeight());
        // System.out.println("原尺寸宽度："+btBitmap.getWidth());
        BitmapFactory.decodeStream(in, null, options);
        in.close();
        int i = 0;
        Bitmap bitmap = null;
        while (true) {
            if ((options.outWidth >> i <= 800)
                    && (options.outHeight >> i <= 800)) {
                in = new BufferedInputStream(
                        new FileInputStream(new File(path)));
                options.inSampleSize = (int) Math.pow(2.0D, i);
                options.inJustDecodeBounds = false;
                bitmap = BitmapFactory.decodeStream(in, null, options);
                break;
            }
            i += 1;
        }
        // 当机型为三星时图片翻转
//		bitmap = Photo.photoAdapter(path, bitmap);
//		System.out.println("-----压缩后尺寸高度：" + bitmap.getHeight());
//		System.out.println("-----压缩后尺寸宽度度：" + bitmap.getWidth());
        return bitmap;
    }

    public static Bitmap getLoacalBitmap(String url) {
        try {
            FileInputStream fis = new FileInputStream(url);
            return BitmapFactory.decodeStream(fis); // /把流转化为Bitmap图片

        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * @param x              图像的宽度
     * @param y              图像的高度
     * @param image          源图片
     * @param outerRadiusRat 圆角的大小
     * @return 圆角图片
     */
    public static Bitmap createFramedPhoto(int x, int y, Bitmap image, float outerRadiusRat) {
        // 根据源文件新建一个darwable对象
        Drawable imageDrawable = new BitmapDrawable(image);

        // 新建一个新的输出图片
        Bitmap output = Bitmap.createBitmap(x, y, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(output);

        // 新建一个矩形
        RectF outerRect = new RectF(0, 0, x, y);

        // 产生一个红色的圆角矩形
        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        paint.setColor(Color.RED);
        canvas.drawRoundRect(outerRect, outerRadiusRat, outerRadiusRat, paint);

        // 将源图片绘制到这个圆角矩形上
        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        imageDrawable.setBounds(0, 0, x, y);
        canvas.saveLayer(outerRect, paint, Canvas.ALL_SAVE_FLAG);
        imageDrawable.draw(canvas);
        canvas.restore();

        return output;
    }

    public static Bitmap zoomForFilePath(Activity context, String filePath) {
        Bitmap bitmap = BitmapFactory.decodeFile(filePath);
        BitmapFactory.Options opt = new BitmapFactory.Options();
        //这个isjustdecodebounds很重要
        opt.inJustDecodeBounds = true;

        //获取到这个图片的原始宽度和高度
        int picWidth = bitmap.getWidth();
        int picHeight = bitmap.getHeight();

        //获取屏的宽度和高度
        WindowManager windowManager = context.getWindowManager();
        Display display = windowManager.getDefaultDisplay();
        int screenWidth = display.getWidth();
        int screenHeight = display.getHeight();

        //isSampleSize是表示对图片的缩放程度，比如值为2图片的宽度和高度都变为以前的1/2
        opt.inSampleSize = 1;
        //根据屏的大小和图片大小计算出缩放比例
        if (picWidth > picHeight) {
            if (picWidth > screenWidth)
                opt.inSampleSize = picWidth / screenWidth;
        } else {
            if (picHeight > screenHeight)
                opt.inSampleSize = picHeight / screenHeight;
        }

        //这次再真正地生成一个有像素的，经过缩放了的bitmap
        opt.inJustDecodeBounds = false;
        bitmap = BitmapFactory.decodeFile(filePath, opt);
        return bitmap;
    }

    /**
     * 高斯模糊
     */
    public static Bitmap doBlur(Bitmap sentBitmap, int radius,
                                boolean canReuseInBitmap) {
        Bitmap bitmap;
        if (canReuseInBitmap) {
            bitmap = sentBitmap;
        } else {
            bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);
        }

        if (radius < 1) {
            return (null);
        }

        int w = bitmap.getWidth();
        int h = bitmap.getHeight();

        int[] pix = new int[w * h];
        bitmap.getPixels(pix, 0, w, 0, 0, w, h);

        int wm = w - 1;
        int hm = h - 1;
        int wh = w * h;
        int div = radius + radius + 1;

        int r[] = new int[wh];
        int g[] = new int[wh];
        int b[] = new int[wh];
        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
        int vmin[] = new int[Math.max(w, h)];

        int divsum = (div + 1) >> 1;
        divsum *= divsum;
        int dv[] = new int[256 * divsum];
        for (i = 0; i < 256 * divsum; i++) {
            dv[i] = (i / divsum);
        }

        yw = yi = 0;

        int[][] stack = new int[div][3];
        int stackpointer;
        int stackstart;
        int[] sir;
        int rbs;
        int r1 = radius + 1;
        int routsum, goutsum, boutsum;
        int rinsum, ginsum, binsum;

        for (y = 0; y < h; y++) {
            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
            for (i = -radius; i <= radius; i++) {
                p = pix[yi + Math.min(wm, Math.max(i, 0))];
                sir = stack[i + radius];
                sir[0] = (p & 0xff0000) >> 16;
                sir[1] = (p & 0x00ff00) >> 8;
                sir[2] = (p & 0x0000ff);
                rbs = r1 - Math.abs(i);
                rsum += sir[0] * rbs;
                gsum += sir[1] * rbs;
                bsum += sir[2] * rbs;
                if (i > 0) {
                    rinsum += sir[0];
                    ginsum += sir[1];
                    binsum += sir[2];
                } else {
                    routsum += sir[0];
                    goutsum += sir[1];
                    boutsum += sir[2];
                }
            }
            stackpointer = radius;

            for (x = 0; x < w; x++) {

                r[yi] = dv[rsum];
                g[yi] = dv[gsum];
                b[yi] = dv[bsum];

                rsum -= routsum;
                gsum -= goutsum;
                bsum -= boutsum;

                stackstart = stackpointer - radius + div;
                sir = stack[stackstart % div];

                routsum -= sir[0];
                goutsum -= sir[1];
                boutsum -= sir[2];

                if (y == 0) {
                    vmin[x] = Math.min(x + radius + 1, wm);
                }
                p = pix[yw + vmin[x]];

                sir[0] = (p & 0xff0000) >> 16;
                sir[1] = (p & 0x00ff00) >> 8;
                sir[2] = (p & 0x0000ff);

                rinsum += sir[0];
                ginsum += sir[1];
                binsum += sir[2];

                rsum += rinsum;
                gsum += ginsum;
                bsum += binsum;

                stackpointer = (stackpointer + 1) % div;
                sir = stack[(stackpointer) % div];

                routsum += sir[0];
                goutsum += sir[1];
                boutsum += sir[2];

                rinsum -= sir[0];
                ginsum -= sir[1];
                binsum -= sir[2];

                yi++;
            }
            yw += w;
        }
        for (x = 0; x < w; x++) {
            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
            yp = -radius * w;
            for (i = -radius; i <= radius; i++) {
                yi = Math.max(0, yp) + x;

                sir = stack[i + radius];

                sir[0] = r[yi];
                sir[1] = g[yi];
                sir[2] = b[yi];

                rbs = r1 - Math.abs(i);

                rsum += r[yi] * rbs;
                gsum += g[yi] * rbs;
                bsum += b[yi] * rbs;

                if (i > 0) {
                    rinsum += sir[0];
                    ginsum += sir[1];
                    binsum += sir[2];
                } else {
                    routsum += sir[0];
                    goutsum += sir[1];
                    boutsum += sir[2];
                }

                if (i < hm) {
                    yp += w;
                }
            }
            yi = x;
            stackpointer = radius;
            for (y = 0; y < h; y++) {
                // Preserve alpha channel: ( 0xff000000 & pix[yi] )
                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)
                        | (dv[gsum] << 8) | dv[bsum];

                rsum -= routsum;
                gsum -= goutsum;
                bsum -= boutsum;

                stackstart = stackpointer - radius + div;
                sir = stack[stackstart % div];

                routsum -= sir[0];
                goutsum -= sir[1];
                boutsum -= sir[2];

                if (x == 0) {
                    vmin[y] = Math.min(y + r1, hm) * w;
                }
                p = x + vmin[y];

                sir[0] = r[p];
                sir[1] = g[p];
                sir[2] = b[p];

                rinsum += sir[0];
                ginsum += sir[1];
                binsum += sir[2];

                rsum += rinsum;
                gsum += ginsum;
                bsum += binsum;

                stackpointer = (stackpointer + 1) % div;
                sir = stack[stackpointer];

                routsum += sir[0];
                goutsum += sir[1];
                boutsum += sir[2];

                rinsum -= sir[0];
                ginsum -= sir[1];
                binsum -= sir[2];

                yi += w;
            }
        }

        bitmap.setPixels(pix, 0, w, 0, 0, w, h);

        return (bitmap);
    }

}

106:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\utils\Common.java
package com.lqr.wechat.utils;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;

/**
 * @创建者 CSDN_LQR
 * @描述 应用版本信息
 */
public class Common {
    /**
     * 获取版本号
     *
     * @param context
     * @return
     */
    public static int getVerCode(Context context) {
        int verCode = -1;
        try {
            verCode = context.getPackageManager().getPackageInfo(
                    context.getPackageName(), 0).versionCode;
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        return verCode;
    }

    /**
     * 获取版本名
     *
     * @param context
     * @return
     */
    public static String getVerName(Context context) {
        String verName = "";
        try {
            verName = context.getPackageManager().getPackageInfo(
                    context.getPackageName(), 0).versionName;
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        return verName;
    }
}

107:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\utils\DateUtil.java
package com.lqr.wechat.utils;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * @创建者 CSDN_LQR
 * @描述 时间格式化工具
 */
public class DateUtil {
    public static final String ENG_DATE_FROMAT = "EEE, d MMM yyyy HH:mm:ss z";
    public static final String YYYY_MM_DD_HH_MM_SS = "yyyy-MM-dd HH:mm:ss";
    public static final String YYYY_MM_DD_HH_MM = "yyyy-MM-dd HH:mm";
    public static final String YYYY_MM_DD = "yyyy-MM-dd";
    public static final String YYYY = "yyyy";
    public static final String MM = "MM";
    public static final String DD = "dd";


    /**
     * 格式化日期对象
     *
     * @param date
     * @param formatStr
     * @return
     */
    public static Date date2date(Date date, String formatStr) {
        SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
        String str = sdf.format(date);
        try {
            date = sdf.parse(str);
        } catch (Exception e) {
            return null;
        }
        return date;
    }

    /**
     * 时间对象转换成字符串
     *
     * @param date
     * @param formatStr
     * @return
     */
    public static String date2string(Date date, String formatStr) {
        String strDate = "";
        SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
        strDate = sdf.format(date);
        return strDate;
    }

    /**
     * sql时间对象转换成字符串
     *
     * @param timestamp
     * @param formatStr
     * @return
     */
    public static String timestamp2string(Timestamp timestamp, String formatStr) {
        String strDate = "";
        SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
        strDate = sdf.format(timestamp);
        return strDate;
    }

    /**
     * 字符串转换成时间对象
     *
     * @param dateString
     * @param formatStr
     * @return
     */
    public static Date string2date(String dateString, String formatStr) {
        Date formateDate = null;
        DateFormat format = new SimpleDateFormat(formatStr);
        try {
            formateDate = format.parse(dateString);
        } catch (ParseException e) {
            return null;
        }
        return formateDate;
    }

    /**
     * Date类型转换为Timestamp类型
     *
     * @param date
     * @return
     */
    public static Timestamp date2timestamp(Date date) {
        if (date == null)
            return null;
        return new Timestamp(date.getTime());
    }

    /**
     * 获得当前年份
     *
     * @return
     */
    public static String getNowYear() {
        SimpleDateFormat sdf = new SimpleDateFormat(YYYY);
        return sdf.format(new Date());
    }

    /**
     * 获得当前月份
     *
     * @return
     */
    public static String getNowMonth() {
        SimpleDateFormat sdf = new SimpleDateFormat(MM);
        return sdf.format(new Date());
    }

    /**
     * 获得当前日期中的日
     *
     * @return
     */
    public static String getNowDay() {
        SimpleDateFormat sdf = new SimpleDateFormat(DD);
        return sdf.format(new Date());
    }

    /**
     * 指定时间距离当前时间的中文信息
     *
     * @param time
     * @return
     */
    public static String getLnow(long time) {
        Calendar cal = Calendar.getInstance();
        long timel = cal.getTimeInMillis() - time;
        if (timel / 1000 < 60) {
            return "1分钟以内";
        } else if (timel / 1000 / 60 < 60) {
            return timel / 1000 / 60 + "分钟前";
        } else if (timel / 1000 / 60 / 60 < 24) {
            return timel / 1000 / 60 / 60 + "小时前";
        } else {
            return timel / 1000 / 60 / 60 / 24 + "天前";
        }
    }

    public static String getLnow(Date date) {
        if (date == null)
            return "";
        return getLnow(date.getTime());
    }
}

108:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\utils\DensityUtils.java
package com.lqr.wechat.utils;

import android.content.Context;
import android.util.TypedValue;

/**
 * @创建者 CSDN_LQR
 * @描述 常用单位转换的辅助类
 */
public class DensityUtils {
    private DensityUtils() {
        /* cannot be instantiated */
        throw new UnsupportedOperationException("cannot be instantiated");
    }

    /**
     * dp转px
     *
     * @param context
     * @return
     */
    public static int dp2px(Context context, float dpVal) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                dpVal, context.getResources().getDisplayMetrics());
    }

    /**
     * sp转px
     *
     * @param context
     * @return
     */
    public static int sp2px(Context context, float spVal) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,
                spVal, context.getResources().getDisplayMetrics());
    }

    /**
     * px转dp
     *
     * @param context
     * @param pxVal
     * @return
     */
    public static float px2dp(Context context, float pxVal) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (pxVal / scale);
    }

    /**
     * px转sp
     *
     * @param pxVal
     * @return
     */
    public static float px2sp(Context context, float pxVal) {
        return (pxVal / context.getResources().getDisplayMetrics().scaledDensity);
    }

}  

109:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\utils\FastBlurUtil.java
package com.lqr.wechat.utils;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;

/**
 * @author CSDN_LQR
 * @time 2016/6/27 17:56
 * @Des 本地图片或者网络图片高斯模糊效果（毛玻璃效果）
 */
public class FastBlurUtil {
    /**
     * 根据imagepath获取bitmap
     */
    /**
     * 得到本地或者网络上的bitmap url - 网络或者本地图片的绝对路径,比如:
     * A.网络路径: url="http://blog.foreverlove.us/girl2.png" ;
     * B.本地路径:url="file://mnt/sdcard/photo/image.png";
     * C.支持的图片格式 ,png, jpg,bmp,gif等等
     *
     * @param url
     * @return
     */
    public static int IO_BUFFER_SIZE = 2 * 1024;

    public static Bitmap GetUrlBitmap(String url, int scaleRatio) {

        int blurRadius = 8;//通常设置为8就行。
        if (scaleRatio <= 0) {
            scaleRatio = 10;
        }


        Bitmap originBitmap = null;
        InputStream in = null;
        BufferedOutputStream out = null;
        try {
            in = new BufferedInputStream(new URL(url).openStream(), IO_BUFFER_SIZE);
            final ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
            out = new BufferedOutputStream(dataStream, IO_BUFFER_SIZE);
            copy(in, out);
            out.flush();
            byte[] data = dataStream.toByteArray();
            originBitmap = BitmapFactory.decodeByteArray(data, 0, data.length);

            Bitmap scaledBitmap = Bitmap.createScaledBitmap(originBitmap,
                    originBitmap.getWidth() / scaleRatio,
                    originBitmap.getHeight() / scaleRatio,
                    false);
            Bitmap blurBitmap = doBlur(scaledBitmap, blurRadius, true);
            return blurBitmap;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static void copy(InputStream in, OutputStream out)
            throws IOException {
        byte[] b = new byte[IO_BUFFER_SIZE];
        int read;
        while ((read = in.read(b)) != -1) {
            out.write(b, 0, read);
        }
    }


    //    把本地图片毛玻璃化
    public static Bitmap toBlur(Bitmap originBitmap, int scaleRatio) {
        //        int scaleRatio = 10;
        // 增大scaleRatio缩放比，使用一样更小的bitmap去虚化可以到更好的得模糊效果，而且有利于占用内存的减小；
        int blurRadius = 8;//通常设置为8就行。
        //增大blurRadius，可以得到更高程度的虚化，不过会导致CPU更加intensive

       /* 其中前三个参数很明显，其中宽高我们可以选择为原图尺寸的1/10；
        第四个filter是指缩放的效果，filter为true则会得到一个边缘平滑的bitmap，
        反之，则会得到边缘锯齿、pixelrelated的bitmap。
        这里我们要对缩放的图片进行虚化，所以无所谓边缘效果，filter=false。*/
        if (scaleRatio <= 0) {
            scaleRatio = 10;
        }
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(originBitmap,
                originBitmap.getWidth() / scaleRatio,
                originBitmap.getHeight() / scaleRatio,
                false);
        Bitmap blurBitmap = doBlur(scaledBitmap, blurRadius, true);
        return blurBitmap;
    }

    private static Bitmap doBlur(Bitmap sentBitmap, int radius, boolean canReuseInBitmap) {

        // Stack Blur v1.0 from
        // http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html
        //
        // Java Author: Mario Klingemann <mario at quasimondo.com>
        // http://incubator.quasimondo.com
        // created Feburary 29, 2004
        // Android port : Yahel Bouaziz <yahel at kayenko.com>
        // http://www.kayenko.com
        // ported april 5th, 2012

        // This is a compromise between Gaussian Blur and Box blur
        // It creates much better looking blurs than Box Blur, but is
        // 7x faster than my Gaussian Blur implementation.
        //
        // I called it Stack Blur because this describes best how this
        // filter works internally: it creates a kind of moving stack
        // of colors whilst scanning through the image. Thereby it
        // just has to insertOrUpdate one new block of color to the right side
        // of the stack and remove the leftmost color. The remaining
        // colors on the topmost layer of the stack are either added on
        // or reduced by one, depending on if they are on the right or
        // on the left side of the stack.
        //
        // If you are using this algorithm in your code please insertOrUpdate
        // the following line:
        //
        // Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>

        Bitmap bitmap;
        if (canReuseInBitmap) {
            bitmap = sentBitmap;
        } else {
            bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);
        }

        if (radius < 1) {
            return (null);
        }

        int w = bitmap.getWidth();
        int h = bitmap.getHeight();

        int[] pix = new int[w * h];
        bitmap.getPixels(pix, 0, w, 0, 0, w, h);

        int wm = w - 1;
        int hm = h - 1;
        int wh = w * h;
        int div = radius + radius + 1;

        int r[] = new int[wh];
        int g[] = new int[wh];
        int b[] = new int[wh];
        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
        int vmin[] = new int[Math.max(w, h)];

        int divsum = (div + 1) >> 1;
        divsum *= divsum;
        int dv[] = new int[256 * divsum];
        for (i = 0; i < 256 * divsum; i++) {
            dv[i] = (i / divsum);
        }

        yw = yi = 0;

        int[][] stack = new int[div][3];
        int stackpointer;
        int stackstart;
        int[] sir;
        int rbs;
        int r1 = radius + 1;
        int routsum, goutsum, boutsum;
        int rinsum, ginsum, binsum;

        for (y = 0; y < h; y++) {
            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
            for (i = -radius; i <= radius; i++) {
                p = pix[yi + Math.min(wm, Math.max(i, 0))];
                sir = stack[i + radius];
                sir[0] = (p & 0xff0000) >> 16;
                sir[1] = (p & 0x00ff00) >> 8;
                sir[2] = (p & 0x0000ff);
                rbs = r1 - Math.abs(i);
                rsum += sir[0] * rbs;
                gsum += sir[1] * rbs;
                bsum += sir[2] * rbs;
                if (i > 0) {
                    rinsum += sir[0];
                    ginsum += sir[1];
                    binsum += sir[2];
                } else {
                    routsum += sir[0];
                    goutsum += sir[1];
                    boutsum += sir[2];
                }
            }
            stackpointer = radius;

            for (x = 0; x < w; x++) {

                r[yi] = dv[rsum];
                g[yi] = dv[gsum];
                b[yi] = dv[bsum];

                rsum -= routsum;
                gsum -= goutsum;
                bsum -= boutsum;

                stackstart = stackpointer - radius + div;
                sir = stack[stackstart % div];

                routsum -= sir[0];
                goutsum -= sir[1];
                boutsum -= sir[2];

                if (y == 0) {
                    vmin[x] = Math.min(x + radius + 1, wm);
                }
                p = pix[yw + vmin[x]];

                sir[0] = (p & 0xff0000) >> 16;
                sir[1] = (p & 0x00ff00) >> 8;
                sir[2] = (p & 0x0000ff);

                rinsum += sir[0];
                ginsum += sir[1];
                binsum += sir[2];

                rsum += rinsum;
                gsum += ginsum;
                bsum += binsum;

                stackpointer = (stackpointer + 1) % div;
                sir = stack[(stackpointer) % div];

                routsum += sir[0];
                goutsum += sir[1];
                boutsum += sir[2];

                rinsum -= sir[0];
                ginsum -= sir[1];
                binsum -= sir[2];

                yi++;
            }
            yw += w;
        }
        for (x = 0; x < w; x++) {
            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
            yp = -radius * w;
            for (i = -radius; i <= radius; i++) {
                yi = Math.max(0, yp) + x;

                sir = stack[i + radius];

                sir[0] = r[yi];
                sir[1] = g[yi];
                sir[2] = b[yi];

                rbs = r1 - Math.abs(i);

                rsum += r[yi] * rbs;
                gsum += g[yi] * rbs;
                bsum += b[yi] * rbs;

                if (i > 0) {
                    rinsum += sir[0];
                    ginsum += sir[1];
                    binsum += sir[2];
                } else {
                    routsum += sir[0];
                    goutsum += sir[1];
                    boutsum += sir[2];
                }

                if (i < hm) {
                    yp += w;
                }
            }
            yi = x;
            stackpointer = radius;
            for (y = 0; y < h; y++) {
                // Preserve alpha channel: ( 0xff000000 & pix[yi] )
                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];

                rsum -= routsum;
                gsum -= goutsum;
                bsum -= boutsum;

                stackstart = stackpointer - radius + div;
                sir = stack[stackstart % div];

                routsum -= sir[0];
                goutsum -= sir[1];
                boutsum -= sir[2];

                if (x == 0) {
                    vmin[y] = Math.min(y + r1, hm) * w;
                }
                p = x + vmin[y];

                sir[0] = r[p];
                sir[1] = g[p];
                sir[2] = b[p];

                rinsum += sir[0];
                ginsum += sir[1];
                binsum += sir[2];

                rsum += rinsum;
                gsum += ginsum;
                bsum += binsum;

                stackpointer = (stackpointer + 1) % div;
                sir = stack[stackpointer];

                routsum += sir[0];
                goutsum += sir[1];
                boutsum += sir[2];

                rinsum -= sir[0];
                ginsum -= sir[1];
                binsum -= sir[2];

                yi += w;
            }
        }

        bitmap.setPixels(pix, 0, w, 0, 0, w, h);

        return (bitmap);
    }

}

110:F:\git\android\weixinlook\LQRWeChat\app\src\main\java\com\lqr\wechat\utils\FileIconUtils.java
package com.lqr.wechat.utils;

import com.lqr.wechat.R;

/**
 * @创建者 CSDN_LQR
 * @描述 文件图标工具类
 */
public class FileIconUtils {

    /**
     * 根据文件后缀名得到对应的图标资源id
     */
    public static int getFileIconResId(String suffix) {
        if (suffix.equals("doc") || suffix.equals("docx")) {
            return R.mipmap.ic_word;
        } else if (suffix.equals("xls") || suffix.equals("xlsx")) {
            return R.mipmap.ic_excel;
        } else if (suffix.equals("ppt") || suffix.equals("pptx")) {
            return R.mipmap.ic_ppt;
        } else if (suffix.equals("rar") || suffix.equals("zip")) {
            return R.mipmap.ic_zip;
        } else {
            return R.mipmap.ic_file;
        }
    }

}
