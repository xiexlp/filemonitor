/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package js.com.file.utils;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.table.TableModel;
import static js.com.file.utils.FileControl.FormetFileSize;
import static js.com.file.utils.FileControl.getFileSize;

/**
 * 计算文件大小，寻找大文件
 * @author Administrator
 */
public class FileFrame extends javax.swing.JFrame {
    
    String initDir="e:\\";
    
    File initFile;
    
    String currentDir;
    File currentFile;
    
    FileTableModel fileTableModel;
    FileSizeTableModel fileSizeTableModel;
    
     JFileChooser fc;

    /**
     * Creates new form FileFrame
     */
    public FileFrame() {
        System.out.println("初始化图形");
        initComponents();
        System.out.println("初始化图形完成");
        init();
        //init(List<FileEx> fileList);
    }
    
    public void init(){
        filePathTextField.setText(initDir);
        initFile= new File(initDir);
        currentFile = initFile;
        File[] files = initFile.listFiles();
        if(files!=null){
            updateTableContent(files);
        }
        
        System.out.println("设置初始文件夹");
        fc=new JFileChooser(new File(initDir));
        System.out.println("设置初始文件夹完成");
    }
    
    public void init(List<FileEx> fileList){
        System.out.println("init ... table");
       // String[] columnNames = {"A","B"};   //列名
        //String [][]tableVales={{"A1","B1"},{"A2","B2"},{"A3","B3"},{"A4","B4"},{"A5","B5"}}; //数据
        //TableModel fileTableModel = new DefaultTableModel(tableVales,columnNames);
        
        TableModel fileTableModel= new FileSizeTableModel(fileList);
        //fileTable = new JTable(fileTableModel);
        //fileTable.updateUI();
        fileTable.setModel(fileTableModel);
       
        
         fileTable.setPreferredScrollableViewportSize(new Dimension(400,200));
          fileTable.updateUI();
        //jScrollPane1.add(fileTable);
    }
    
    public void updateTableContent(File[] files){
        fileTableModel = new FileTableModel(files);
            fileTable.setModel(fileTableModel);
             fileTable.updateUI();
           setFilePathTextEditor();
    }
    
    
    public void setFilePathTextEditor(File currentFile){
        filePathTextField.setText(currentFile.getAbsolutePath());
    }
    
    public void setFilePathTextEditor(){
        filePathTextField.setText(currentFile.getAbsolutePath());
    }
    
    
    public void updataTableByParent(File parentFile){
        if(parentFile.isDirectory()){
            File[] files = parentFile.listFiles();
            updateTableContent(files);
        }
        setFilePathTextEditor();
    }
    
    public void updateTableContent(List<FileEx> fileList){
        TableModel fileTableModel= new FileSizeTableModel(fileList);
        //fileTable = new JTable(fileTableModel);
        //fileTable.updateUI();
        fileTable.setModel(fileTableModel);
       
        
         fileTable.setPreferredScrollableViewportSize(new Dimension(400,200));
          fileTable.updateUI();
          setFilePathTextEditor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        backOne = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        filePathTextField = new javax.swing.JTextField();
        fileChooseButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        backOne.setText("<<");
        backOne.setFocusable(false);
        backOne.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backOne.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backOneActionPerformed(evt);
            }
        });
        jToolBar1.add(backOne);

        jButton2.setText("jButton2");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        filePathTextField.setText("jTextField1");

        fileChooseButton.setText("选择文件");
        fileChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooseButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("计算列表文件大小");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        fileTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fileTable);

        jScrollPane2.setViewportView(jScrollPane1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fileChooseButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(refreshButton))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(772, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileChooseButton)
                    .addComponent(refreshButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooseButtonActionPerformed
        // TODO add your handling code here:
        String selectDir = filePathTextField.getText().trim();
        //fc = new JFileChooser(new File(initDir));
        //fc.setCurrentDirectory(initFile);
        fc.setCurrentDirectory(initFile);
        //fc.setSelectedFile(new File(initDir));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String dir ="";
        File file = null;
        int flag = fc.showOpenDialog(null);
        if(flag==JFileChooser.APPROVE_OPTION){
            file=fc.getSelectedFile();
            currentFile = file;
            dir = file.getPath();
            System.out.println("select file path:"+dir);
            filePathTextField.setText(dir);
        }
        
        
        File[] files = new File(dir).listFiles();
        if(files!=null){
            updateTableContent(files);
        }
    }//GEN-LAST:event_fileChooseButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("refresh");
        File rootDir = new File(filePathTextField.getText().trim());
        currentFile = rootDir;
        File[] files = rootDir.listFiles();
	int l=files.length;
	List<FileEx> fileList = new ArrayList();
        
        for(File f:files){
            long size=0;
            if(f.isFile()){
		size = f.length();
		System.out.println("name:"+f.getName()+" size:"+size);
            }
			//if(f.isFile()) continue;
            try{
                size = getFileSize(f);
                System.out.println("name:"+f.getName()+" size:"+FormetFileSize(size));
            }catch(Exception e){
                e.printStackTrace();
            }
            FileEx fileEx =new FileEx();fileEx.setFile(f);fileEx.setSize(size);fileEx.setName(f.getName());fileEx.setFormatSize(FormetFileSize(size));
            fileList.add(fileEx);
        }
        init(fileList);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void fileTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTableMouseClicked
        // TODO add your handling code here:
        //System.out.println("click");
        int i=evt.getClickCount();
        if(i==2){
            //System.out.println("click 2");
            int selectRow=fileTable.getSelectedRow();
            int selectCol=fileTable.getSelectedColumn();
           
            FileTableModel fileTableModel = (FileTableModel)fileTable.getModel();
            String value=(String)fileTableModel.getValueAt(selectRow, selectCol);
            System.out.println("value:"+ value);
            
            File selectFile =fileTableModel.getFiles()[selectRow];
            //如果是dir，则
            if(selectFile.isDirectory()){
                File[] files = selectFile.listFiles();
                updateTableContent(files);
                filePathTextField.setText(selectFile.getAbsolutePath());
                currentDir = selectFile.getAbsolutePath();
                currentFile = selectFile;
            }else{
                System.out.println("file name:"+selectFile.getName());
            }
            
        }
    }//GEN-LAST:event_fileTableMouseClicked

    private void backOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backOneActionPerformed
        // TODO add your handling code here:
        currentFile = currentFile.getParentFile();
        updataTableByParent(currentFile);
    }//GEN-LAST:event_backOneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FileFrame ff= new FileFrame();
                ff.setSize(1000, 900);
                int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;
                int frameWidth = ff.getWidth();
                int x = screenWidth/2-frameWidth/2;
                int y= 5;
                ff.setLocation(x, y);
                ff.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backOne;
    private javax.swing.JButton fileChooseButton;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JTable fileTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
